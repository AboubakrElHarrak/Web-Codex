{
    "url": "https://en.wikipedia.org/wiki/Personal_software_process",
    "title": "Personal software process",
    "table_of_contents": [
        "1 Objectives",
        "2 PSP structure",
        "3 The importance of data",
        "4 Planning and tracking",
        "5 Using the PSP",
        "5.1 PSP and the TSP",
        "5.2 PSP and other methodologies",
        "5.3 Quality",
        "6 Certification",
        "7 See also",
        "8 References",
        "9 Further reading",
        "10 External links"
    ],
    "content": [
        {
            "paragraph1": "The Personal Software Process (PSP) is a structured software development process that is designed to help software engineers better understand and improve their performance by bringing discipline to the way they develop software and tracking their predicted and actual development of the code. It clearly shows developers how to manage the quality of their products, how to make a sound plan, and how to make commitments. It also offers them the data to justify their plans. They can evaluate their work and suggest improvement direction by analyzing and reviewing development time, defects, and size data. The PSP was created by Watts Humphrey to apply the underlying principles of the Software Engineering Institute's (SEI) Capability Maturity Model (CMM) to the software development practices of a single developer. It claims to give software engineers the process skills necessary to work on a team software process (TSP) team.\n",
            "paragraph2": "\"Personal Software Process\" and \"PSP\" are registered service marks of the Carnegie Mellon University.\n"
        },
        {
            "title": "Objectives",
            "paragraph1": "The PSP aims to provide software engineers with disciplined methods for improving personal software development processes. The PSP helps software engineers to:\n",
            "ul1": "Improve their estimating and planning skills.\nMake commitments they can keep.\nManage the quality of their projects.\nReduce the number of defects in their work.\n"
        },
        {
            "title": "PSP structure",
            "paragraph1": "PSP training follows an evolutionary improvement approach: an engineer learning to integrate the PSP into his or her process begins at the first level – PSP0 – and progresses in process maturity to the final level – PSP2.1.  Each Level has detailed scripts, checklists and templates to guide the engineer through required steps and helps the engineer improve their own personal software process. Humphrey encourages proficient engineers to customize these scripts and templates as they gain an understanding of their own strengths and weaknesses.\n",
            "paragraph2": "The input to PSP is the requirements; requirements document is completed and delivered to the engineer.\n",
            "paragraph3": "PSP0 has 3 phases: planning, development (design, code, compile, test) and a post mortem. \nA baseline is established of current process measuring: time spent on programming, faults injected/removed, size of a program.\nIn a post mortem, the engineer ensures all data for the projects has been properly recorded and analysed.  \nPSP0.1 advances the process by adding a coding standard, a size measurement and the development of a personal process improvement plan (PIP). In the PIP, the engineer records ideas for improving his own process.\n",
            "paragraph4": "Based upon the baseline data collected in PSP0 and PSP0.1, the engineer estimates how large a new program will be and prepares a test report (PSP1).\nAccumulated data from previous projects is used to estimate the total time.\nEach new project will record the actual time spent.\nThis information is used for task and schedule planning and estimation (PSP1.1).\n",
            "paragraph5": "PSP2 adds two new phases: design review and code review.  Defect prevention and removal of them are the focus at the PSP2. Engineers learn to evaluate and improve their process by measuring how long tasks take and the number of defects they inject and remove in each phase of development.\nEngineers construct and use checklists for design and code reviews.\nPSP2.1 introduces design specification and analysis techniques\n",
            "paragraph6": "(PSP3 is a legacy level that has been superseded by TSP.)\n"
        },
        {
            "title": "The importance of data",
            "paragraph1": "One of the core aspects of the PSP is using historical data to analyze and improve process performance. PSP data collection is supported by four main elements:\n",
            "ul1": "Scripts\nMeasures\nStandards\nForms\n",
            "paragraph2": "The PSP scripts provide expert-level guidance to following the process steps and they provide a framework for applying the PSP measures. The PSP has four core measures:\n",
            "ul2": "Size – the size measure for a product part, such as lines of code (LOC).\nEffort – the time required to complete a task, usually recorded in minutes.\nQuality – the number of defects in the product.\nSchedule – a measure of project progression, tracked against planned and actual completion dates.\n",
            "paragraph3": "Applying standards to the process can ensure the data is precise and consistent.\nData is logged in forms, normally using a PSP software tool. The SEI has developed a PSP tool and there are also open source options available, such as Process Dashboard.\n",
            "paragraph4": "The key data collected in the PSP tool are time, defect, and size data – the time spent in each phase; when and where defects were injected, found, and fixed; and the size of the product parts.  Software developers use many other measures that are derived from these three basic measures to understand and improve their performance. Derived measures include:\n",
            "ul3": "estimation accuracy (size/time)\nprediction intervals (size/time)\ntime in phase distribution\ndefect injection distribution\ndefect removal distribution\nproductivity\nreuse percentage\ncost performance index\nplanned value\nearned value\npredicted earned value\ndefect density\ndefect density by phase\ndefect removal rate by phase\ndefect removal leverage\nreview rates\nprocess yield\nphase yield\nfailure cost of quality (COQ)\nappraisal COQ\nappraisal/failure COQ ratio\n"
        },
        {
            "title": "Planning and tracking",
            "paragraph1": "Logging time, defect, and size data is an essential part of planning and tracking PSP projects, as historical data is used to improve estimating accuracy.\n",
            "paragraph2": "The PSP uses the PROxy-Based Estimation (PROBE) method to improve a developer's estimating skills for more accurate project planning. For project tracking, the PSP uses the earned value method.\n",
            "paragraph3": "The PSP also uses statistical techniques, such as correlation, linear regression, and standard deviation, to translate data into useful information for improving estimating, planning and quality. These statistical formulas are calculated by the PSP tool.\n"
        },
        {
            "title": "Using the PSP",
            "paragraph1": "The PSP is intended to help a developer improve their personal process; therefore PSP developers are expected to continue adapting the process to ensure it meets their personal needs.\n",
            "subtitle1": "PSP and the TSP",
            "paragraph2": "In practice, PSP skills are used in a TSP team environment. TSP teams consist of PSP-trained developers who volunteer for areas of project responsibility, so the project is managed by the team itself. Using personal data gathered using their PSP skills; the team makes the plans, the estimates, and controls the quality.\n",
            "paragraph3": "Using PSP process methods can help TSP teams to meet their schedule commitments and produce high quality software. For example, according to research by Watts Humphrey, a third of all software projects fail, but an SEI study on 20 TSP projects in 13 different organizations found that TSP teams missed their target schedules by an average of only six percent.\n",
            "paragraph4": "Successfully meeting schedule commitments can be attributed to using historical data to make more accurate estimates, so projects are based on realistic plans – and by using PSP quality methods, they produce low-defect software, which reduces time spent on removing defects in later phases, such as integration and acceptance testing.\n",
            "subtitle2": "PSP and other methodologies",
            "paragraph5": "The PSP is a personal process that can be adapted to suit the needs of the individual developer. It is not specific to any programming or design methodology; therefore it can be used with different methodologies, including Agile software development.\n",
            "paragraph6": "Software engineering methods can be considered to vary from predictive through adaptive. The PSP is a predictive methodology, and Agile is considered adaptive, but despite their differences, the TSP/PSP and Agile share several concepts and approaches – particularly in regard to team organization. They both enable the team to:\n",
            "ul1": "Define their goals and standards.\nEstimate and schedule the work.\nDetermine realistic and attainable schedules.\nMake plans and process improvements.\n",
            "paragraph7": "Both Agile and the TSP/PSP share the idea of team members taking responsibility for their own work and working together to agree on a realistic plan, creating an environment of trust and accountability. However, the TSP/PSP differs from Agile in its emphasis on documenting the process and its use of data for predicting and defining project schedules.\n",
            "subtitle3": "Quality",
            "paragraph8": "High-quality software is the goal of the PSP, and quality is measured in terms of defects. For the PSP, a quality process should produce low-defect software that meets the user needs.\n",
            "paragraph9": "The PSP phase structure enables PSP developers to catch defects early. By catching defects early, the PSP can reduce the amount of time spent in later phases, such as Test.\n",
            "paragraph10": "The PSP theory is that it is more economical and effective to remove defects as close as possible to where and when they were injected, so software engineers are encouraged to conduct personal reviews for each phase of development. Therefore, the PSP phase structure includes two review phases:\n",
            "ul2": "Design Review\nCode Review\n",
            "paragraph11": "To do an effective review, you need to follow a structured review process. The PSP recommends using checklists to help developers to consistently follow an orderly procedure.\n",
            "paragraph12": "The PSP follows the premise that when people make mistakes, their errors are usually predictable, so PSP developers can personalize their checklists to target their own common errors. Software engineers are also expected to complete process improvement proposals, to identify areas of weakness in their current performance that they should target for improvement. Historical project data, which exposes where time is spent and defects introduced, help developers to identify areas to improve.\n",
            "paragraph13": "PSP developers are also expected to conduct personal reviews before their work undergoes a peer or team review.\n"
        },
        {
            "title": "Certification",
            "paragraph1": "A certification covering PSP is offered by the SEI at Carnegie Mellon University.  The steps to becoming an SEI-Certified PSP Developer are: learn the PSP; take the certification exam; maintain credentials.   \nThe PSP Developer examination is based on concepts found in the PSP Body of Knowledge. The SEI maintains an FAQ on certification.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_construction",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Debugging",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Cleanroom_software_engineering",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Software_development_methodology",
        "https://en.wikipedia.org/wiki/Adaptive_software_development",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Disciplined_agile_delivery",
        "https://en.wikipedia.org/wiki/Dynamic_systems_development_method",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Lean_software_development",
        "https://en.wikipedia.org/wiki/Microsoft_Solutions_Framework",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Rational_Unified_Process",
        "https://en.wikipedia.org/wiki/Scaled_agile_framework",
        "https://en.wikipedia.org/wiki/SEMAT",
        "https://en.wikipedia.org/wiki/Team_software_process",
        "https://en.wikipedia.org/wiki/OpenUP",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_documentation",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_project_management",
        "https://en.wikipedia.org/wiki/User_experience",
        "https://en.wikipedia.org/wiki/Continuous_integration",
        "https://en.wikipedia.org/wiki/Continuous_delivery",
        "https://en.wikipedia.org/wiki/Pair_programming",
        "https://en.wikipedia.org/wiki/Specification_by_example",
        "https://en.wikipedia.org/wiki/Programming_tool",
        "https://en.wikipedia.org/wiki/Compiler",
        "https://en.wikipedia.org/wiki/Debugger",
        "https://en.wikipedia.org/wiki/Graphical_user_interface_builder",
        "https://en.wikipedia.org/wiki/UML_tool",
        "https://en.wikipedia.org/wiki/Integrated_development_environment",
        "https://en.wikipedia.org/wiki/Build_automation",
        "https://en.wikipedia.org/wiki/Infrastructure_as_code",
        "https://en.wikipedia.org/wiki/A_Guide_to_the_Business_Analysis_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/IEEE_Standards_Association",
        "https://en.wikipedia.org/wiki/ISO_9001",
        "https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/ITIL",
        "https://en.wikipedia.org/wiki/International_Requirements_Engineering_Board",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Glossary_of_computer_science",
        "https://en.wikipedia.org/wiki/Glossary_of_electrical_and_electronics_engineering",
        "https://en.wikipedia.org/wiki/Outline_of_software_development",
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_engineer",
        "https://en.wikipedia.org/wiki/Watts_Humphrey",
        "https://en.wikipedia.org/wiki/Software_Engineering_Institute",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model",
        "https://en.wikipedia.org/wiki/Team_software_process",
        "https://en.wikipedia.org/wiki/Service_mark",
        "https://en.wikipedia.org/wiki/CMU_Common_Lisp",
        "https://en.wikipedia.org/wiki/Earned_value",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/FAQ",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/Carnegie_Mellon_University",
        "https://en.wikipedia.org/wiki/Software_Engineering_Institute",
        "https://en.wikipedia.org/wiki/Team_software_process",
        "https://en.wikipedia.org/wiki/Watts_Humphrey",
        "https://en.wikipedia.org/wiki/Software_Engineering_Institute",
        "https://en.wikipedia.org/wiki/Carnegie_Mellon_University",
        "https://en.wikipedia.org/wiki/Software_Engineering_Institute",
        "https://en.wikipedia.org/wiki/Carnegie_Mellon_University",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Software_Engineering_Institute",
        "https://en.wikipedia.org/wiki/Carnegie_Mellon_University",
        "https://en.wikipedia.org/wiki/Watts_Humphrey",
        "https://en.wikipedia.org/wiki/IEEE_Software",
        "https://en.wikipedia.org/wiki/Software_Engineering_Institute",
        "https://en.wikipedia.org/wiki/Carnegie_Mellon",
        "https://en.wikipedia.org/wiki/GPL3",
        "https://en.wikipedia.org/wiki/Personal_software_process",
        "https://en.wikipedia.org/wiki/Personal_software_process",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}