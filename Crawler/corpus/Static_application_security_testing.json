{
    "url": "https://en.wikipedia.org/wiki/Static_application_security_testing",
    "title": "Static application security testing",
    "table_of_contents": [
        "1 Overview",
        "2 SAST strengths",
        "3 SAST weaknesses",
        "4 References"
    ],
    "content": [
        {
            "paragraph1": "Static application security testing (SAST) is used to secure software by reviewing the source code of the software to identify sources of vulnerabilities. Although the process of statically analyzing the source code has existed as long as computers have existed, the technique spread to security in the late 90s and the first public discussion of SQL injection in 1998 when Web applications integrated new technologies like JavaScript and Flash.\n",
            "paragraph2": "Unlike dynamic application security testing (DAST) tools for black-box testing of application functionality, SAST tools focus on the code content of the application, white-box testing.\nAn SAST tool scans the source code of applications and its components to identify potential security vulnerabilities in their software and architecture.\nStatic analysis tools can detect an estimated 50% of existing security vulnerabilities.\n",
            "paragraph3": "In SDLC, SAST is performed early in the development process and at code level, and also when all pieces of code and components are put together in a consistent testing environment. SAST is also used for software quality assurance. even if the many resulting false-positive impede its adoption by developers\n",
            "paragraph4": "SAST tools are integrated into the development process to help development teams as they are primarily focusing on developing and delivering software respecting requested specifications. \nSAST tools, like other security tools, focus on reducing the risk of downtime of applications or that private information stored in applications will not be compromised.\n",
            "paragraph5": "For the year of 2018, the Privacy Rights Clearinghouse database shows that more than 612 million records have been compromised by hacking.\n"
        },
        {
            "title": "Overview",
            "paragraph1": "Application security tests of applications their release: static application security testing (SAST), dynamic application security testing (DAST), and interactive application security testing (IAST), a combination of the two.\n",
            "paragraph2": "Static analysis tools examine the text of a program syntactically. They look for a fixed set of patterns or rules in the source code. Theoretically, they can also examine a compiled form of the software. This technique relies on instrumentation of the code to do the mapping between compiled components and source code components to identify issues.\nStatic analysis can be done manually as a code review or auditing of the code for different purposes, including security, but it is time-consuming.\n",
            "paragraph3": "The precision of SAST tool is determined by its scope of analysis and the specific techniques used to identify vulnerabilities. Different levels of analysis include:\n",
            "ul1": "function level - sequences of instruction.\nfile or class-level - an extensible program-code-template for object creation.\napplication level - a program or group of programs that interact.\n",
            "paragraph4": "The scope of the analysis determines its accuracy and capacity to detect vulnerabilities using contextual information.\n",
            "paragraph5": "At a function level, a common technique is the construction of an Abstract syntax tree to control the flow of data within the function.\n",
            "paragraph6": "Since late 90s, the need to adapt to business challenges has transformed software development with componentization. enforced by processes and organization of development teams\nFollowing the flow of data between all the components of an application or group of applications allows validation of required calls to dedicated procedures for sanitization and that proper actions are taken to taint data in specific pieces of code.\n",
            "paragraph7": "The rise of web applications entailed testing them: Verizon Data Breach reports in 2016 that 40% of all data breaches use web application vulnerabilities. \nAs well as external security validations, there is a rise in focus on internal threats. The Clearswift Insider Threat Index (CITI) has reported that 92% of their respondents in a 2015 survey said they had experienced IT or security incidents in the previous 12 months and that 74% of these breaches were originated by insiders. Lee Hadlington categorized internal threats in 3 categories: malicious, accidental, and unintentional. Mobile applications' explosive growth implies securing applications earlier in the development process to reduce malicious code development.\n"
        },
        {
            "title": "SAST strengths",
            "paragraph1": "The earlier a vulnerability is fixed in the SDLC, the cheaper it is to fix. Costs to fix in development are 10 times lower than in testing, and 100 times lower than in production.\nSAST tools run automatically, either at the code level or application-level and do not require interaction. When integrated into a CI/CD context, SAST tools can be used to automatically stop the integration process if critical vulnerabilities are identified.\n",
            "paragraph2": "Because the tool scans the entire source-code, it can cover 100% of it, while dynamic application security testing covers its execution possibly missing part of the application, or unsecured configuration in configuration files.\n",
            "paragraph3": "SAST tools can offer extended functionalities such as quality and architectural testing. There is a direct correlation between the quality and the security. Bad quality software is also poorly secured software.\n\n"
        },
        {
            "title": "SAST weaknesses",
            "paragraph1": "Even though developers are positive about the usage of SAST tools, there are different challenges to the adoption of SAST tools by developers.\n",
            "paragraph2": "With Agile Processes in software development, early integration of SAST generates many bugs, as developers using this framework focus first on features and delivery.\n",
            "paragraph3": "Scanning many lines of code with SAST tools may result in hundreds or thousands of vulnerability warnings for a single application. It generates many false-positives, increasing investigation time and reducing trust in such tools. This is particularly the case when the context of the vulnerability cannot be caught by the tool\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Static_program_analysis",
        "https://en.wikipedia.org/wiki/SQL_injection",
        "https://en.wikipedia.org/wiki/JavaScript",
        "https://en.wikipedia.org/wiki/Adobe_Flash_Player",
        "https://en.wikipedia.org/wiki/Dynamic_application_security_testing",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Dynamic_application_security_testing",
        "https://en.wikipedia.org/wiki/Instrumentation",
        "https://en.wikipedia.org/wiki/Code_review",
        "https://en.wikipedia.org/wiki/Software_audit_review",
        "https://en.wikipedia.org/wiki/Subroutine",
        "https://en.wikipedia.org/wiki/Application_software",
        "https://en.wikipedia.org/wiki/Abstract_syntax_tree",
        "https://en.wikipedia.org/wiki/Dynamic_application_security_testing",
        "https://en.wikipedia.org/wiki/Static_application_security_testing",
        "https://en.wikipedia.org/wiki/Static_application_security_testing",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}