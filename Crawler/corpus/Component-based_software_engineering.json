{
    "url": "https://en.wikipedia.org/wiki/Software_component",
    "title": "Component-based software engineering",
    "table_of_contents": [
        "1 Definition and characteristics of components",
        "2 History",
        "3 Architecture",
        "4 Component models",
        "5 Technologies",
        "6 See also",
        "7 References",
        "8 Further reading",
        "9 External links"
    ],
    "content": [
        {
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Component-based_Software_Engineering_%28CBSE%29_-_example_1.svg/500px-Component-based_Software_Engineering_%28CBSE%29_-_example_1.svg.png",
                "caption": "\n\t\tAn example of two components expressed in UML 2.0. The checkout component, responsible for facilitating the customer's order, requires the card processing component to charge the customer's credit/debit card (functionality that the latter provides).\n\t"
            },
            "paragraph1": "Component-based software engineering (CBSE), also called component-based development (CBD), is a branch of software engineering that emphasizes the separation of concerns with respect to the wide-ranging functionality available throughout a given software system. It is a reuse-based approach to defining, implementing and composing loosely coupled independent components into systems. This practice aims to bring about an equally wide-ranging degree of benefits in both the short-term and the long-term for the software itself and for organizations that sponsor such software.\n",
            "paragraph2": "Software engineering practitioners regard components as part of the starting platform for service-orientation. Components play this role, for example, in web services, and more recently, in service-oriented architectures (SOA), whereby a component is converted by the web service into a service and subsequently inherits further characteristics beyond that of an ordinary component.\n",
            "paragraph3": "Components can produce or consume events and can be used for event-driven architectures (EDA).\n"
        },
        {
            "title": "Definition and characteristics of components",
            "paragraph1": "An individual software component is a software package, a web service, a web resource, or a module that encapsulates a set of related functions (or data).\n",
            "paragraph2": "All system processes are placed into separate components so that all of the data and functions inside each component are semantically related (just as with the contents of classes). Because of this principle, it is often said that components are modular and cohesive.\n",
            "paragraph3": "With regard to system-wide co-ordination, components communicate with each other via interfaces. When a component offers services to the rest of the system, it adopts a provided interface that specifies the services that other components can utilize, and how they can do so. This interface can be seen as a signature of the component - the client does not need to know about the inner workings of the component (implementation) in order to make use of it. This principle results in components referred to as encapsulated. The UML illustrations within this article represent provided interfaces by a lollipop-symbol attached to the outer edge of the component.\n",
            "paragraph4": "However, when a component needs to use another component in order to function, it adopts a used interface that specifies the services that it needs. In the UML illustrations in this article, used interfaces are represented by an open socket symbol attached to the outer edge of the component.\n",
            "image1": {
                "url": "https://upload.wikimedia.org/wikipedia/commons/8/83/Component-based-Software-Engineering-example2.png",
                "caption": "\n\t\tA simple example of several software components - pictured within a hypothetical holiday-reservation system represented in UML 2.0.\n\t"
            },
            "paragraph5": "Another important attribute of components is that they are substitutable, so that a component can replace another (at design time or run-time), if the successor component meets the requirements of the initial component (expressed via the interfaces). Consequently, components can be replaced with either an updated version or an alternative without breaking the system in which the component operates.\n",
            "paragraph6": "As a rule of thumb for engineers substituting components, component B can immediately replace component A, if component B provides at least what component A provided and uses no more than what component A used.\n",
            "paragraph7": "Software components often take the form of objects (not classes) or collections of objects (from object-oriented programming), in some binary or textual form, adhering to some interface description language (IDL) so that the component may exist autonomously from other components in a computer. In other words, a component acts without changing its source code. Although the behavior of the component's source code may change based on the application's extensibility, provided by its writer.\n",
            "paragraph8": "When a component is to be accessed or shared across execution contexts or network links, techniques such as serialization or marshalling are often employed to deliver the component to its destination.\n",
            "paragraph9": "Reusability is an important characteristic of a high-quality software component. Programmers should design and implement software components in such a way that many different programs can reuse them. Furthermore, component-based usability testing should be considered when software components directly interact with users.\n",
            "paragraph10": "It takes significant effort and awareness to write a software component that is effectively reusable. The component needs to be:\n",
            "ul1": "fully documented\nthoroughly tested\nrobust - with comprehensive input-validity checking\nable to pass back appropriate error messages or return codes\nrobust - with comprehensive input-validity checking\nable to pass back appropriate error messages or return codes\ndesigned with an awareness that it will be put to unforeseen uses\n",
            "paragraph11": "In the 1960s, programmers built scientific subroutine libraries that were reusable in a broad array of engineering and scientific applications. Though these subroutine libraries reused well-defined algorithms in an effective manner, they had a limited domain of application. Commercial sites routinely created application programs from reusable modules written in assembly language, COBOL, PL/1 and other second- and third-generation languages using both system and user application libraries.\n",
            "paragraph12": "As of 2010, modern reusable components encapsulate both data structures and the algorithms that are applied to the data structures. Component-based software engineering builds on prior theories of software objects, software architectures, software frameworks and software design patterns, and the extensive theory of object-oriented programming and the object-oriented design of all these. It claims that software components, like the idea of hardware components, used for example in telecommunications, can ultimately be made interchangeable and reliable. On the other hand, it is argued that it is a mistake to focus on independent components rather than the framework (without which they would not exist).\n"
        },
        {
            "title": "History",
            "paragraph1": "The idea that software should be componentized - built from prefabricated components - first became prominent with Douglas McIlroy's address at the NATO conference on software engineering in Garmisch, Germany, 1968, titled Mass Produced Software Components. The conference set out to counter the so-called software crisis. McIlroy's subsequent inclusion of pipes and filters into the Unix operating system was the first implementation of an infrastructure for this idea.\n",
            "paragraph2": "Brad Cox of Stepstone largely defined the modern concept of a software component. He called them Software ICs and set out to create an infrastructure and market for these components by inventing the Objective-C programming language. (He summarizes this view in his book Object-Oriented Programming - An Evolutionary Approach 1986.)\n",
            "paragraph3": "The software components are used in two different contexts and two kinds: i) using components as parts to build a single executable, or ii) each executable is treated as a component in a distributed environment, where components collaborate with each other using internet or intranet communication protocols for IPC (Inter Process Communications). The above belongs to former kind, while the below belongs to later kind.\n",
            "paragraph4": "IBM led the path with their System Object Model (SOM) in the early 1990s. As a reaction, Microsoft paved the way for actual deployment of component software with Object linking and embedding (OLE) and Component Object Model (COM). As of 2010 many successful software component models exist.\n"
        },
        {
            "title": "Architecture",
            "paragraph1": "A computer running several software components is often called an application server. This combination of application servers and software components is usually called distributed computing. Typical real-world application of this is in, e.g., financial applications or business software.\n"
        },
        {
            "title": "Component models",
            "paragraph1": "A component model is a definition of properties that components must satisfy, methods and mechanisms for the composition of components.\n",
            "paragraph2": "During the last decades, researchers and practitioners have proposed several component models with different characteristics. A classification of the existing component models is given in. Examples of component models are: Enterprise JavaBeans (EJB) model, Component Object Model (COM) model, .NET model, X-MAN component model, and Common Object Request Broker Architecture  (CORBA) component model.\n"
        },
        {
            "title": "Technologies",
            "ul1": "Business object technologies\nNewi\nNewi\nComponent-based software frameworks for specific domains\nAdvanced Component Framework\nEarth System Modeling Framework (ESMF)\nMASH IoT Platform for Asset Management[9]\nKOALA component model developed for software in consumer electronics[10][11]\nReact (JavaScript library)\nSoftware Communications Architecture (JTRS SCA)\nAdvanced Component Framework\nEarth System Modeling Framework (ESMF)\nMASH IoT Platform for Asset Management[9]\nKOALA component model developed for software in consumer electronics[10][11]\nReact (JavaScript library)\nSoftware Communications Architecture (JTRS SCA)\nComponent-oriented programming\nBundles as defined by the OSGi Service Platform\nComponent Object Model (OCX/ActiveX/COM) and DCOM from Microsoft\nTASCS - SciDAC Center for Technology for Advanced Scientific Component Software\nEiffel programming language\nEnterprise JavaBeans from Sun Microsystems (now Oracle)\nFlow-based programming\nFractal component model from ObjectWeb\nMidCOM component framework for Midgard and PHP\nOberon, Component Pascal, and BlackBox Component Builder\nrCOS method of component-based model driven design from UNU-IIST\nSOFA component system from ObjectWeb\nThe System.ComponentModel namespace in Microsoft .NET\nUnity developed by Unity Technologies\nUnreal Engine developed by Epic Games\nUNO from the OpenOffice.org office suite\nVCL and CLX from Borland and similar free LCL library.\nXPCOM from Mozilla Foundation\nBundles as defined by the OSGi Service Platform\nComponent Object Model (OCX/ActiveX/COM) and DCOM from Microsoft\nTASCS - SciDAC Center for Technology for Advanced Scientific Component Software\nEiffel programming language\nEnterprise JavaBeans from Sun Microsystems (now Oracle)\nFlow-based programming\nFractal component model from ObjectWeb\nMidCOM component framework for Midgard and PHP\nOberon, Component Pascal, and BlackBox Component Builder\nrCOS method of component-based model driven design from UNU-IIST\nSOFA component system from ObjectWeb\nThe System.ComponentModel namespace in Microsoft .NET\nUnity developed by Unity Technologies\nUnreal Engine developed by Epic Games\nUNO from the OpenOffice.org office suite\nVCL and CLX from Borland and similar free LCL library.\nXPCOM from Mozilla Foundation\nCompound document technologies\nActive Documents in Oberon System and BlackBox Component Builder\nKParts, the KDE compound document technology\nObject linking and embedding (OLE)\nOpenDoc\nActive Documents in Oberon System and BlackBox Component Builder\nKParts, the KDE compound document technology\nObject linking and embedding (OLE)\nOpenDoc\nDistributed computing software components\n.NET Remoting from Microsoft\n9P distributed protocol developed for Plan 9, and used by Inferno and other systems.\nCORBA and the CORBA Component Model from the Object Management Group\nD-Bus from the freedesktop.org organization\nDCOM and later versions of COM (and COM+) from Microsoft\nDSOM and SOM from IBM (now scrapped)\nIce from ZeroC\nJava EE from Sun\nKompics[12] from SICS\nUniversal Network Objects (UNO) from OpenOffice.org\nWeb services\nREST\nZope from Zope Corporation\nAXCIOMA (the component framework for distributed, real-time, and embedded systems) by Remedy IT\nCOHORTE the cross-platform runtime for executing and managing robust and reliable distributed Service-oriented Component-based applications, by isandlaTech\nDX-MAN Service Model[13]\n.NET Remoting from Microsoft\n9P distributed protocol developed for Plan 9, and used by Inferno and other systems.\nCORBA and the CORBA Component Model from the Object Management Group\nD-Bus from the freedesktop.org organization\nDCOM and later versions of COM (and COM+) from Microsoft\nDSOM and SOM from IBM (now scrapped)\nIce from ZeroC\nJava EE from Sun\nKompics[12] from SICS\nUniversal Network Objects (UNO) from OpenOffice.org\nWeb services\nREST\nREST\nZope from Zope Corporation\nAXCIOMA (the component framework for distributed, real-time, and embedded systems) by Remedy IT\nCOHORTE the cross-platform runtime for executing and managing robust and reliable distributed Service-oriented Component-based applications, by isandlaTech\nDX-MAN Service Model[13]\nGeneric programming emphasizes separation of algorithms from data representation\nInterface description languages (IDLs)\nOpen Service Interface Definitions (OSIDs)\nPart of both COM and CORBA\nPlatform-Independent Component Modeling Language\nSIDL - Scientific Interface Definition Language\nPart of the Babel Scientific Programming Language Interoperability System (SIDL and Babel are core technologies of the CCA and the SciDAC TASCS Center - see above.)\nSOAP IDL from World Wide Web Consortium (W3C)\nWDDX\nXML-RPC, the predecessor of SOAP\nOpen Service Interface Definitions (OSIDs)\nPart of both COM and CORBA\nPlatform-Independent Component Modeling Language\nSIDL - Scientific Interface Definition Language\nPart of the Babel Scientific Programming Language Interoperability System (SIDL and Babel are core technologies of the CCA and the SciDAC TASCS Center - see above.)\nPart of the Babel Scientific Programming Language Interoperability System (SIDL and Babel are core technologies of the CCA and the SciDAC TASCS Center - see above.)\nSOAP IDL from World Wide Web Consortium (W3C)\nWDDX\nXML-RPC, the predecessor of SOAP\nInversion of control (IoC) and Plain Old C++/Java Object (POCO/POJO) component frameworks\nPipes and filters\nUnix operating system\nUnix operating system\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Action_language",
        "https://en.wikipedia.org/wiki/Array_programming",
        "https://en.wikipedia.org/wiki/Concurrent_computing",
        "https://en.wikipedia.org/wiki/Choreographic_programming",
        "https://en.wikipedia.org/wiki/Relativistic_programming",
        "https://en.wikipedia.org/wiki/Declarative_programming",
        "https://en.wikipedia.org/wiki/Imperative_programming",
        "https://en.wikipedia.org/wiki/Functional_programming",
        "https://en.wikipedia.org/wiki/Functional_logic_programming",
        "https://en.wikipedia.org/wiki/Purely_functional_programming",
        "https://en.wikipedia.org/wiki/Logic_programming",
        "https://en.wikipedia.org/wiki/Abductive_logic_programming",
        "https://en.wikipedia.org/wiki/Answer_set_programming",
        "https://en.wikipedia.org/wiki/Concurrent_logic_programming",
        "https://en.wikipedia.org/wiki/Functional_logic_programming",
        "https://en.wikipedia.org/wiki/Inductive_logic_programming",
        "https://en.wikipedia.org/wiki/Constraint_programming",
        "https://en.wikipedia.org/wiki/Constraint_logic_programming",
        "https://en.wikipedia.org/wiki/Concurrent_constraint_logic_programming",
        "https://en.wikipedia.org/wiki/Dataflow_programming",
        "https://en.wikipedia.org/wiki/Reactive_programming",
        "https://en.wikipedia.org/wiki/Functional_reactive_programming",
        "https://en.wikipedia.org/wiki/Ontology_language",
        "https://en.wikipedia.org/wiki/Query_language",
        "https://en.wikipedia.org/wiki/Differentiable_programming",
        "https://en.wikipedia.org/wiki/Dynamic_programming_language",
        "https://en.wikipedia.org/wiki/Tacit_programming",
        "https://en.wikipedia.org/wiki/Concatenative_programming_language",
        "https://en.wikipedia.org/wiki/Generic_programming",
        "https://en.wikipedia.org/wiki/Imperative_programming",
        "https://en.wikipedia.org/wiki/Declarative_programming",
        "https://en.wikipedia.org/wiki/Procedural_programming",
        "https://en.wikipedia.org/wiki/Polymorphic_code",
        "https://en.wikipedia.org/wiki/Intentional_programming",
        "https://en.wikipedia.org/wiki/Literate_programming",
        "https://en.wikipedia.org/wiki/Metaprogramming",
        "https://en.wikipedia.org/wiki/Automatic_programming",
        "https://en.wikipedia.org/wiki/Inductive_programming",
        "https://en.wikipedia.org/wiki/Reflective_programming",
        "https://en.wikipedia.org/wiki/Template_metaprogramming",
        "https://en.wikipedia.org/wiki/Structured_programming",
        "https://en.wikipedia.org/wiki/Array_programming",
        "https://en.wikipedia.org/wiki/Nondeterministic_programming",
        "https://en.wikipedia.org/wiki/Parallel_computing",
        "https://en.wikipedia.org/wiki/Probabilistic_programming",
        "https://en.wikipedia.org/wiki/Quantum_programming",
        "https://en.wikipedia.org/wiki/Set_theoretic_programming",
        "https://en.wikipedia.org/wiki/Structured_programming",
        "https://en.wikipedia.org/wiki/Structured_concurrency",
        "https://en.wikipedia.org/wiki/Actor_model",
        "https://en.wikipedia.org/wiki/Separation_of_concerns",
        "https://en.wikipedia.org/wiki/Symbolic_programming",
        "https://en.wikipedia.org/wiki/Separation_of_concerns",
        "https://en.wikipedia.org/wiki/Software_system",
        "https://en.wikipedia.org/wiki/Web_service",
        "https://en.wikipedia.org/wiki/Web_service",
        "https://en.wikipedia.org/wiki/Web_resource",
        "https://en.wikipedia.org/wiki/Modular_programming",
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Liskov_substitution_principle",
        "https://en.wikipedia.org/wiki/Interface_description_language",
        "https://en.wikipedia.org/wiki/Computer",
        "https://en.wikipedia.org/wiki/Serialization",
        "https://en.wikipedia.org/wiki/Reusability",
        "https://en.wikipedia.org/wiki/Error_message",
        "https://en.wikipedia.org/wiki/Subroutine",
        "https://en.wikipedia.org/wiki/Algorithms",
        "https://en.wikipedia.org/wiki/Assembly_language",
        "https://en.wikipedia.org/wiki/COBOL",
        "https://en.wikipedia.org/wiki/Second_generation_language",
        "https://en.wikipedia.org/wiki/Third_generation_language",
        "https://en.wikipedia.org/wiki/Operating_system",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Software_framework",
        "https://en.wikipedia.org/wiki/Software_design_pattern",
        "https://en.wikipedia.org/wiki/Electronic_component",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Douglas_McIlroy",
        "https://en.wikipedia.org/wiki/NATO",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Germany",
        "https://en.wikipedia.org/wiki/Software_crisis",
        "https://en.wikipedia.org/wiki/Unix",
        "https://en.wikipedia.org/wiki/Operating_system",
        "https://en.wikipedia.org/wiki/Brad_Cox",
        "https://en.wikipedia.org/wiki/Stepstone",
        "https://en.wikipedia.org/wiki/IBM",
        "https://en.wikipedia.org/wiki/IBM_System_Object_Model",
        "https://en.wikipedia.org/wiki/Microsoft",
        "https://en.wikipedia.org/wiki/Object_linking_and_embedding",
        "https://en.wikipedia.org/wiki/Component_Object_Model",
        "https://en.wikipedia.org/wiki/Application_server",
        "https://en.wikipedia.org/wiki/Distributed_computing",
        "https://en.wikipedia.org/wiki/Component_model",
        "https://en.wikipedia.org/wiki/Enterprise_JavaBeans",
        "https://en.wikipedia.org/wiki/Component_Object_Model",
        "https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture",
        "https://en.wikipedia.org/wiki/Newi",
        "https://en.wikipedia.org/wiki/Software_framework",
        "https://en.wikipedia.org/wiki/ESMF",
        "https://en.wikipedia.org/wiki/Software_Communications_Architecture",
        "https://en.wikipedia.org/wiki/Osgi",
        "https://en.wikipedia.org/wiki/Component_Object_Model",
        "https://en.wikipedia.org/wiki/Distributed_Component_Object_Model",
        "https://en.wikipedia.org/wiki/Microsoft",
        "https://en.wikipedia.org/wiki/SciDAC",
        "https://en.wikipedia.org/wiki/Enterprise_JavaBeans",
        "https://en.wikipedia.org/wiki/Sun_Microsystems",
        "https://en.wikipedia.org/wiki/Oracle_Corporation",
        "https://en.wikipedia.org/wiki/Fractal_component_model",
        "https://en.wikipedia.org/wiki/ObjectWeb",
        "https://en.wikipedia.org/wiki/PHP",
        "https://en.wikipedia.org/wiki/Component_Pascal",
        "https://en.wikipedia.org/wiki/BlackBox_Component_Builder",
        "https://en.wikipedia.org/wiki/SOFA_component_system",
        "https://en.wikipedia.org/wiki/ObjectWeb",
        "https://en.wikipedia.org/wiki/Unity_Technologies",
        "https://en.wikipedia.org/wiki/Unreal_Engine",
        "https://en.wikipedia.org/wiki/Epic_Games",
        "https://en.wikipedia.org/wiki/Universal_Network_Objects",
        "https://en.wikipedia.org/wiki/Visual_Component_Library",
        "https://en.wikipedia.org/wiki/Component_Library_for_Cross_Platform",
        "https://en.wikipedia.org/wiki/Borland",
        "https://en.wikipedia.org/wiki/XPCOM",
        "https://en.wikipedia.org/wiki/Mozilla_Foundation",
        "https://en.wikipedia.org/wiki/Compound_document",
        "https://en.wikipedia.org/wiki/BlackBox_Component_Builder",
        "https://en.wikipedia.org/wiki/KParts",
        "https://en.wikipedia.org/wiki/KDE",
        "https://en.wikipedia.org/wiki/Object_linking_and_embedding",
        "https://en.wikipedia.org/wiki/OpenDoc",
        "https://en.wikipedia.org/wiki/Distributed_computing",
        "https://en.wikipedia.org/wiki/Microsoft",
        "https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs",
        "https://en.wikipedia.org/wiki/CORBA",
        "https://en.wikipedia.org/wiki/CORBA_Component_Model",
        "https://en.wikipedia.org/wiki/Object_Management_Group",
        "https://en.wikipedia.org/wiki/Distributed_Component_Object_Model",
        "https://en.wikipedia.org/wiki/Component_object_model",
        "https://en.wikipedia.org/wiki/Microsoft",
        "https://en.wikipedia.org/wiki/System_Object_Model",
        "https://en.wikipedia.org/wiki/IBM",
        "https://en.wikipedia.org/wiki/Internet_Communications_Engine",
        "https://en.wikipedia.org/wiki/ZeroC",
        "https://en.wikipedia.org/wiki/Java_EE",
        "https://en.wikipedia.org/wiki/Sun_Microsystems",
        "https://en.wikipedia.org/wiki/Swedish_Institute_of_Computer_Science",
        "https://en.wikipedia.org/wiki/Universal_Network_Objects",
        "https://en.wikipedia.org/wiki/Web_service",
        "https://en.wikipedia.org/wiki/Representational_State_Transfer",
        "https://en.wikipedia.org/wiki/Zope",
        "https://en.wikipedia.org/wiki/Generic_programming",
        "https://en.wikipedia.org/wiki/Open_Service_Interface_Definitions",
        "https://en.wikipedia.org/wiki/Component_object_model",
        "https://en.wikipedia.org/wiki/CORBA",
        "https://en.wikipedia.org/wiki/Babel_Middleware",
        "https://en.wikipedia.org/wiki/Common_Component_Architecture",
        "https://en.wikipedia.org/wiki/SciDAC",
        "https://en.wikipedia.org/wiki/SOAP",
        "https://en.wikipedia.org/wiki/Interface_description_language",
        "https://en.wikipedia.org/wiki/World_Wide_Web_Consortium",
        "https://en.wikipedia.org/wiki/WDDX",
        "https://en.wikipedia.org/wiki/SOAP",
        "https://en.wikipedia.org/wiki/Inversion_of_control",
        "https://en.wikipedia.org/wiki/Business_logic",
        "https://en.wikipedia.org/wiki/Modular_programming",
        "https://en.wikipedia.org/wiki/Service_Component_Architecture",
        "https://en.wikipedia.org/wiki/Software_Communications_Architecture",
        "https://en.wikipedia.org/wiki/Web_service",
        "https://en.wikipedia.org/wiki/Web_components",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Richard_Veryard",
        "https://en.wikipedia.org/wiki/SourceForge",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Actor_model",
        "https://en.wikipedia.org/wiki/Array_programming",
        "https://en.wikipedia.org/wiki/Concatenative_programming_language",
        "https://en.wikipedia.org/wiki/Concurrent_computing",
        "https://en.wikipedia.org/wiki/Dataflow_programming",
        "https://en.wikipedia.org/wiki/Declarative_programming",
        "https://en.wikipedia.org/wiki/Differentiable_programming",
        "https://en.wikipedia.org/wiki/Dynamic_programming_language",
        "https://en.wikipedia.org/wiki/Esoteric_programming_language",
        "https://en.wikipedia.org/wiki/Extensible_programming",
        "https://en.wikipedia.org/wiki/Functional_programming",
        "https://en.wikipedia.org/wiki/Imperative_programming",
        "https://en.wikipedia.org/wiki/Logic_programming",
        "https://en.wikipedia.org/wiki/Metaprogramming",
        "https://en.wikipedia.org/wiki/Procedural_programming",
        "https://en.wikipedia.org/wiki/Reflective_programming",
        "https://en.wikipedia.org/wiki/Scripting_language",
        "https://en.wikipedia.org/wiki/Synchronous_programming_language",
        "https://en.wikipedia.org/wiki/Tactile_programming_language",
        "https://en.wikipedia.org/wiki/Template_processor",
        "https://en.wikipedia.org/wiki/Assembly_language",
        "https://en.wikipedia.org/wiki/Compiled_language",
        "https://en.wikipedia.org/wiki/Interpreted_language",
        "https://en.wikipedia.org/wiki/Machine_code",
        "https://en.wikipedia.org/wiki/Visual_programming_language",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}