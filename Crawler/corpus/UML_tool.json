{
    "url": "https://en.wikipedia.org/wiki/UML_tool",
    "title": "UML tool",
    "table_of_contents": [
        "1 Kinds of Functionality",
        "1.1 Diagramming",
        "1.2 Round-trip engineering",
        "1.2.1 Code generation",
        "1.2.2 Reverse engineering",
        "1.3 Model and diagram interchange",
        "1.4 Model transformation",
        "2 See also",
        "3 References",
        "4 External links"
    ],
    "content": [
        {
            "paragraph1": "A UML tool is a software application that supports some or all of the notation and semantics associated with the Unified Modeling Language (UML), which is the industry standard general-purpose modeling language for software engineering.\n",
            "paragraph2": "UML tool is used broadly here to include application programs which are not exclusively focused on UML, but which support some functions of the Unified Modeling Language, either as an add-on, as a component or as a part of their overall functionality.\n"
        },
        {
            "title": "Kinds of Functionality",
            "paragraph1": "UML tools support the following kinds of functionality:\n",
            "subtitle1": "Diagramming",
            "paragraph2": "Diagramming in this context means creating and editing UML diagrams; that is diagrams that follow the graphical notation of the Unified Modeling Language.\n",
            "paragraph3": "The use of UML diagrams as a means to draw diagrams of – mostly – object-oriented software is generally agreed upon by software developers. When developers draw diagrams of object-oriented software, they usually follow the UML notation. On the other hand, it is often debated whether those diagrams are needed at all, during  what stages of the software development process they should be used, and how (if at all) they should be kept up to date. The primacy of software code often leads to the diagrams being deprecated.\n",
            "subtitle2": "Round-trip engineering",
            "paragraph4": "Round-trip engineering refers to the ability of a UML tool to perform code generation from models, and model generation from code (a.k.a., reverse engineering), while keeping both the model and the code semantically consistent with each other. Code generation and reverse engineering are explained in more detail below.\n",
            "paragraph5": "Code generation in this context means that the user creates UML diagrams, which have some connected model data, and the UML tool derives from the diagrams part or all of the source code for the software system. In some tools the user can provide a skeleton of the program source code, in the form of a source code template, where predefined tokens are then replaced with program source code parts during the code generation process.\n",
            "paragraph6": "There is some debate among software developers about how useful code generation as such is[citation needed]. It certainly depends on the specific problem domain and how far code generation should be applied. There are well known areas where code generation is an established practice, not limited to the field of UML.\n",
            "paragraph7": "The idea of completely leaving the \"code level\" and starting to do \"programming\" directly from the UML diagram level (i.e., design level) is quite debated among developers[citation needed]. That is the vision for Model-driven architecture (MDA). This idea is not in such widespread use compared to other software development tools like compilers or software configuration management systems.\n",
            "paragraph8": "An often cited criticism is that the UML diagrams lack the detail that is needed to contain the same information as is covered with the program source:  Jack W. Reeves states that the final embodiment of the design lies in the source code. (His often quoted statement that \"the Code is the design\"  has been misinterpreted to mean that there is no need for intermediate- and high-level software-design artifacts, such as UML diagrams or software-requirements documents).\n",
            "paragraph9": "Reverse engineering in this context means, that the UML tool reads program source code as input and derives model data and corresponding graphical UML diagrams from it (as opposed to the somewhat broader meaning described in the article \"Reverse engineering\").\n",
            "paragraph10": "Some of the challenges of reverse engineering are:\n",
            "ul1": "The source code often has much more detailed information than one would want to see in design diagrams. This problem is addressed by software architecture reconstruction.\nDiagram data is normally not contained with the program source, such that the UML tool, at least in the initial step, has to create some random layout of the graphical symbols of the UML notation or use some automatic layout algorithm to place the symbols in a way that the user can understand the diagram. For example, the symbols should be placed at such locations on the drawing pane that they don't overlap. Usually, the user of such a functionality of a UML tool has to manually edit those automatically generated diagrams to attain some meaningfulness. It also often doesn't make sense to draw diagrams of the whole program source, as that represents just too much detail to be of interest at the level of the UML diagrams.\nThere are language features of some programming languages, like class- or function templates of the C++ programming language, which are notoriously hard to convert automatically to UML diagrams in their full complexity.\n",
            "subtitle3": "Model and diagram interchange",
            "paragraph11": "XML Metadata Interchange (XMI) is the format for UML model interchange. XMI does not support UML Diagram Interchange, which allows the importation of UML diagrams from one model to another.\n",
            "subtitle4": "Model transformation",
            "paragraph12": "A key concept associated with the model-driven architecture initiative is the capacity to transform a model into another model. For example, one might want to transform a platform-independent domain model into a Java platform-specific model for implementation. It is also possible to refactor UML models to produce more concise and well-formed UML models. It is possible to generate UML models from other modeling notations, such as BPMN, which is itself a UML profile. The standard that supports this is called QVT for Queries/Views/Transformations. One example of an open-source QVT-solution is the ATL language built by INRIA.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/List_of_Unified_Modeling_Language_tools",
        "https://en.wikipedia.org/wiki/Application_software",
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Diagram",
        "https://en.wikipedia.org/wiki/Automatic_programming",
        "https://en.wikipedia.org/wiki/Source_code",
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Compiler",
        "https://en.wikipedia.org/wiki/Configuration_management",
        "https://en.wikipedia.org/wiki/Reverse_engineering",
        "https://en.wikipedia.org/wiki/Layout_algorithm",
        "https://en.wikipedia.org/wiki/Programming_language",
        "https://en.wikipedia.org/wiki/XML_Metadata_Interchange",
        "https://en.wikipedia.org/wiki/BPMN",
        "https://en.wikipedia.org/wiki/UML_profile",
        "https://en.wikipedia.org/wiki/QVT",
        "https://en.wikipedia.org/wiki/QVT",
        "https://en.wikipedia.org/wiki/ATLAS_Transformation_Language",
        "https://en.wikipedia.org/wiki/INRIA",
        "https://en.wikipedia.org/wiki/List_of_Unified_Modeling_Language_tools",
        "https://en.wikipedia.org/wiki/List_of_requirements_engineering_tools",
        "https://en.wikipedia.org/wiki/Metamodeling",
        "https://en.wikipedia.org/wiki/QVT",
        "https://en.wikipedia.org/wiki/Specification_and_Description_Language",
        "https://en.wikipedia.org/wiki/Curlie",
        "https://en.wikipedia.org/wiki/UML_tool",
        "https://en.wikipedia.org/wiki/UML_tool",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}