{
    "url": "https://en.wikipedia.org/wiki/Software_development_effort_estimation",
    "title": "Software development effort estimation",
    "table_of_contents": [
        "1 State-of-practice",
        "2 History",
        "3 Estimation approaches",
        "4 Selection of estimation approaches",
        "5 Assessing the accuracy of estimates",
        "6 Psychological issues",
        "7 Humor",
        "8 Comparison of development estimation software",
        "9 See also",
        "10 References"
    ],
    "content": [
        {
            "paragraph1": "In software development, effort estimation is the process of predicting the most realistic amount of effort (expressed in terms of person-hours or money) required to develop or maintain software based on incomplete, uncertain and noisy input. Effort estimates may be used as input to project plans, iteration plans, budgets, investment analyses, pricing processes and bidding rounds.\n"
        },
        {
            "title": "State-of-practice",
            "paragraph1": "Published surveys on estimation practice suggest that expert estimation is the dominant strategy when estimating software development effort.\n",
            "paragraph2": "Typically, effort estimates are over-optimistic and there is a strong over-confidence in their accuracy. The mean effort overrun seems to be about 30% and not decreasing over time. For a review of effort estimation error surveys, see. However, the measurement of estimation error is problematic, see Assessing the accuracy of estimates.\nThe strong overconfidence in the accuracy of the effort estimates is illustrated by the finding that, on average, if a software professional is 90% confident or “almost sure” to include the actual effort in a minimum-maximum interval, the observed frequency of including the actual effort is only 60-70%.\n",
            "paragraph3": "Currently the term “effort estimate” is used to denote as different concepts such as most likely use of effort (modal value), the effort that corresponds to a probability of 50% of not exceeding (median), the planned effort, the budgeted effort or the effort used to propose a bid or price to the client. This is believed to be unfortunate, because communication problems may occur and because the concepts serve different goals.\n"
        },
        {
            "title": "History",
            "paragraph1": "Software researchers and practitioners have been addressing the problems of effort estimation for software development projects since at least the 1960s; see, e.g., work by Farr and Nelson.\n",
            "paragraph2": "Most of the research has focused on the construction of formal software effort estimation models. The early models were typically based on regression analysis or mathematically derived from theories from other domains. Since then a high number of model building approaches have been evaluated, such as approaches founded on case-based reasoning, classification and regression trees, simulation, neural networks, Bayesian statistics, lexical analysis of requirement specifications, genetic programming, linear programming, economic production models, soft computing, fuzzy logic modeling, statistical bootstrapping, and combinations of two or more of these models. The perhaps most common estimation methods today are the parametric estimation models COCOMO, SEER-SEM and SLIM. They have their basis in estimation research conducted in the 1970s and 1980s and are since then updated with new calibration data, with the last major release being COCOMO II in the year 2000.  The estimation approaches based on functionality-based size measures, e.g., function points, is also based on research conducted in the 1970s and 1980s, but are re-calibrated with modified size measures and different counting approaches, such as the use case points or object points in the 1990s.\n"
        },
        {
            "title": "Estimation approaches",
            "paragraph1": "There are many ways of categorizing estimation approaches, see for example. The top level categories are the following:\n",
            "ul1": "Expert estimation: The quantification step, i.e., the step where the estimate is produced based on judgmental processes.[14]\nFormal estimation model: The quantification step is based on mechanical processes, e.g., the use of a formula derived from historical data.\nCombination-based estimation: The quantification step is based on a judgmental and mechanical combination of estimates from different sources.\n",
            "paragraph2": "Below are examples of estimation approaches within each category.\n"
        },
        {
            "title": "Selection of estimation approaches",
            "paragraph1": "The evidence on differences in estimation accuracy of different estimation approaches and models suggest that there is no “best approach” and that the relative accuracy of one approach or model in comparison to another depends strongly on the context\n. This implies that different organizations benefit from different estimation approaches. Findings that may support the selection of estimation approach based on the expected accuracy of an approach include:\n",
            "ul1": "Expert estimation is on average at least as accurate as model-based effort estimation. In particular, situations with unstable relationships and information of high importance not included in the model may suggest use of expert estimation. This assumes, of course, that experts with relevant experience are available.\nFormal estimation models not tailored to a particular organization’s own context, may be very inaccurate. Use of own historical data is consequently crucial if one cannot be sure that the estimation model’s core relationships (e.g., formula parameters) are based on similar project contexts.\nFormal estimation models may be particularly useful in situations where the model is tailored to the organization’s context (either through use of own historical data or that the model is derived from similar projects and contexts), and it is likely that the experts’ estimates will be subject to a strong degree of wishful thinking.\n",
            "paragraph2": "The most robust finding, in many forecasting domains, is that combination of estimates from independent sources, preferable applying different approaches, will on average improve the estimation accuracy.\n",
            "paragraph3": "It is important to be aware of the limitations of each traditional approach to measuring software development productivity.\n",
            "paragraph4": "In addition, other factors such as ease of understanding and communicating the results of an approach, ease of use of an approach, and cost of introduction of an approach should be considered in a selection process.\n"
        },
        {
            "title": "Assessing the accuracy of estimates",
            "paragraph1": "The most common measure of the average estimation accuracy is the MMRE (Mean Magnitude of Relative Error), where the MRE of each estimate is defined as:\n",
            "paragraph2": "This measure has been criticized \n\n and there are several alternative measures, such as more symmetric measures,  Weighted Mean of Quartiles of relative errors (WMQ)\n and Mean Variation from Estimate (MVFE).\n",
            "paragraph3": "MRE is not reliable if the individual items are skewed.  PRED(25) is preferred as a measure of estimation accuracy.  PRED(25) measures the percentage of predicted values that are within 25 percent of the actual value.\n",
            "paragraph4": "A high estimation error cannot automatically be interpreted as an indicator of low estimation ability. Alternative, competing or complementing, reasons include low cost control of project, high complexity of development work, and more delivered functionality than originally estimated. A framework for improved use and interpretation of estimation error measurement is included in.\n"
        },
        {
            "title": "Psychological issues",
            "paragraph1": "There are many psychological factors potentially explaining the strong tendency towards over-optimistic effort estimates that need to be dealt with to increase accuracy of effort estimates. These factors are essential even when using formal estimation models, because much of the input to these models is judgment-based. Factors that have been demonstrated to be important are: Wishful thinking, anchoring, planning fallacy and cognitive dissonance. A discussion on these and other factors can be found in work by Jørgensen and Grimstad.\n",
            "ul1": "It's easy to estimate what you know.\nIt's hard to estimate what you know you don't know. (known unknowns)\nIt's very hard to estimate things that you don't know you don't know. (unknown unknowns)\n"
        },
        {
            "title": "Humor",
            "paragraph1": "The chronic underestimation of development effort has led to the coinage and popularity of numerous humorous adages, such as ironically referring to a task as a \"small matter of programming\" (when much effort is likely required), and citing laws about underestimation:\n",
            "ul1": "Ninety-ninety rule:\n",
            "ul2": "Hofstadter's law:\n",
            "ul3": "Fred Brooks' law:\n",
            "paragraph2": " Adding to the fact that estimating development efforts is hard, it's worth stating that assigning more resources doesn't always help.\n"
        },
        {
            "title": "Comparison of development estimation software"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Estimation",
        "https://en.wikipedia.org/wiki/Regression_analysis",
        "https://en.wikipedia.org/wiki/Regression_trees",
        "https://en.wikipedia.org/wiki/Simulation",
        "https://en.wikipedia.org/wiki/Neural_networks",
        "https://en.wikipedia.org/wiki/Bayesian_statistics",
        "https://en.wikipedia.org/wiki/Lexical_analysis",
        "https://en.wikipedia.org/wiki/Genetic_programming",
        "https://en.wikipedia.org/wiki/Linear_programming",
        "https://en.wikipedia.org/wiki/Soft_computing",
        "https://en.wikipedia.org/wiki/Fuzzy_logic",
        "https://en.wikipedia.org/wiki/Bootstrapping",
        "https://en.wikipedia.org/wiki/COCOMO",
        "https://en.wikipedia.org/wiki/Function_points",
        "https://en.wikipedia.org/wiki/Use_Case_Points",
        "https://en.wikipedia.org/wiki/Object_point",
        "https://en.wikipedia.org/wiki/Analogy",
        "https://en.wikipedia.org/wiki/Weighted_Micro_Function_Points",
        "https://en.wikipedia.org/wiki/Work_breakdown_structure",
        "https://en.wikipedia.org/wiki/Project_management_software",
        "https://en.wikipedia.org/wiki/COCOMO",
        "https://en.wikipedia.org/wiki/Putnam_model",
        "https://en.wikipedia.org/wiki/Function_Point_Analysis",
        "https://en.wikipedia.org/wiki/Use_Case",
        "https://en.wikipedia.org/wiki/Use_Case_Points",
        "https://en.wikipedia.org/wiki/Story_point",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Object_point",
        "https://en.wikipedia.org/wiki/Planning_poker",
        "https://en.wikipedia.org/wiki/Wideband_delphi",
        "https://en.wikipedia.org/wiki/Work_breakdown_structure",
        "https://en.wikipedia.org/wiki/Wishful_thinking",
        "https://en.wikipedia.org/wiki/Anchoring",
        "https://en.wikipedia.org/wiki/Planning_fallacy",
        "https://en.wikipedia.org/wiki/Cognitive_dissonance",
        "https://en.wikipedia.org/wiki/Small_matter_of_programming",
        "https://en.wikipedia.org/wiki/Bell_Labs",
        "https://en.wikipedia.org/wiki/Douglas_Hofstadter",
        "https://en.wikipedia.org/wiki/Fred_Brooks",
        "https://en.wikipedia.org/wiki/Programming_language",
        "https://en.wikipedia.org/wiki/Computing_platform",
        "https://en.wikipedia.org/wiki/Software_license",
        "https://en.wikipedia.org/wiki/AFCAA_REVIC",
        "https://en.wikipedia.org/wiki/Source_lines_of_code",
        "https://en.wikipedia.org/wiki/Source_lines_of_code",
        "https://en.wikipedia.org/wiki/Function_points",
        "https://en.wikipedia.org/wiki/Web_application",
        "https://en.wikipedia.org/wiki/Proprietary_software",
        "https://en.wikipedia.org/wiki/Putnam_model",
        "https://en.wikipedia.org/wiki/Putnam_model",
        "https://en.wikipedia.org/wiki/Source_lines_of_code",
        "https://en.wikipedia.org/wiki/Function_points",
        "https://en.wikipedia.org/wiki/Web_application",
        "https://en.wikipedia.org/wiki/Proprietary_software",
        "https://en.wikipedia.org/wiki/PRICE_Systems",
        "https://en.wikipedia.org/wiki/Proprietary_software",
        "https://en.wikipedia.org/wiki/Cone_of_uncertainty",
        "https://en.wikipedia.org/wiki/Cost_estimation_in_software_engineering",
        "https://en.wikipedia.org/wiki/Cost_estimation_models",
        "https://en.wikipedia.org/wiki/Cost_overrun",
        "https://en.wikipedia.org/wiki/Function_points",
        "https://en.wikipedia.org/wiki/Planning_fallacy",
        "https://en.wikipedia.org/wiki/Putnam_model",
        "https://en.wikipedia.org/wiki/Software_metric",
        "https://en.wikipedia.org/wiki/Software_parametric_models",
        "https://en.wikipedia.org/wiki/European_Journal_of_Information_Systems",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Software_development_effort_estimation",
        "https://en.wikipedia.org/wiki/Software_development_effort_estimation",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}