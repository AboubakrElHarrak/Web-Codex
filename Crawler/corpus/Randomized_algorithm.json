{
    "url": "https://en.wikipedia.org/wiki/Randomized_algorithm",
    "title": "Randomized algorithm",
    "table_of_contents": [
        "1 Motivation",
        "2 Computational complexity",
        "3 History",
        "4 Examples",
        "4.1 Quicksort",
        "4.2 Randomized incremental constructions in geometry",
        "4.3 Min cut",
        "4.3.1 Analysis of algorithm",
        "5 Derandomization",
        "6 Where randomness helps",
        "7 See also",
        "8 Notes",
        "9 References"
    ],
    "content": [
        {
            "paragraph1": "A randomized algorithm is an algorithm that employs a degree of randomness as part of its logic or procedure. The algorithm typically uses uniformly random bits as an auxiliary input to guide its behavior, in the hope of achieving good performance in the \"average case\" over all possible choices of random determined by the random bits; thus either the running time, or the output (or both) are random variables.\n",
            "paragraph2": "One has to distinguish between algorithms that use the random input so that they always terminate with the correct answer, but where the expected running time is finite (Las Vegas algorithms, for example Quicksort), and algorithms which have a chance of producing an incorrect result (Monte Carlo algorithms, for example the Monte Carlo algorithm for the MFAS problem) or fail to produce a result either by signaling a failure or failing to terminate. In some cases, probabilistic algorithms are the only practical means of solving a problem.\n",
            "paragraph3": "In common practice, randomized algorithms are approximated using a pseudorandom number generator in place of a true source of random bits; such an implementation may deviate from the expected theoretical behavior and mathematical guarantees which may depend on the existence of an ideal true random number generator.\n"
        },
        {
            "title": "Motivation",
            "paragraph1": "As a motivating example, consider the problem of finding an ‘a’ in an array of n elements.\n",
            "paragraph2": "Input: An array of n≥2 elements, in which half are ‘a’s and the other half are ‘b’s.\n",
            "paragraph3": "Output: Find an ‘a’ in the array.\n",
            "paragraph4": "We give two versions of the algorithm, one Las Vegas algorithm and one Monte Carlo algorithm.\n",
            "paragraph5": "Las Vegas algorithm:\n",
            "paragraph6": "This algorithm succeeds with probability 1. The number of iterations varies and can be arbitrarily large, but the expected number of iterations is\n",
            "paragraph7": "Since it is constant, the expected run time over many calls is \n\n\n\nΘ\n(\n1\n)\n\n\n{\\displaystyle \\Theta (1)}\n\n. (See Big Theta notation)\n",
            "paragraph8": "Monte Carlo algorithm:\n",
            "paragraph9": "If an ‘a’ is found, the algorithm succeeds, else the algorithm fails. After k iterations, the probability of finding an ‘a’ is:\n",
            "paragraph10": "This algorithm does not guarantee success, but the run time is bounded. The number of iterations is always less than or equal to k.  Taking k to be constant the run time (expected and absolute) is \n\n\n\nΘ\n(\n1\n)\n\n\n{\\displaystyle \\Theta (1)}\n\n.\n",
            "paragraph11": "Randomized algorithms are particularly useful when faced with a malicious \"adversary\" or attacker who deliberately tries to feed a bad input to the algorithm (see worst-case complexity and competitive analysis (online algorithm)) such as in the Prisoner's dilemma. It is for this reason that randomness is ubiquitous in cryptography. In cryptographic applications, pseudo-random numbers cannot be used, since the adversary can predict them, making the algorithm effectively deterministic. Therefore, either a source of truly random numbers or a cryptographically secure pseudo-random number generator is required.  Another area in which randomness is inherent is quantum computing.\n",
            "paragraph12": "In the example above, the Las Vegas algorithm always outputs the correct answer, but its running time is a random variable.  The Monte Carlo algorithm (related to the Monte Carlo method for simulation) is guaranteed to complete in an amount of time that can be bounded by a function the input size and its parameter k, but allows a small probability of error. Observe that any Las Vegas algorithm can be converted into a Monte Carlo algorithm (via Markov's inequality), by having it output an arbitrary, possibly incorrect answer if it fails to complete within a specified time. Conversely, if an efficient verification procedure exists to check whether an answer is correct, then a Monte Carlo algorithm can be converted into a Las Vegas algorithm by running the Monte Carlo algorithm repeatedly till a correct answer is obtained.\n"
        },
        {
            "title": "Computational complexity",
            "paragraph1": "Computational complexity theory models randomized algorithms as probabilistic Turing machines. Both  Las Vegas and Monte Carlo algorithms are considered, and several complexity classes are studied. The most basic randomized complexity class is RP, which is the class of decision problems for which there is an efficient (polynomial time) randomized algorithm (or probabilistic Turing machine) which recognizes NO-instances with absolute certainty and recognizes YES-instances with a probability of at least 1/2. The complement class for RP is co-RP. Problem classes having (possibly nonterminating) algorithms with polynomial time average case running time whose output is always correct are said to be in ZPP.\n",
            "paragraph2": "The class of problems for which both YES and NO-instances are allowed to be identified with some error is called BPP. This class acts as the randomized equivalent of P, i.e. BPP represents the class of efficient randomized algorithms.\n"
        },
        {
            "title": "History",
            "paragraph1": "Historically, the first randomized algorithm was a method developed by Michael O. Rabin for the closest pair problem in computational geometry.\nThe study of randomized algorithms was spurred by the 1977 discovery of a randomized primality test (i.e., determining the primality of a number) by Robert M. Solovay and Volker Strassen. Soon afterwards Michael O. Rabin demonstrated that the 1976 Miller's primality test can be turned into a randomized algorithm. At that time, no practical deterministic algorithm for primality was known.\n",
            "paragraph2": "The Miller–Rabin primality test relies on a binary relation between two positive integers k and n that can be expressed by saying that k \"is a witness to the compositeness of\" n.  It can be shown that\n",
            "ul1": "If there is a witness to the compositeness of n, then n is composite (i.e., n is not prime), and\nIf n is composite then at least three-fourths of the natural numbers less than n are witnesses to its compositeness, and\nThere is a fast algorithm that, given k and n, ascertains whether k is a witness to the compositeness of n.\n",
            "paragraph3": "Observe that this implies that the primality problem is in Co-RP.\n",
            "paragraph4": "If one randomly chooses 100 numbers less than a composite number n, then the probability of failing to find such a \"witness\" is (1/4)100 so that for most practical purposes, this is a good primality test.  If n is big, there may be no other test that is practical. The probability of error can be reduced to an arbitrary degree by performing enough independent tests.\n",
            "paragraph5": "Therefore, in practice, there is no penalty associated with accepting a small probability of error, since with a little care the probability of error can be made astronomically small.  Indeed, even though a deterministic polynomial-time primality test has since been found (see AKS primality test), it has not replaced the older probabilistic tests in cryptographic software nor is it expected to do so for the foreseeable future.\n"
        },
        {
            "title": "Examples",
            "subtitle1": "Quicksort",
            "paragraph1": "Quicksort is a familiar, commonly used algorithm in which randomness can be useful. Many deterministic versions of this algorithm require O(n2) time to sort n numbers for some well-defined class of degenerate inputs (such as an already sorted array), with the specific class of inputs that generate this behavior defined by the protocol for pivot selection. However, if the algorithm selects pivot elements uniformly at random, it has a provably high probability of finishing in O(n log n) time regardless of the characteristics of the input.\n",
            "subtitle2": "Randomized incremental constructions in geometry",
            "paragraph2": "In computational geometry, a standard technique to build a structure like a convex hull or Delaunay triangulation is to randomly permute the input points and then insert them one by one into the existing structure. The randomization ensures that the expected number of changes to the structure caused by an insertion is small, and so the expected running time of the algorithm can be bounded from above. This technique is known as randomized incremental construction.\n",
            "subtitle3": "Min cut",
            "paragraph3": "Input: A graph G(V,E)\n",
            "paragraph4": "Output: A cut partitioning the vertices into L and R, with the minimum number of edges between L and R.\n",
            "paragraph5": "Recall that the contraction of two nodes, u and v, in a (multi-)graph yields a new node u ' with edges that are the union of the edges incident on either u or v, except from any edge(s) connecting u and v. Figure 1 gives an example of contraction of vertex A and B.\nAfter contraction, the resulting graph may have parallel edges, but contains no self loops.\n",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Single_run_of_Karger%E2%80%99s_Mincut_algorithm.svg/680px-Single_run_of_Karger%E2%80%99s_Mincut_algorithm.svg.png",
                "caption": "\n\t\tFigure 2: Successful run of Karger's algorithm on a 10-vertex graph. The minimum cut has size 3 and is indicated by the vertex colours.\n\t"
            },
            "image2": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Contraction_vertices.jpg/600px-Contraction_vertices.jpg",
                "caption": "\n\t\tFigure 1: Contraction of vertex A and B\n\t"
            },
            "paragraph6": "Karger's basic algorithm:\n",
            "paragraph7": "In each execution of the outer loop, the algorithm repeats the inner loop until only 2 nodes remain, the corresponding cut is obtained. The run time of one execution is \n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n, and n denotes the number of vertices.\nAfter m times executions of the outer loop, we output the minimum cut among all the results. The figure 2 gives an\nexample of one execution of the algorithm. After execution, we get a cut of size 3.\n",
            "paragraph8": "The probability that the algorithm succeeds is 1 − the probability that all attempts fail. By independence, the probability that all attempts fail is\n",
            "paragraph9": "",
            "paragraph10": "By lemma 1, the probability that Ci = C is the probability that no edge of C is selected during iteration i. Consider the inner loop and let Gj denote the graph after j edge contractions, where j ∈ {0, 1, …, n − 3}. Gj has n − j vertices. We use the chain rule of conditional possibilities.\nThe probability that the edge chosen at iteration j is not in C, given that no edge of C has been chosen before, is \n\n\n\n1\n−\n\n\nk\n\n\n|\n\nE\n(\n\nG\n\nj\n\n\n)\n\n|\n\n\n\n\n\n\n{\\displaystyle 1-{\\frac {k}{|E(G_{j})|))}\n\n. Note that Gj still has min cut of size k, so by Lemma 2, it still has at least \n\n\n\n\n\n\n(\nn\n−\nj\n)\nk\n\n2\n\n\n\n\n{\\displaystyle {\\frac {(n-j)k}{2))}\n\n edges.\n",
            "paragraph11": "Thus, \n\n\n\n1\n−\n\n\nk\n\n\n|\n\nE\n(\n\nG\n\nj\n\n\n)\n\n|\n\n\n\n\n≥\n1\n−\n\n\n2\n\nn\n−\nj\n\n\n\n=\n\n\n\nn\n−\nj\n−\n2\n\n\nn\n−\nj\n\n\n\n\n\n{\\displaystyle 1-{\\frac {k}{|E(G_{j})|))\\geq 1-{\\frac {2}{n-j))={\\frac {n-j-2}{n-j))}\n\n.\n",
            "paragraph12": "So by the chain rule, the probability of finding the min cut C is\n",
            "paragraph13": "",
            "paragraph14": "Cancellation gives \n\n\n\nPr\n[\n\nC\n\ni\n\n\n=\nC\n]\n≥\n\n\n2\n\nn\n(\nn\n−\n1\n)\n\n\n\n\n\n{\\displaystyle \\Pr[C_{i}=C]\\geq {\\frac {2}{n(n-1)))}\n\n. Thus the probability that the algorithm succeeds is at least \n\n\n\n1\n−\n\n\n(\n\n1\n−\n\n\n2\n\nn\n(\nn\n−\n1\n)\n\n\n\n\n)\n\n\nm\n\n\n\n\n{\\displaystyle 1-\\left(1-{\\frac {2}{n(n-1)))\\right)^{m))\n\n. For \n\n\n\nm\n=\n\n\n\nn\n(\nn\n−\n1\n)\n\n2\n\n\nln\n⁡\nn\n\n\n{\\displaystyle m={\\frac {n(n-1)}{2))\\ln n}\n\n, this is equivalent to \n\n\n\n1\n−\n\n\n1\nn\n\n\n\n\n{\\displaystyle 1-{\\frac {1}{n))}\n\n. The algorithm finds the min cut with probability \n\n\n\n1\n−\n\n\n1\nn\n\n\n\n\n{\\displaystyle 1-{\\frac {1}{n))}\n\n, in time \n\n\n\nO\n(\nm\nn\n)\n=\nO\n(\n\nn\n\n3\n\n\nlog\n⁡\nn\n)\n\n\n{\\displaystyle O(mn)=O(n^{3}\\log n)}\n\n.\n"
        },
        {
            "title": "Derandomization",
            "paragraph1": "Randomness can be viewed as a resource, like space and time. Derandomization is then the process of removing randomness (or using as little of it as possible). It is not currently known if all algorithms can be derandomized without significantly increasing their running time. For instance, in computational complexity, it is unknown whether P = BPP, i.e., we do not know whether we can take an arbitrary randomized algorithm that runs in polynomial time with a small error probability and derandomize it to run in polynomial time without using randomness.\n",
            "paragraph2": "There are specific methods that can be employed to derandomize particular randomized algorithms:\n",
            "ul1": "the method of conditional probabilities, and its generalization, pessimistic estimators\ndiscrepancy theory (which is used to derandomize geometric algorithms)\nthe exploitation of limited independence in the random variables used by the algorithm, such as the pairwise independence used in universal hashing\nthe use of expander graphs (or dispersers in general) to amplify a limited amount of initial randomness (this last approach is also referred to as generating pseudorandom bits from a random source, and leads to the related topic of pseudorandomness)\nchanging the randomized algorithm to use a hash function as a source of randomness for the algorithm's tasks, and then derandomizing the algorithm by brute-forcing all possible parameters (seeds) of the hash function. This technique is usually used to exhaustively search a sample space and making the algorithm deterministic (e.g. randomized graph algorithms)\n"
        },
        {
            "title": "Where randomness helps",
            "paragraph1": "When the model of computation is restricted to Turing machines, it is currently an open question whether the ability to make random choices allows some problems to be solved in polynomial time that cannot be solved in polynomial time without this ability; this is the question of whether P = BPP. However, in other contexts, there are specific examples of problems where randomization yields strict improvements.\n",
            "ul1": "Based on the initial motivating example: given an exponentially long string of 2k characters, half a's and half b's, a random-access machine requires 2k−1 lookups in the worst-case to find the index of an a; if it is permitted to make random choices, it can solve this problem in an expected polynomial number of lookups.\nThe natural way of carrying out a numerical computation in embedded systems or cyber-physical systems is to provide a result that approximates the correct one with high probability (or Probably Approximately Correct Computation (PACC)). The hard problem associated with the evaluation of the discrepancy loss between the approximated and the correct computation can be effectively addressed by resorting to randomization[7]\nIn communication complexity, the equality of two strings can be verified to some reliability using \n\n\n\nlog\n⁡\nn\n\n\n{\\displaystyle \\log n}\n\n bits of communication with a randomized protocol. Any deterministic protocol requires \n\n\n\nΘ\n(\nn\n)\n\n\n{\\displaystyle \\Theta (n)}\n\n bits if defending against a strong opponent.[8]\nThe volume of a convex body can be estimated by a randomized algorithm to arbitrary precision in polynomial time.[9] Bárány and Füredi showed that no deterministic algorithm can do the same.[10] This is true unconditionally, i.e. without relying on any complexity-theoretic assumptions, assuming the convex body can be queried only as a black box.\nA more complexity-theoretic example of a place where randomness appears to help is the class IP. IP consists of all languages that can be accepted (with high probability) by a polynomially long interaction between an all-powerful prover and a verifier that implements a BPP algorithm. IP = PSPACE.[11] However, if it is required that the verifier be deterministic, then IP = NP.\nIn a chemical reaction network (a finite set of reactions like A+B → 2C + D operating on a finite number of molecules), the ability to ever reach a given target state from an initial state is decidable, while even approximating the probability of ever reaching a given target state (using the standard concentration-based probability for which reaction will occur next) is undecidable.  More specifically, a limited Turing machine  can be simulated with arbitrarily high probability of running correctly for all time, only if a random chemical reaction network is used. With a simple nondeterministic chemical reaction network (any possible reaction can happen next), the computational power is limited to primitive recursive functions.[12]\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Data_structure",
        "https://en.wikipedia.org/wiki/Bloom_filter",
        "https://en.wikipedia.org/wiki/Quotient_filter",
        "https://en.wikipedia.org/wiki/Skip_list",
        "https://en.wikipedia.org/wiki/Random_binary_tree",
        "https://en.wikipedia.org/wiki/Treap",
        "https://en.wikipedia.org/wiki/HyperLogLog",
        "https://en.wikipedia.org/wiki/Algorithmic_randomness",
        "https://en.wikipedia.org/wiki/Algorithm",
        "https://en.wikipedia.org/wiki/Randomness",
        "https://en.wikipedia.org/wiki/Las_Vegas_algorithm",
        "https://en.wikipedia.org/wiki/Quicksort",
        "https://en.wikipedia.org/wiki/Monte_Carlo_algorithm",
        "https://en.wikipedia.org/wiki/Minimum_feedback_arc_set",
        "https://en.wikipedia.org/wiki/Pseudorandom_number_generator",
        "https://en.wikipedia.org/wiki/Array_data_structure",
        "https://en.wikipedia.org/wiki/Las_Vegas_algorithm",
        "https://en.wikipedia.org/wiki/Monte_Carlo_algorithm",
        "https://en.wikipedia.org/wiki/Big_Theta_notation",
        "https://en.wikipedia.org/wiki/Attacker",
        "https://en.wikipedia.org/wiki/Randomness",
        "https://en.wikipedia.org/wiki/Cryptography",
        "https://en.wikipedia.org/wiki/Quantum_computer",
        "https://en.wikipedia.org/wiki/Monte_Carlo_method",
        "https://en.wikipedia.org/wiki/Computational_complexity_theory",
        "https://en.wikipedia.org/wiki/Probabilistic_Turing_machine",
        "https://en.wikipedia.org/wiki/Las_Vegas_algorithm",
        "https://en.wikipedia.org/wiki/Monte_Carlo_algorithm",
        "https://en.wikipedia.org/wiki/Complexity_class",
        "https://en.wikipedia.org/wiki/Decision_problem",
        "https://en.wikipedia.org/wiki/Polynomial_time",
        "https://en.wikipedia.org/wiki/Closest_pair_of_points_problem",
        "https://en.wikipedia.org/wiki/Computational_geometry",
        "https://en.wikipedia.org/wiki/Primality_test",
        "https://en.wikipedia.org/wiki/Volker_Strassen",
        "https://en.wikipedia.org/wiki/Deterministic_algorithm",
        "https://en.wikipedia.org/wiki/Prime_number",
        "https://en.wikipedia.org/wiki/Random",
        "https://en.wikipedia.org/wiki/AKS_primality_test",
        "https://en.wikipedia.org/wiki/Cryptography",
        "https://en.wikipedia.org/wiki/Computer_software",
        "https://en.wikipedia.org/wiki/Quicksort",
        "https://en.wikipedia.org/wiki/Big_O_notation",
        "https://en.wikipedia.org/wiki/Computational_geometry",
        "https://en.wikipedia.org/wiki/Convex_hull",
        "https://en.wikipedia.org/wiki/Delaunay_triangulation",
        "https://en.wikipedia.org/wiki/Graph_theory",
        "https://en.wikipedia.org/wiki/Edge_contraction",
        "https://en.wikipedia.org/wiki/Conditional_probability",
        "https://en.wikipedia.org/wiki/Analysis_of_algorithms",
        "https://en.wikipedia.org/wiki/Method_of_conditional_probabilities",
        "https://en.wikipedia.org/wiki/Pessimistic_estimator",
        "https://en.wikipedia.org/wiki/Discrepancy_theory",
        "https://en.wikipedia.org/wiki/Pairwise_independence",
        "https://en.wikipedia.org/wiki/Universal_hashing",
        "https://en.wikipedia.org/wiki/Expander_graph",
        "https://en.wikipedia.org/wiki/Disperser",
        "https://en.wikipedia.org/wiki/Pseudorandom",
        "https://en.wikipedia.org/wiki/Turing_machine",
        "https://en.wikipedia.org/wiki/Embedded_systems",
        "https://en.wikipedia.org/wiki/Communication_complexity",
        "https://en.wikipedia.org/wiki/PSPACE",
        "https://en.wikipedia.org/wiki/Chemical_reaction_network",
        "https://en.wikipedia.org/wiki/Primitive_recursive",
        "https://en.wikipedia.org/wiki/Probabilistic_analysis_of_algorithms",
        "https://en.wikipedia.org/wiki/Atlantic_City_algorithm",
        "https://en.wikipedia.org/wiki/Monte_Carlo_algorithm",
        "https://en.wikipedia.org/wiki/Las_Vegas_algorithm",
        "https://en.wikipedia.org/wiki/Bogosort",
        "https://en.wikipedia.org/wiki/Principle_of_deferred_decision",
        "https://en.wikipedia.org/wiki/Probabilistic_roadmap",
        "https://en.wikipedia.org/wiki/HyperLogLog",
        "https://en.wikipedia.org/wiki/Approximate_counting_algorithm",
        "https://en.wikipedia.org/wiki/Primality_test",
        "https://en.wikipedia.org/wiki/Fermat_primality_test",
        "https://en.wikipedia.org/wiki/Cosmic_radiation",
        "https://en.wikipedia.org/wiki/Hal_Abelson",
        "https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs",
        "https://en.wikipedia.org/wiki/MIT_Press",
        "https://en.wikipedia.org/wiki/Journal_of_the_ACM",
        "https://en.wikipedia.org/wiki/Adi_Shamir",
        "https://en.wikipedia.org/wiki/Matthew_Cook",
        "https://en.wikipedia.org/wiki/Erik_Winfree",
        "https://en.wikipedia.org/wiki/Anne_Condon",
        "https://en.wikipedia.org/wiki/David_Harel",
        "https://en.wikipedia.org/wiki/Arto_Salomaa",
        "https://en.wikipedia.org/wiki/Erik_Winfree",
        "https://en.wikipedia.org/wiki/Clifford_Stein",
        "https://en.wikipedia.org/wiki/Introduction_to_Algorithms",
        "https://en.wikipedia.org/wiki/Jon_Kleinberg",
        "https://en.wikipedia.org/wiki/Michael_Mitzenmacher",
        "https://en.wikipedia.org/wiki/Eli_Upfal",
        "https://en.wikipedia.org/wiki/Rajeev_Motwani",
        "https://en.wikipedia.org/wiki/Christos_Papadimitriou",
        "https://en.wikipedia.org/wiki/Randomized_algorithm",
        "https://en.wikipedia.org/wiki/Randomized_algorithm",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}