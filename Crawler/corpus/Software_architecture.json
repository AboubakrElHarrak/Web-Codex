{
    "url": "https://en.wikipedia.org/wiki/Software_architecture",
    "title": "Software architecture",
    "table_of_contents": [
        "1 Scope",
        "2 Characteristics",
        "3 Motivation",
        "4 History",
        "5 Architecture activities",
        "5.1 Architecture supporting activities",
        "6 Software architecture topics",
        "6.1 Software architecture description",
        "6.2 Architecture description languages",
        "6.3 Architecture viewpoints",
        "6.4 Architecture frameworks",
        "6.5 Architectural styles and patterns",
        "6.6 Software architecture and agile development",
        "6.7 Software architecture erosion",
        "6.8 Software architecture recovery",
        "7 Related fields",
        "7.1 Design",
        "7.2 Requirements engineering",
        "7.3 Other types of 'architecture'",
        "8 See also",
        "9 References",
        "10 Further reading",
        "11 External links"
    ],
    "content": [
        {
            "paragraph1": "Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations. The architecture of a software system is a metaphor, analogous to the architecture of a building. It functions as a blueprint for the system and the developing project, laying out the tasks necessary to be executed by the design teams.\n",
            "paragraph2": "Software architecture is about making fundamental structural choices that are costly to change once implemented. Software architecture choices include specific structural options from possibilities in the design of the software. For example, the systems that controlled the Space Shuttle launch vehicle had the requirement of being very fast and very reliable. Therefore, an appropriate real-time computing language would need to be chosen. Additionally, to satisfy the need for reliability the choice could be made to have multiple redundant and independently produced copies of the program, and to run these copies on independent hardware while cross-checking results.\n",
            "paragraph3": "Documenting software architecture facilitates communication between stakeholders, captures early decisions about the high-level design, and allows reuse of design components between projects.: 29–35 \n",
            "image2": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/d/d8/Software_Architecture_Activities.jpg/440px-Software_Architecture_Activities.jpg",
                "caption": "\n\t\tSoftware_Architecture_Activities\n\t"
            }
        },
        {
            "title": "Scope",
            "paragraph1": "Opinions vary as to the scope of software architectures:\n",
            "ul1": "Macroscopic system structure: this refers to architecture as a higher-level abstraction of a software system that consists of a collection of computational components together with connectors that describe the interaction between these components.[6]\nThe important stuff—whatever that is: this refers to the fact that software architects should concern themselves with those decisions that have high impact on the system and its stakeholders.[7]\nThat which is fundamental to understanding a system in its environment[8]\nThings that people perceive as hard to change: since designing the architecture takes place at the beginning of a software system's lifecycle, the architect should focus on decisions that \"have to\" be right the first time. Following this line of thought, architectural design issues may become non-architectural once their irreversibility can be overcome.[7]\nA set of architectural design decisions: software architecture should not be considered merely a set of models or structures, but should include the decisions that lead to these particular structures, and the rationale behind them.[9] This insight has led to substantial research into software architecture knowledge management.[10]\n",
            "paragraph2": "There is no sharp distinction between software architecture versus design and requirements engineering (see Related fields below). They are all part of a \"chain of intentionality\" from high-level intentions to low-level details.: 18 \n"
        },
        {
            "title": "Characteristics",
            "paragraph1": "Software architecture exhibits the following:\n",
            "paragraph2": "Multitude of stakeholders: software systems have to cater to a variety of stakeholders such as business managers, owners, users, and operators. These stakeholders all have their own concerns with respect to the system. Balancing these concerns and demonstrating that they are addressed is part of designing the system.: 29–31  This implies that architecture involves dealing with a broad variety of concerns and stakeholders, and has a multidisciplinary nature.\n",
            "paragraph3": "Separation of concerns: the established way for architects to reduce complexity is to separate the concerns that drive the design. Architecture documentation shows that all stakeholder concerns are addressed by modeling and describing the architecture from separate points of view associated with the various stakeholder concerns. These separate descriptions are called architectural views (see for example the 4+1 architectural view model).\n",
            "paragraph4": "Quality-driven: classic software design approaches (e.g. Jackson Structured Programming) were driven by required functionality and the flow of data through the system, but the current insight: 26–28  is that the architecture of a software system is more closely related to its quality attributes such as fault-tolerance, backward compatibility, extensibility, reliability, maintainability, availability, security, usability, and other such –ilities. Stakeholder concerns often translate into requirements on these quality attributes, which are variously called non-functional requirements, extra-functional requirements, behavioral requirements, or quality attribute requirements.\n",
            "paragraph5": "Recurring styles: like building architecture, the software architecture discipline has developed standard ways to address recurring concerns. These \"standard ways\" are called by various names at various levels of abstraction. Common terms for recurring solutions are architectural style,: 273–277  tactic,: 70–72  reference architecture and architectural pattern.: 203–205 \n",
            "paragraph6": "Conceptual integrity: a term introduced by Fred Brooks in his 1975 book The Mythical Man-Month to denote the idea that the architecture of a software system represents an overall vision of what it should do and how it should do it. This vision should be separated from its implementation. The architect assumes the role of \"keeper of the vision\", making sure that additions to the system are in line with the architecture, hence preserving conceptual integrity.: 41–50 \n",
            "paragraph7": "Cognitive constraints: an observation first made in a 1967 paper by computer programmer Melvin Conway that organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. As with conceptual integrity, it was Fred Brooks who introduced it to a wider audience when he cited the paper and the idea in his elegant classic The Mythical Man-Month, calling it \"Conway's Law.\"\n"
        },
        {
            "title": "Motivation",
            "paragraph1": "Software architecture is an \"intellectually graspable\" abstraction of a complex system.: 5–6  This abstraction provides a number of benefits:\n",
            "ul1": "It gives a basis for analysis of software systems' behavior before the system has been built.[2] The ability to verify that a future software system fulfills its stakeholders' needs without actually having to build it represents substantial cost-saving and risk-mitigation.[16] A number of techniques have been developed to perform such analyses, such as ATAM or by creating a visual representation of the software system.\nIt provides a basis for re-use of elements and decisions.[2][4]: 35  A complete software architecture or parts of it, like individual architectural strategies and decisions, can be re-used across multiple systems whose stakeholders require similar quality attributes or functionality, saving design costs and mitigating the risk of design mistakes.\nIt supports early design decisions that impact a system's development, deployment, and maintenance life.[4]: 31  Getting the early, high-impact decisions right is important to prevent schedule and budget overruns.\nIt facilitates communication with stakeholders, contributing to a system that better fulfills their needs.[4]: 29–31  Communicating about complex systems from the point of view of stakeholders helps them understand the consequences of their stated requirements and the design decisions based on them. Architecture gives the ability to communicate about design decisions before the system is implemented, when they are still relatively easy to adapt.\nIt helps in risk management. Software architecture helps to reduce risks and chance of failure.[11]: 18 \nIt enables cost reduction. Software architecture is a means to manage risk and costs in complex IT projects.[17]\n"
        },
        {
            "title": "History",
            "paragraph1": "The comparison between software design and (civil) architecture was first drawn in the late 1960s, but the term \"software architecture\" did not see widespread usage until the 1990s. The field of computer science had encountered problems associated with complexity since its formation. Earlier problems of complexity were solved by developers by choosing the right data structures, developing algorithms, and by applying the concept of separation of concerns. Although the term \"software architecture\" is relatively new to the industry, the fundamental principles of the field have been applied sporadically by software engineering pioneers since the mid-1980s. Early attempts to capture and explain software architecture of a system were imprecise and disorganized, often characterized by a set of box-and-line diagrams.\n",
            "paragraph2": "Software architecture as a concept has its origins in the research of Edsger Dijkstra in 1968 and David Parnas in the early 1970s. These scientists emphasized that the structure of a software system matters and getting the structure right is critical. During the 1990s there was a concerted effort to define and codify fundamental aspects of the discipline, with research work concentrating on architectural styles (patterns), architecture description languages, architecture documentation, and formal methods.\n",
            "paragraph3": "Research institutions have played a prominent role in furthering software architecture as a discipline. Mary Shaw and David Garlan of Carnegie Mellon wrote a book titled Software Architecture: Perspectives on an Emerging Discipline in 1996, which promoted software architecture concepts such as components, connectors, and styles. The University of California, Irvine's Institute for Software Research's efforts in software architecture research is directed primarily in architectural styles, architecture description languages, and dynamic architectures.\n",
            "paragraph4": "IEEE 1471-2000, \"Recommended Practice for Architecture Description of Software-Intensive Systems\", was the first formal standard in the area of software architecture. It was adopted in 2007 by ISO as ISO/IEC 42010:2007. In November 2011, IEEE 1471–2000 was superseded by ISO/IEC/IEEE 42010:2011, \"Systems and software engineering – Architecture description\" (jointly published by IEEE and ISO).\n",
            "paragraph5": "While in IEEE 1471, software architecture was about the architecture of \"software-intensive systems\", defined as \"any system where software contributes essential influences to the design, construction, deployment, and evolution of the system as a whole\", the 2011 edition goes a step further by including the ISO/IEC 15288 and ISO/IEC 12207 definitions of a system, which embrace not only hardware and software, but also \"humans, processes, procedures, facilities, materials and naturally occurring entities\". This reflects the relationship between software architecture, enterprise architecture and solution architecture.\n"
        },
        {
            "title": "Architecture activities",
            "paragraph1": "There are many activities that a software architect performs. A software architect typically works with project managers, discusses architecturally significant requirements with stakeholders, designs a software architecture, evaluates a design, communicates with designers and stakeholders, documents the architectural design and more. There are four core activities in software architecture design. These core architecture activities are performed iteratively and at different stages of the initial software development life-cycle, as well as over the evolution of a system.\n",
            "paragraph2": "Architectural analysis is the process of understanding the environment in which a proposed system will operate and determining the requirements for the system. The input or requirements to the analysis activity can come from any number of stakeholders and include items such as:\n",
            "ul1": "what the system will do when operational (the functional requirements)\nhow well the system will perform runtime non-functional requirements such as reliability, operability, performance efficiency, security, compatibility defined in ISO/IEC 25010:2011 standard[25]\ndevelopment-time of non-functional requirements such as maintainability and transferability defined in ISO 25010:2011 standard[25]\nbusiness requirements and environmental contexts of a system that may change over time, such as legal, social, financial, competitive, and technology concerns[26]\n",
            "paragraph3": "The outputs of the analysis activity are those requirements that have a measurable impact on a software system's architecture, called architecturally significant requirements.\n",
            "paragraph4": "Architectural synthesis or design is the process of creating an architecture. Given the architecturally significant requirements determined by the analysis, the current state of the design and the results of any evaluation activities, the design is created and improved.: 311–326 \n",
            "paragraph5": "Architecture evaluation is the process of determining how well the current design or a portion of it satisfies the requirements derived during analysis. An evaluation can occur whenever an architect is considering a design decision, it can occur after some portion of the design has been completed, it can occur after the final design has been completed or it can occur after the system has been constructed. Some of the available software architecture evaluation techniques include Architecture Tradeoff Analysis Method (ATAM) and TARA. Frameworks for comparing the techniques are discussed in frameworks such as SARA Report and Architecture Reviews: Practice and Experience.\n",
            "paragraph6": "Architecture evolution is the process of maintaining and adapting an existing software architecture to meet changes in requirements and environment. As software architecture provides a fundamental structure of a software system, its evolution and maintenance would necessarily impact its fundamental structure. As such, architecture evolution is concerned with adding new functionality as well as maintaining existing functionality and system behavior.\n",
            "paragraph7": "Architecture requires critical supporting activities. These supporting activities take place throughout the core software architecture process. They include knowledge management and communication, design reasoning and decision making, and documentation.\n",
            "subtitle1": "Architecture supporting activities",
            "paragraph8": "Software architecture supporting activities are carried out during core software architecture activities. These supporting activities assist a software architect to carry out analysis, synthesis, evaluation, and evolution. For instance, an architect has to gather knowledge, make decisions and document during the analysis phase.\n",
            "ul2": "Knowledge management and communication is the act of exploring and managing knowledge that is essential to designing a software architecture. A software architect does not work in isolation. They get inputs, functional and non-functional requirements, and design contexts, from various stakeholders; and provides outputs to stakeholders. Software architecture knowledge is often tacit and is retained in the heads of stakeholders. Software architecture knowledge management activity is about finding, communicating, and retaining knowledge. As software architecture design issues are intricate and interdependent, a knowledge gap in design reasoning can lead to incorrect software architecture design.[23][30] Examples of knowledge management and communication activities include searching for design patterns, prototyping, asking experienced developers and architects, evaluating the designs of similar systems, sharing knowledge with other designers and stakeholders, and documenting experience in a wiki page.\nDesign reasoning and decision making is the activity of evaluating design decisions. This activity is fundamental to all three core software architecture activities.[9][31] It entails gathering and associating decision contexts, formulating design decision problems, finding solution options and evaluating tradeoffs before making decisions. This process occurs at different levels of decision granularity while evaluating significant architectural requirements and software architecture decisions, and software architecture analysis, synthesis, and evaluation. Examples of reasoning activities include understanding the impacts of a requirement or a design on quality attributes, questioning the issues that a design might cause, assessing possible solution options, and evaluating the tradeoffs between solutions.\nDocumentation is the act of recording the design generated during the software architecture process. System design is described using several views that frequently include a static view showing the code structure of the system, a dynamic view showing the actions of the system during execution, and a deployment view showing how a system is placed on hardware for execution. Kruchten's 4+1 view suggests a description of commonly used views for documenting software architecture;[32] Documenting Software Architectures: Views and Beyond has descriptions of the kinds of notations that could be used within the view description.[1] Examples of documentation activities are writing a specification, recording a system design model, documenting a design rationale, developing a viewpoint, documenting views.\n"
        },
        {
            "title": "Software architecture topics",
            "subtitle1": "Software architecture description",
            "paragraph1": "Software architecture description involves the principles and practices of modeling and representing architectures, using mechanisms such as architecture description languages, architecture viewpoints, and architecture frameworks.\n",
            "subtitle2": "Architecture description languages",
            "paragraph2": "An architecture description language (ADL) is any means of expression used to describe a software architecture (ISO/IEC/IEEE 42010).\nMany special-purpose ADLs have been developed since the 1990s, including AADL (SAE standard), Wright (developed by Carnegie Mellon), Acme (developed by Carnegie Mellon), xADL (developed by UCI), Darwin (developed by Imperial College London), DAOP-ADL (developed by University of Málaga), SBC-ADL (developed by National Sun Yat-Sen University), and ByADL (University of L'Aquila, Italy).\n",
            "subtitle3": "Architecture viewpoints",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/e/e6/4%2B1_Architectural_View_Model.svg/528px-4%2B1_Architectural_View_Model.svg.png",
                "caption": "\n4+1 architectural view model.\n\t"
            },
            "paragraph3": "Software architecture descriptions are commonly organized into views, which are analogous to the different types of blueprints made in building architecture. Each view addresses a set of system concerns, following the conventions of its viewpoint, where a viewpoint is a specification that describes the notations, modeling, and analysis techniques to use in a view that expresses the architecture in question from the perspective of a given set of stakeholders and their concerns (ISO/IEC/IEEE 42010). The viewpoint specifies not only the concerns framed (i.e., to be addressed) but the presentation, model kinds used, conventions used and any consistency (correspondence) rules to keep a view consistent with other views.\n",
            "subtitle4": "Architecture frameworks",
            "paragraph4": "An architecture framework captures the \"conventions, principles and practices for the description of architectures established within a specific domain of application and/or community of stakeholders\" (ISO/IEC/IEEE 42010). A framework is usually implemented in terms of one or more viewpoints or ADLs.\n",
            "subtitle5": "Architectural styles and patterns",
            "paragraph5": "An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context. \nArchitectural patterns are often documented as software design patterns.\n",
            "paragraph6": "Following traditional building architecture, a 'software architectural style' is a specific method of construction, characterized by the features that make it notable\" (architectural style).\n",
            "paragraph7": "There are many recognized architectural patterns and styles, among them:\n",
            "ul1": "Blackboard\nClient-server (2-tier, 3-tier, n-tier, cloud computing exhibit this style)\nComponent-based\nData-centric\nEvent-driven (or implicit invocation)\nLayered (or multilayered architecture)\nMicroservices architecture\nMonolithic application\nPeer-to-peer (P2P)\nPipes and filters\nPlug-ins\nReactive architecture\nRepresentational state transfer (REST)\nRule-based\nService-oriented\nShared nothing architecture\nSpace-based architecture\n",
            "paragraph8": "Some treat architectural patterns and architectural styles as the same, some treat styles as specializations of patterns. What they have in common is both patterns and styles are idioms for architects to use, they \"provide a common language\" or \"vocabulary\" with which to describe classes of systems.\n",
            "subtitle6": "Software architecture and agile development",
            "paragraph9": "There are also concerns that software architecture leads to too much Big Design Up Front, especially among proponents of agile software development. A number of methods have been developed to balance the trade-offs of up-front design and agility, including the agile method DSDM which mandates a \"Foundations\" phase during which \"just enough\" architectural foundations are laid. IEEE Software devoted a special issue to the interaction between agility and architecture.\n",
            "subtitle7": "Software architecture erosion",
            "paragraph10": "Software architecture erosion (or \"decay\") refers to the gap observed between the planned and actual architecture of a software system as realized in its implementation. Software architecture erosion occurs when implementation decisions either do not fully achieve the architecture-as-planned or otherwise violate constraints or principles of that architecture.\n",
            "paragraph11": "As an example, consider a strictly layered system, where each layer can only use services provided by the layer immediately below it. Any source code component that does not observe this constraint represents an architecture violation. If not corrected, such violations can transform the architecture into a monolithic block, with adverse effects on understandability, maintainability, and evolvability.\n",
            "paragraph12": "Various approaches have been proposed to address erosion. \n\"These approaches, which include tools, techniques, and processes, are primarily classified into three general categories that attempt to minimize, prevent and repair architecture erosion. Within these broad categories, each approach is further broken down reflecting the high-level strategies adopted to tackle erosion. These are process-oriented architecture conformance, architecture evolution management, architecture design enforcement, architecture to implementation linkage, self-adaptation and architecture restoration techniques consisting of recovery, discovery, and reconciliation.\"\n",
            "paragraph13": "There are two major techniques to detect architectural violations: reflexion models and domain-specific languages. Reflexion model (RM) techniques compare a high-level model provided by the system's architects with the source code implementation. There are also domain-specific languages with a focus on specifying and checking architectural constraints.\n",
            "subtitle8": "Software architecture recovery",
            "paragraph14": "Software architecture recovery (or reconstruction, or reverse engineering) includes the methods, techniques, and processes to uncover a software system's architecture from available information, including its implementation and documentation. Architecture recovery is often necessary to make informed decisions in the face of obsolete or out-of-date documentation and \narchitecture erosion: implementation and maintenance decisions diverging from the envisioned architecture. Practices exist to recover software architecture as static program analysis. This is a part of subjects covered by the software intelligence practice.\n"
        },
        {
            "title": "Related fields",
            "subtitle1": "Design",
            "paragraph1": "Architecture is design but not all design is architectural. In practice, the architect is the one who draws the line between software architecture (architectural design) and detailed design (non-architectural design). There are no rules or guidelines that fit all cases, although there have been attempts to formalize the distinction. \nAccording to the Intension/Locality Hypothesis, the distinction between architectural and detailed design is defined by the Locality Criterion, according to which a statement about software design is non-local (architectural) if and only if a program that satisfies it can be expanded into a program that does not. For example, the client–server style is architectural (strategic) because a program that is built on this principle can be expanded into a program that is not client–server—for example, by adding peer-to-peer nodes.\n",
            "subtitle2": "Requirements engineering",
            "paragraph2": "Requirements engineering and software architecture can be seen as complementary approaches: while software architecture targets the 'solution space' or the 'how', requirements engineering addresses the 'problem space' or the 'what'. Requirements engineering entails the elicitation, negotiation, specification, validation, documentation and management of requirements. Both requirements engineering and software architecture revolve around stakeholder concerns, needs and wishes.\n",
            "paragraph3": "There is considerable overlap between requirements engineering and software architecture, as evidenced for example by a study into five industrial software architecture methods that concludes that \"the inputs (goals, constraints, etc.) are usually ill-defined, and only get discovered or better understood as the architecture starts to emerge\" and that while \"most architectural concerns are expressed as requirements on the system, they can also include mandated design decisions\". In short, required behavior impacts solution architecture, which in turn may introduce new requirements. Approaches such as the Twin Peaks model aim to exploit the synergistic relation between requirements and architecture.\n",
            "subtitle3": "Other types of 'architecture'"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_construction",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Debugging",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Cleanroom_software_engineering",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Software_development_methodology",
        "https://en.wikipedia.org/wiki/Adaptive_software_development",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Disciplined_agile_delivery",
        "https://en.wikipedia.org/wiki/Dynamic_systems_development_method",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Lean_software_development",
        "https://en.wikipedia.org/wiki/Microsoft_Solutions_Framework",
        "https://en.wikipedia.org/wiki/Personal_software_process",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Rational_Unified_Process",
        "https://en.wikipedia.org/wiki/Scaled_agile_framework",
        "https://en.wikipedia.org/wiki/SEMAT",
        "https://en.wikipedia.org/wiki/Team_software_process",
        "https://en.wikipedia.org/wiki/OpenUP",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_documentation",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_project_management",
        "https://en.wikipedia.org/wiki/User_experience",
        "https://en.wikipedia.org/wiki/Continuous_integration",
        "https://en.wikipedia.org/wiki/Continuous_delivery",
        "https://en.wikipedia.org/wiki/Pair_programming",
        "https://en.wikipedia.org/wiki/Specification_by_example",
        "https://en.wikipedia.org/wiki/Programming_tool",
        "https://en.wikipedia.org/wiki/Compiler",
        "https://en.wikipedia.org/wiki/Debugger",
        "https://en.wikipedia.org/wiki/Graphical_user_interface_builder",
        "https://en.wikipedia.org/wiki/UML_tool",
        "https://en.wikipedia.org/wiki/Integrated_development_environment",
        "https://en.wikipedia.org/wiki/Build_automation",
        "https://en.wikipedia.org/wiki/Infrastructure_as_code",
        "https://en.wikipedia.org/wiki/A_Guide_to_the_Business_Analysis_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/IEEE_Standards_Association",
        "https://en.wikipedia.org/wiki/ISO_9001",
        "https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/ITIL",
        "https://en.wikipedia.org/wiki/International_Requirements_Engineering_Board",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Glossary_of_computer_science",
        "https://en.wikipedia.org/wiki/Glossary_of_electrical_and_electronics_engineering",
        "https://en.wikipedia.org/wiki/Outline_of_software_development",
        "https://en.wikipedia.org/wiki/Software_system",
        "https://en.wikipedia.org/wiki/Architecture",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Space_Shuttle",
        "https://en.wikipedia.org/wiki/Software_documentation",
        "https://en.wikipedia.org/wiki/Knowledge_management",
        "https://en.wikipedia.org/wiki/Separation_of_concerns",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Jackson_Structured_Programming",
        "https://en.wikipedia.org/wiki/Quality_attributes",
        "https://en.wikipedia.org/wiki/Backward_compatibility",
        "https://en.wikipedia.org/wiki/Extensibility",
        "https://en.wikipedia.org/wiki/Maintainability",
        "https://en.wikipedia.org/wiki/Availability",
        "https://en.wikipedia.org/wiki/Ilities",
        "https://en.wikipedia.org/wiki/Requirements",
        "https://en.wikipedia.org/wiki/Reference_architecture",
        "https://en.wikipedia.org/wiki/Architectural_pattern",
        "https://en.wikipedia.org/wiki/Fred_Brooks",
        "https://en.wikipedia.org/wiki/Melvin_Conway",
        "https://en.wikipedia.org/wiki/ATAM",
        "https://en.wikipedia.org/wiki/Cost_overrun",
        "https://en.wikipedia.org/wiki/Cost_reduction",
        "https://en.wikipedia.org/wiki/Computer_science",
        "https://en.wikipedia.org/wiki/Data_structure",
        "https://en.wikipedia.org/wiki/Algorithm",
        "https://en.wikipedia.org/wiki/Separation_of_concerns",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Diagram",
        "https://en.wikipedia.org/wiki/Edsger_Dijkstra",
        "https://en.wikipedia.org/wiki/David_Parnas",
        "https://en.wikipedia.org/wiki/Patterns",
        "https://en.wikipedia.org/wiki/Architecture_description_language",
        "https://en.wikipedia.org/wiki/Formal_method",
        "https://en.wikipedia.org/wiki/Carnegie_Mellon",
        "https://en.wikipedia.org/wiki/Software_component",
        "https://en.wikipedia.org/wiki/IEEE_1471",
        "https://en.wikipedia.org/wiki/IEEE_1471",
        "https://en.wikipedia.org/wiki/IEEE_1471",
        "https://en.wikipedia.org/wiki/Enterprise_architecture",
        "https://en.wikipedia.org/wiki/Solution_architecture",
        "https://en.wikipedia.org/wiki/Software_architect",
        "https://en.wikipedia.org/wiki/Architecturally_significant_requirements",
        "https://en.wikipedia.org/wiki/Architecture_tradeoff_analysis_method",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_architecture_description",
        "https://en.wikipedia.org/wiki/Architecture_description_language",
        "https://en.wikipedia.org/wiki/Architecture_analysis_and_design_language",
        "https://en.wikipedia.org/wiki/Imperial_College_London",
        "https://en.wikipedia.org/wiki/View_model",
        "https://en.wikipedia.org/wiki/View_model",
        "https://en.wikipedia.org/wiki/Blueprint",
        "https://en.wikipedia.org/wiki/Architecture",
        "https://en.wikipedia.org/wiki/Architecture_framework",
        "https://en.wikipedia.org/wiki/Architectural_pattern",
        "https://en.wikipedia.org/wiki/Software_design_pattern",
        "https://en.wikipedia.org/wiki/Architectural_style",
        "https://en.wikipedia.org/wiki/Cloud_computing",
        "https://en.wikipedia.org/wiki/Software_componentry",
        "https://en.wikipedia.org/wiki/Implicit_invocation",
        "https://en.wikipedia.org/wiki/Multilayered_architecture",
        "https://en.wikipedia.org/wiki/Microservices",
        "https://en.wikipedia.org/wiki/Monolithic_application",
        "https://en.wikipedia.org/wiki/Pipes_and_filters",
        "https://en.wikipedia.org/wiki/Representational_state_transfer",
        "https://en.wikipedia.org/wiki/Shared_nothing_architecture",
        "https://en.wikipedia.org/wiki/Agile_development",
        "https://en.wikipedia.org/wiki/Big_Design_Up_Front",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Dynamic_systems_development_method",
        "https://en.wikipedia.org/wiki/IEEE_Software",
        "https://en.wikipedia.org/wiki/Software_architecture_recovery",
        "https://en.wikipedia.org/wiki/Reverse_engineering",
        "https://en.wikipedia.org/wiki/Static_program_analysis",
        "https://en.wikipedia.org/wiki/Software_intelligence",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Requirements_engineering",
        "https://en.wikipedia.org/wiki/Requirements_engineering",
        "https://en.wikipedia.org/wiki/Solution_space",
        "https://en.wikipedia.org/wiki/Computational_problem",
        "https://en.wikipedia.org/wiki/Requirements_elicitation",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_Requirements_Specification",
        "https://en.wikipedia.org/wiki/Data_validation",
        "https://en.wikipedia.org/wiki/Requirements_traceability",
        "https://en.wikipedia.org/wiki/Requirements_management",
        "https://en.wikipedia.org/wiki/Requirement",
        "https://en.wikipedia.org/wiki/Synergy",
        "https://en.wikipedia.org/wiki/Computer_architecture",
        "https://en.wikipedia.org/wiki/Systems_architecture",
        "https://en.wikipedia.org/wiki/Enterprise_architecture",
        "https://en.wikipedia.org/wiki/Computer_architecture",
        "https://en.wikipedia.org/wiki/Central_processing_unit",
        "https://en.wikipedia.org/wiki/Computer_memory",
        "https://en.wikipedia.org/wiki/Systems_architecture",
        "https://en.wikipedia.org/wiki/System",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Sociotechnical_system",
        "https://en.wikipedia.org/wiki/Enterprise_architecture",
        "https://en.wikipedia.org/wiki/Architecture_framework",
        "https://en.wikipedia.org/wiki/TOGAF",
        "https://en.wikipedia.org/wiki/Zachman_Framework",
        "https://en.wikipedia.org/wiki/Business",
        "https://en.wikipedia.org/wiki/Application_software",
        "https://en.wikipedia.org/wiki/Information",
        "https://en.wikipedia.org/wiki/Technology",
        "https://en.wikipedia.org/wiki/ArchiMate",
        "https://en.wikipedia.org/wiki/Computer_architecture",
        "https://en.wikipedia.org/wiki/Distributed_Data_Management_Architecture",
        "https://en.wikipedia.org/wiki/DRDA",
        "https://en.wikipedia.org/wiki/Systems_architecture",
        "https://en.wikipedia.org/wiki/Systems_design",
        "https://en.wikipedia.org/wiki/Software_Architecture_Analysis_Method",
        "https://en.wikipedia.org/wiki/Len_Bass",
        "https://en.wikipedia.org/wiki/ACM_SIGSOFT_Software_Engineering_Notes",
        "https://en.wikipedia.org/wiki/Hans_van_Vliet",
        "https://en.wikipedia.org/wiki/IEEE_Software",
        "https://en.wikipedia.org/wiki/IEEE_Software",
        "https://en.wikipedia.org/wiki/Software_Engineering_Institute",
        "https://en.wikipedia.org/wiki/Carnegie_Mellon_University",
        "https://en.wikipedia.org/wiki/Roy_Fielding",
        "https://en.wikipedia.org/wiki/Systems_Development_Life_Cycle",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Computer_programming",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Requirements_engineering",
        "https://en.wikipedia.org/wiki/Site_reliability_engineering",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Systems_analysis",
        "https://en.wikipedia.org/wiki/Formal_methods",
        "https://en.wikipedia.org/wiki/Data_modeling",
        "https://en.wikipedia.org/wiki/Enterprise_architecture",
        "https://en.wikipedia.org/wiki/Functional_specification",
        "https://en.wikipedia.org/wiki/Modeling_language",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Software_archaeology",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Software_quality",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_verification_and_validation",
        "https://en.wikipedia.org/wiki/Structured_analysis",
        "https://en.wikipedia.org/wiki/Essential_Systems_Analysis",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Systems_development_life_cycle",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Enterprise_Unified_Process",
        "https://en.wikipedia.org/wiki/Executable_UML",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/Data_model",
        "https://en.wikipedia.org/wiki/Function_model",
        "https://en.wikipedia.org/wiki/Information_model",
        "https://en.wikipedia.org/wiki/Metamodeling",
        "https://en.wikipedia.org/wiki/Object_model",
        "https://en.wikipedia.org/wiki/Systems_modeling",
        "https://en.wikipedia.org/wiki/View_model",
        "https://en.wikipedia.org/wiki/IDEF",
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Universal_Systems_Language",
        "https://en.wikipedia.org/wiki/Systems_Modeling_Language",
        "https://en.wikipedia.org/wiki/Computer_science",
        "https://en.wikipedia.org/wiki/Computer_engineering",
        "https://en.wikipedia.org/wiki/Information_science",
        "https://en.wikipedia.org/wiki/Project_management",
        "https://en.wikipedia.org/wiki/Risk_management",
        "https://en.wikipedia.org/wiki/Systems_engineering",
        "https://en.wikipedia.org/wiki/Go_To_Statement_Considered_Harmful",
        "https://en.wikipedia.org/wiki/On_the_Cruelty_of_Really_Teaching_Computer_Science",
        "https://en.wikipedia.org/wiki/EWDs",
        "https://en.wikipedia.org/wiki/Theoretical_computer_science",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Systems_science",
        "https://en.wikipedia.org/wiki/Algorithm_design",
        "https://en.wikipedia.org/wiki/Concurrent_computing",
        "https://en.wikipedia.org/wiki/Distributed_computing",
        "https://en.wikipedia.org/wiki/Formal_methods",
        "https://en.wikipedia.org/wiki/Programming_methodology",
        "https://en.wikipedia.org/wiki/Programming_language_research",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Philosophy_of_computer_science",
        "https://en.wikipedia.org/wiki/ALGOL_60",
        "https://en.wikipedia.org/wiki/Compiler",
        "https://en.wikipedia.org/wiki/Call_stack",
        "https://en.wikipedia.org/wiki/Concurrent_programming",
        "https://en.wikipedia.org/wiki/Cooperating_sequential_processes",
        "https://en.wikipedia.org/wiki/Critical_section",
        "https://en.wikipedia.org/wiki/Deadly_embrace",
        "https://en.wikipedia.org/wiki/Deadlock",
        "https://en.wikipedia.org/wiki/Dining_philosophers_problem",
        "https://en.wikipedia.org/wiki/Dutch_national_flag_problem",
        "https://en.wikipedia.org/wiki/Guarded_Command_Language",
        "https://en.wikipedia.org/wiki/Abstraction_layer",
        "https://en.wikipedia.org/wiki/Abstraction_layer",
        "https://en.wikipedia.org/wiki/Multithreaded_programming",
        "https://en.wikipedia.org/wiki/Mutual_exclusion",
        "https://en.wikipedia.org/wiki/Mutex",
        "https://en.wikipedia.org/wiki/Bounded_buffer_problem",
        "https://en.wikipedia.org/wiki/Software_product_line",
        "https://en.wikipedia.org/wiki/Predicate_transformer_semantics",
        "https://en.wikipedia.org/wiki/Separation_of_concerns",
        "https://en.wikipedia.org/wiki/Sleeping_barber_problem",
        "https://en.wikipedia.org/wiki/Software_crisis",
        "https://en.wikipedia.org/wiki/Structured_analysis",
        "https://en.wikipedia.org/wiki/Structured_programming",
        "https://en.wikipedia.org/wiki/THE_multiprogramming_system",
        "https://en.wikipedia.org/wiki/Unbounded_nondeterminism",
        "https://en.wikipedia.org/wiki/Weakest_precondition_calculus",
        "https://en.wikipedia.org/wiki/DJP_algorithm",
        "https://en.wikipedia.org/wiki/Smoothsort",
        "https://en.wikipedia.org/wiki/Concurrent_algorithm",
        "https://en.wikipedia.org/wiki/Distributed_algorithm",
        "https://en.wikipedia.org/wiki/Deadlock_prevention_algorithms",
        "https://en.wikipedia.org/wiki/Mutual_exclusion",
        "https://en.wikipedia.org/wiki/Shlomi_Dolev",
        "https://en.wikipedia.org/wiki/Per_Brinch_Hansen",
        "https://en.wikipedia.org/wiki/Tony_Hoare",
        "https://en.wikipedia.org/wiki/Leslie_Lamport",
        "https://en.wikipedia.org/wiki/David_Parnas",
        "https://en.wikipedia.org/wiki/Adriaan_van_Wijngaarden",
        "https://en.wikipedia.org/wiki/Niklaus_Wirth",
        "https://en.wikipedia.org/wiki/Electrologica_X1",
        "https://en.wikipedia.org/wiki/Electrologica_X8",
        "https://en.wikipedia.org/wiki/Dijkstra_Prize",
        "https://en.wikipedia.org/wiki/University_of_Texas_at_Austin",
        "https://en.wikipedia.org/wiki/List_of_important_publications_in_computer_science",
        "https://en.wikipedia.org/wiki/List_of_important_publications_in_theoretical_computer_science",
        "https://en.wikipedia.org/wiki/List_of_pioneers_in_computer_science",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}