{
    "url": "https://en.wikipedia.org/wiki/Software_project_management",
    "title": "Software project management",
    "table_of_contents": [
        "1 History",
        "2 Software development process",
        "3 Project planning, execution, monitoring and control",
        "4 Issue",
        "4.1 Severity levels",
        "4.2 Issue management",
        "5 Philosophy",
        "6 References",
        "7 External links",
        "7.1 Project failure"
    ],
    "content": [
        {
            "paragraph1": "Software project management is an art and science of planning and leading software projects. It is a sub-discipline of project management in which software projects are planned, implemented, monitored and controlled.\n"
        },
        {
            "title": "History",
            "paragraph1": "In the 1970s and 1980s, the software industry grew very quickly, as computer companies quickly recognized the relatively low cost of software production compared to hardware production and circuitry. To manage new development efforts, companies applied the established project management methods, but project schedules slipped during test runs, especially when confusion occurred in the gray zone between the user specifications and the delivered software. To be able to avoid these problems, software project management methods focused on matching user requirements to delivered products, in a method known now as the waterfall model.\n",
            "paragraph2": "As the industry has matured, analysis of software project management failures has shown that the following are the most common causes:\n",
            "ol1": "1 - Insufficient end-user involvement\n2 - Poor communication among customers, developers, users and project managers\n3 - Unrealistic or unarticulated project goals\n4 - Inaccurate estimates of needed resources\n5 - Badly defined or incomplete system requirements and specifications\n6 - Poor reporting of the project's status\n7 - Poorly managed risks\n8 - Use of immature technology\n9 - Inability to handle the project's complexity\n10 - Sloppy development practices\n11 - Stakeholder politics (e.g. absence of executive support, or politics between the customer and end-users)\n12 - Commercial pressures\n",
            "paragraph3": "The first five items in the list above show the difficulties articulating the needs of the client in such a way that proper resources can deliver the proper project goals. Specific software project management tools are useful and often necessary, but the true art in software project management is applying the correct method and then using tools to support the method. Without a method, tools are worthless. Since the 1960s, several proprietary software project management methods have been developed by software manufacturers for their own use, while computer consulting firms have also developed similar methods for their clients. Today software project management methods are still evolving, but the current trend leads away from the waterfall model to a more cyclic project delivery model that imitates a software development process.\n"
        },
        {
            "title": "Software development process",
            "paragraph1": "A software development process is concerned primarily with the production aspect of software development, as opposed to the technical aspect, such as software tools. These processes exist primarily for supporting the management of software development, and are generally skewed toward addressing business concerns. Many software development processes can be run in a similar way to general project management processes. Examples are:\n",
            "ul1": "Interpersonal communication and conflict management and resolution. Active, frequent and honest communication is the most important factor in increasing the likelihood of project success and mitigating problematic projects. The development team should seek end-user involvement and encourage user input in the development process. Not having users involved can lead to misinterpretation of requirements, insensitivity to changing customer needs, and unrealistic expectations on the part of the client. Software developers, users, project managers, customers and project sponsors need to communicate regularly and  frequently. The information gained from these discussions allows the project team to analyze the strengths, weaknesses, opportunities and threats (SWOT) and to act on that information to benefit from opportunities and to minimize threats. Even bad news may be good if it is communicated relatively early, because problems can be mitigated if they are not discovered too late. For example, casual conversation with users, team members, and other stakeholders may often surface potential problems sooner than formal meetings. All communications need to be intellectually honest and authentic, and regular, frequent, high quality criticism of development work is necessary, as long as it is provided in a calm, respectful, constructive, non-accusatory, non-angry fashion. Frequent casual communications between developers and end-users, and between project managers and clients, are necessary to keep the project relevant, useful and effective for the end-users, and within the bounds of what can be completed. Effective interpersonal communication and conflict management and resolution are the key to software project management. No methodology or process improvement strategy can overcome serious problems in communication or mismanagement of interpersonal conflict. Moreover, outcomes associated with such methodologies and process improvement strategies are enhanced with better communication. The communication must focus on whether the team understands the project charter and whether the team is making progress towards that goal. End-users, software developers and project managers must frequently ask the elementary, simple questions that help identify problems before they fester into near-disasters. While end-user participation, effective communication and teamwork are not sufficient, they are necessary to ensure a good outcome, and their absence will almost surely lead to a bad outcome.[3][4][5]\nRisk management is the process of measuring or assessing risk and then developing strategies to manage the risk. In general, the strategies employed include transferring the risk to another party, avoiding the risk, reducing the negative effect of the risk, and accepting some or all of the consequences of a particular risk. Risk management in software project management begins with the business case for starting the project, which includes a cost-benefit analysis as well as a list of fallback options for project failure, called a contingency plan.\nA subset of risk management is Opportunity Management, which means the same thing, except that the potential risk outcome will have a positive, rather than a negative impact. Though theoretically handled in the same way, using the term \"opportunity\" rather than the somewhat negative term \"risk\" helps to keep a team focused on possible positive outcomes of any given risk register in their projects, such as spin-off projects, windfalls, and free extra resources.\nA subset of risk management is Opportunity Management, which means the same thing, except that the potential risk outcome will have a positive, rather than a negative impact. Though theoretically handled in the same way, using the term \"opportunity\" rather than the somewhat negative term \"risk\" helps to keep a team focused on possible positive outcomes of any given risk register in their projects, such as spin-off projects, windfalls, and free extra resources.\nRequirements management is the process of identifying, eliciting, documenting, analyzing, tracing, prioritizing and agreeing on requirements and then controlling change and communicating to relevant stakeholders. New or altered computer system[1] Requirements management, which includes Requirements analysis, is an important part of the software engineering process; whereby business analysts or software developers identify the needs or requirements of a client; having identified these requirements they are then in a position to design a solution.\nChange management is the process of identifying, documenting, analyzing, prioritizing and agreeing on changes to scope (project management) and then controlling changes and communicating to relevant stakeholders. Change impact analysis of new or altered scope, which includes Requirements analysis at the change level, is an important part of the software engineering process; whereby business analysts or software developers identify the altered needs or requirements of a client; having identified these requirements they are then in a position to re-design or modify a solution. Theoretically, each change can impact the timeline and budget of a software project, and therefore by definition must include risk-benefit analysis before approval.\nSoftware configuration management is the process of identifying, and documenting the scope itself, which is the software product underway, including all sub-products and changes and enabling communication of these to relevant stakeholders.  In general, the processes employed include version control, naming convention (programming), and software archival agreements.\nRelease management is the process of identifying, documenting, prioritizing and agreeing on releases of software and then controlling the release schedule and communicating to relevant stakeholders. Most software projects have access to three software environments to which software can be released; Development, Test, and Production. In very large projects, where distributed teams need to integrate their work before releasing to users, there will often be more environments for testing, called unit testing, system testing, or integration testing, before release to User acceptance testing (UAT).\nA subset of release management that is gaining attention is Data Management, as obviously the users can only test based on data that they know, and \"real\" data is only in the software environment called \"production\". In order to test their work, programmers must therefore also often create \"dummy data\" or \"data stubs\". Traditionally, older versions of a production system were once used for this purpose, but as companies rely more and more on outside contributors for software development, company data may not be released to development teams. In complex environments, datasets may be created that are then migrated across test environments according to a test release schedule, much like the overall software release schedule.\nA subset of release management that is gaining attention is Data Management, as obviously the users can only test based on data that they know, and \"real\" data is only in the software environment called \"production\". In order to test their work, programmers must therefore also often create \"dummy data\" or \"data stubs\". Traditionally, older versions of a production system were once used for this purpose, but as companies rely more and more on outside contributors for software development, company data may not be released to development teams. In complex environments, datasets may be created that are then migrated across test environments according to a test release schedule, much like the overall software release schedule.\nMaintenance and update is the process where Requirements and customer needs are always involving. They will undoubtedly find bugs, may request new features and ask for different functionality and more updates. So, all of these requests need to check and fulfill the customer's requirements and satisfaction.\n"
        },
        {
            "title": "Project planning, execution, monitoring and control",
            "paragraph1": "The purpose of project planning is to identify the scope of the project, estimate the work involved, and create a project schedule. Project planning begins with requirements that define the software to be developed. The project plan is then developed to describe the tasks that will lead to completion. The project execution is the process of completing the tasks defined in the project plan.\n",
            "paragraph2": "The purpose of project monitoring and control is to keep the team and management up to date on the project's progress. If the project deviates from the plan, then the project manager can take action to correct the problem. Project monitoring and control involves status meetings to gather status from the team. When changes need to be made, change control is used to keep the products up to date.\n"
        },
        {
            "title": "Issue",
            "paragraph1": "In computing, the term \"issue\" is a unit of work to accomplish an improvement in a system.[citation needed]  An issue could be a bug, a requested feature, task, missing documentation, and so forth.\n",
            "paragraph2": "For example, OpenOffice.org used to call their modified version of Bugzilla IssueZilla. As of September 2010, they call their system Issue Tracker.[needs update]\n",
            "subtitle1": "Severity levels",
            "paragraph3": "Issues are often categorized in terms of severity levels. Different companies have different definitions of severities, but some of the most common ones are:\n",
            "subtitle2": "Issue management",
            "paragraph4": "In many software companies,[which?] issues are often investigated by quality assurance analysts when they verify a system for correctness, and then assigned to the developer(s) that are responsible for resolving them. They can also be assigned by system users during the User Acceptance Testing (UAT) phase.\n",
            "paragraph5": "Issues are communicated using Issue or Defect Tracking Systems. In some other cases,[example  needed] emails or instant messengers are used.\n"
        },
        {
            "title": "Philosophy",
            "paragraph1": "As a subdiscipline of project management, some regard the management of software development akin to the management of manufacturing, which can be performed by someone with management skills, but no programming skills. John C. Reynolds rebuts this view, and argues that software development is entirely design work, and compares a manager who cannot program to the managing editor of a newspaper who cannot write.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/IEEE",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_test_documentation",
        "https://en.wikipedia.org/wiki/Software_test_documentation",
        "https://en.wikipedia.org/wiki/Software_requirements_specification",
        "https://en.wikipedia.org/wiki/Software_requirements_specification",
        "https://en.wikipedia.org/wiki/Software_verification_and_validation",
        "https://en.wikipedia.org/wiki/Software_verification_and_validation",
        "https://en.wikipedia.org/wiki/Software_design_description",
        "https://en.wikipedia.org/wiki/Software_design_description",
        "https://en.wikipedia.org/wiki/Software_user_documentation",
        "https://en.wikipedia.org/wiki/Software_user_documentation",
        "https://en.wikipedia.org/wiki/Software_reviews_and_audit",
        "https://en.wikipedia.org/wiki/Software_reviews_and_audit",
        "https://en.wikipedia.org/wiki/Project_management",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Software_industry",
        "https://en.wikipedia.org/wiki/Project_slippage",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Project_manager",
        "https://en.wikipedia.org/wiki/Project_stakeholders",
        "https://en.wikipedia.org/wiki/Project_management_software",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_tools",
        "https://en.wikipedia.org/wiki/Interpersonal_communication",
        "https://en.wikipedia.org/wiki/Project_sponsor",
        "https://en.wikipedia.org/wiki/Project_team",
        "https://en.wikipedia.org/wiki/Intellectual_honesty",
        "https://en.wikipedia.org/wiki/Project_charter",
        "https://en.wikipedia.org/wiki/Question",
        "https://en.wikipedia.org/wiki/Management_by_wandering_around",
        "https://en.wikipedia.org/wiki/Teamwork",
        "https://en.wikipedia.org/wiki/Risk_management",
        "https://en.wikipedia.org/wiki/Risk_assessment",
        "https://en.wikipedia.org/wiki/Business_case",
        "https://en.wikipedia.org/wiki/Contingency_plan",
        "https://en.wikipedia.org/wiki/Opportunity_Management",
        "https://en.wikipedia.org/wiki/Risk_register",
        "https://en.wikipedia.org/wiki/Requirements_management",
        "https://en.wikipedia.org/wiki/Requirements_elicitation",
        "https://en.wikipedia.org/wiki/Requirements_traceability",
        "https://en.wikipedia.org/wiki/Computer_system",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Software_developers",
        "https://en.wikipedia.org/wiki/Change_management",
        "https://en.wikipedia.org/wiki/Change_impact_analysis",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Software_developers",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Version_control",
        "https://en.wikipedia.org/wiki/Release_management",
        "https://en.wikipedia.org/wiki/Unit_testing",
        "https://en.wikipedia.org/wiki/System_testing",
        "https://en.wikipedia.org/wiki/Integration_testing",
        "https://en.wikipedia.org/wiki/User_acceptance_testing",
        "https://en.wikipedia.org/wiki/Data_Management",
        "https://en.wikipedia.org/wiki/Project_planning",
        "https://en.wikipedia.org/wiki/Estimation_in_software_engineering",
        "https://en.wikipedia.org/wiki/Gantt_chart",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Project_plan",
        "https://en.wikipedia.org/wiki/Change_control",
        "https://en.wikipedia.org/wiki/Software_feature",
        "https://en.wikipedia.org/wiki/Documentation",
        "https://en.wikipedia.org/wiki/Bugzilla",
        "https://en.wikipedia.org/wiki/Quality_assurance",
        "https://en.wikipedia.org/wiki/Acceptance_testing",
        "https://en.wikipedia.org/wiki/Issue_tracking_system",
        "https://en.wikipedia.org/wiki/Instant_messenger",
        "https://en.wikipedia.org/wiki/Manufacturing",
        "https://en.wikipedia.org/wiki/Design",
        "https://en.wikipedia.org/wiki/Management",
        "https://en.wikipedia.org/wiki/Programmer",
        "https://en.wikipedia.org/wiki/Managing_editor",
        "https://en.wikipedia.org/wiki/Newspaper",
        "https://en.wikipedia.org/wiki/Write",
        "https://en.wikipedia.org/wiki/IEEE_Spectrum",
        "https://en.wikipedia.org/wiki/Vicki_Sauter",
        "https://en.wikipedia.org/wiki/IEEE_Technology_Management_Council",
        "https://en.wikipedia.org/wiki/Philip_Greenspun",
        "https://en.wikipedia.org/wiki/Founders_at_Work",
        "https://en.wikipedia.org/wiki/SIGPLAN",
        "https://en.wikipedia.org/wiki/Murali_Chemuturi",
        "https://en.wikipedia.org/wiki/Dan_Galorath",
        "https://en.wikipedia.org/wiki/Software_project_management",
        "https://en.wikipedia.org/wiki/Software_project_management",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}