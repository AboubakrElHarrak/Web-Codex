{
    "url": "https://en.wikipedia.org/wiki/General_video_game_playing",
    "title": "General game playing",
    "table_of_contents": [
        "1 History",
        "2 GGP implementations",
        "2.1 Stanford project",
        "2.2 Other approaches",
        "3 GVGP implementations",
        "3.1 Reinforcement learning",
        "3.2 Video Game Description Language",
        "4 Algorithms",
        "4.1 Assumptions",
        "5 See also",
        "6 References",
        "7 External links",
        "7.1 Video"
    ],
    "content": [
        {
            "paragraph1": "General game playing (GGP) is the design of artificial intelligence programs to be able to play more than one game successfully. For many games like chess, computers are programmed to play these games using a specially designed algorithm, which cannot be transferred to another context. For instance, a chess-playing computer program cannot play checkers. General game playing is considered as a necessary milestone on the way to artificial general intelligence.\n",
            "paragraph2": "General video game playing  (GVGP) is the concept of GGP adjusted to the purpose of playing video games. For video games, game rules have to be either learnt over multiple iterations by artificial players like TD-Gammon, or are predefined manually in a domain-specific language and sent in advance to artificial players like in traditional GGP. Starting in 2013, significant progress was made following the deep reinforcement learning approach, including the development of programs that can learn to play Atari 2600 games as well as a program that can learn to play Nintendo Entertainment System games.\n",
            "paragraph3": "The first commercial usage of general game playing technology was Zillions of Games in 1998. General game playing was also proposed for trading agents in supply chain management thereunder price negotiation in online auctions from 2003 on.\n"
        },
        {
            "title": "History",
            "paragraph1": "In 1992, Barney Pell defined the concept of Meta-Game Playing, and developed the \"MetaGame\" system. This was the first program to automatically generate game rules of chess-like games, and one of the earliest programs to use automated game generation.  Pell then developed the system Metagamer. This system was able to play a number of chess-like games, given game rules definition in a special language called Game Description Language (GDL), without any human interaction once the games were generated.\n",
            "paragraph2": "In 1998, the commercial system Zillions of Games was developed by Jeff Mallett and Mark Lefler. The system used a LISP-like language to define the game rules. Zillions of Games derived the evaluation function automatically from the game rules based on piece mobility, board structure and game goals. It also employed usual algorithms as found in computer chess systems: alpha-beta pruning with move ordering, transposition tables, etc.  The package was extended in 2007 by the addition of the Axiom plug-in, an alternate metagame engine that incorporates a complete Forth-based programming language.\n",
            "paragraph3": "In 1998, z-Tree was developed by Urs Fischbacher. z-Tree is the first and the most cited software tool for experimental economics. z-Tree allows the definition of game rules in z-Tree-language for game-theoretic experiments with human subjects. It also allows definition of computer players, which participate in a play with human subjects.\n",
            "paragraph4": "In 2005, the Stanford Project General Game Playing was established.\n",
            "paragraph5": "In 2012, the development of PyVGDL started.\n"
        },
        {
            "title": "GGP implementations",
            "subtitle1": "Stanford project",
            "paragraph1": "General Game Playing is a project of the Stanford Logic Group of Stanford University, California, which aims to create a platform for general game playing. It is the most well-known effort at standardizing GGP AI, and generally seen as the standard for GGP systems. The games are defined by sets of rules represented in the Game Description Language. In order to play the games, players interact with a game hosting server that monitors moves for legality and keeps players informed of state changes.\n",
            "paragraph2": "Since 2005, there have been annual General Game Playing competitions at the AAAI Conference. The competition judges competitor AI's abilities to play a variety of different games, by recording their performance on each individual game. In the first stage of the competition, entrants are judged on their ability to perform legal moves, gain the upper hand, and complete games faster. In the following runoff round, the AIs face off against each other in increasingly complex games. The AI that wins the most games at this stage wins the competition, and until 2013 its creator used to win a $10,000 prize. So far, the following programs were victorious:\n",
            "subtitle2": "Other approaches",
            "paragraph3": "There are other general game playing systems, which use their own languages for defining the game rules. Other general game playing software include:\n"
        },
        {
            "title": "GVGP implementations",
            "subtitle1": "Reinforcement learning",
            "paragraph1": "GVGP could potentially be used to create real video game AI automatically, as well as \"to test game environments, including those created automatically using procedural content generation and to find potential loopholes in the gameplay that a human player could exploit\". GVGP has also been used to generate game rules, and estimate a game's quality based on Relative Algorithm Performance Profiles (RAPP), which compare the skill differentiation that a game allows between good AI and bad AI.\n",
            "subtitle2": "Video Game Description Language",
            "paragraph2": "The General Video Game AI Competition (GVGAI) has been running since 2014. In this competition, two-dimensional video games similar to (and sometimes based on) 1980s-era arcade and console games are used instead of the board games used in the GGP competition. It has offered a way for researchers and practitioners to test and compare their best general video game playing algorithms. The competition has an associated software framework including a large number of games written in the Video Game Description Language (VGDL), which should not be confused with GDL and is a coding language using simple semantics and commands that can easily be parsed. One example for VGDL is PyVGDL developed in 2013. The games used in GVGP are, for now, often 2-dimensional arcade games, as they are the simplest and easiest to quantify. To simplify the process of creating an AI that can interpret video games, games for this purpose are written in VGDL manually. VGDL can be used to describe a game specifically for procedural generation of levels, using Answer Set Programming (ASP) and an Evolutionary Algorithm (EA). GVGP can then be used to test the validity of procedural levels, as well as the difficulty or quality of levels based on how an agent performed.\n"
        },
        {
            "title": "Algorithms",
            "paragraph1": "Since GGP AI must be designed to play multiple games, its design cannot rely on algorithms created specifically for certain games. Instead, the AI must be designed using algorithms whose methods can be applied to a wide range of games. The AI must also be an ongoing process, that can adapt to its current state rather than the output of previous states. For this reason, open loop techniques are often most effective.\n",
            "paragraph2": "A popular method for developing GGP AI is the Monte Carlo tree search (MCTS) algorithm. Often used together with the UCT method (Upper Confidence Bound applied to Trees), variations of MCTS have been proposed to better play certain games, as well as to make it compatible with video game playing. Another variation of tree-search algorithms used is the Directed Breadth-first Search (DBS), in which a child node to the current state is created for each available action, and visits each child ordered by highest average reward, until either the game ends or runs out of time. In each tree-search method, the AI simulates potential actions and ranks each based on the average highest reward of each path, in terms of points earned.\n",
            "subtitle1": "Assumptions",
            "paragraph3": "In order to interact with games, algorithms must operate under the assumption that games all share common characteristics. In the book Half-Real: Video Games Between Real Worlds and Fictional Worlds, Jesper Juul gives the following definition of games: Games are based on rules, they have variable outcomes, different outcomes give different values, player effort influences outcomes, the player is attached to the outcomes, and the game has negotiable consequences.  Using these assumptions, game playing AI can be created by quantifying the player input, the game outcomes, and how the various rules apply, and using algorithms to compute the most favorable path.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Outline_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Artificial_general_intelligence",
        "https://en.wikipedia.org/wiki/Automated_planning_and_scheduling",
        "https://en.wikipedia.org/wiki/Computer_vision",
        "https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning",
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Natural_language_processing",
        "https://en.wikipedia.org/wiki/Robotics",
        "https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Deep_learning",
        "https://en.wikipedia.org/wiki/Bayesian_network",
        "https://en.wikipedia.org/wiki/Evolutionary_algorithm",
        "https://en.wikipedia.org/wiki/Philosophy_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Chinese_room",
        "https://en.wikipedia.org/wiki/Friendly_artificial_intelligence",
        "https://en.wikipedia.org/wiki/AI_control_problem",
        "https://en.wikipedia.org/wiki/AI_takeover",
        "https://en.wikipedia.org/wiki/Ethics_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Existential_risk_from_artificial_general_intelligence",
        "https://en.wikipedia.org/wiki/Turing_test",
        "https://en.wikipedia.org/wiki/History_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Timeline_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Progress_in_artificial_intelligence",
        "https://en.wikipedia.org/wiki/AI_winter",
        "https://en.wikipedia.org/wiki/Applications_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/List_of_artificial_intelligence_projects",
        "https://en.wikipedia.org/wiki/List_of_programming_languages_for_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Artificial_intelligence",
        "https://en.wikipedia.org/wiki/Chess",
        "https://en.wikipedia.org/wiki/Draughts",
        "https://en.wikipedia.org/wiki/Artificial_general_intelligence",
        "https://en.wikipedia.org/wiki/Video_game",
        "https://en.wikipedia.org/wiki/Reinforcement_learning",
        "https://en.wikipedia.org/wiki/Deep_reinforcement_learning",
        "https://en.wikipedia.org/wiki/Atari_2600",
        "https://en.wikipedia.org/wiki/Nintendo_Entertainment_System",
        "https://en.wikipedia.org/wiki/Zillions_of_Games",
        "https://en.wikipedia.org/wiki/Algorithmic_trading",
        "https://en.wikipedia.org/wiki/Supply_chain_management",
        "https://en.wikipedia.org/wiki/Online_auctions",
        "https://en.wikipedia.org/wiki/Barney_Pell",
        "https://en.wikipedia.org/wiki/Game_Description_Language",
        "https://en.wikipedia.org/wiki/Zillions_of_Games",
        "https://en.wikipedia.org/wiki/Evaluation_function",
        "https://en.wikipedia.org/wiki/Computer_chess",
        "https://en.wikipedia.org/wiki/Transposition_table",
        "https://en.wikipedia.org/wiki/Urs_Fischbacher",
        "https://en.wikipedia.org/wiki/Behavioral_game_theory",
        "https://en.wikipedia.org/wiki/Stanford_University",
        "https://en.wikipedia.org/wiki/Game_Description_Language",
        "https://en.wikipedia.org/wiki/AAAI",
        "https://en.wikipedia.org/wiki/UCLA",
        "https://en.wikipedia.org/wiki/Dresden_University_of_Technology",
        "https://en.wikipedia.org/wiki/Reykjavik_University",
        "https://en.wikipedia.org/wiki/Reykjavik_University",
        "https://en.wikipedia.org/wiki/Paris_8_University",
        "https://en.wikipedia.org/wiki/Paris_8_University",
        "https://en.wikipedia.org/wiki/Reykjavik_University",
        "https://en.wikipedia.org/wiki/Artois_University",
        "https://en.wikipedia.org/wiki/Video_game_AI",
        "https://en.wikipedia.org/wiki/Game_Description_Language",
        "https://en.wikipedia.org/wiki/Monte_Carlo_tree_search",
        "https://en.wikipedia.org/wiki/AlphaZero",
        "https://en.wikipedia.org/wiki/MuZero",
        "https://en.wikipedia.org/wiki/Artificial_general_intelligence",
        "https://en.wikipedia.org/wiki/Artificial_intelligence_in_video_games",
        "https://en.wikipedia.org/wiki/Game_Description_Language",
        "https://en.wikipedia.org/wiki/Outline_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Transfer_learning",
        "https://en.wikipedia.org/wiki/Conference_on_Neural_Information_Processing_Systems",
        "https://en.wikipedia.org/wiki/University_of_Tartu",
        "https://en.wikipedia.org/wiki/Conference_on_Neural_Information_Processing_Systems",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/General_game_playing",
        "https://en.wikipedia.org/wiki/General_game_playing",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}