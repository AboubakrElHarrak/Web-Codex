{
    "url": "https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine",
    "title": "Restricted Boltzmann machine",
    "table_of_contents": [
        "1 Structure",
        "1.1 Relation to other models",
        "2 Training algorithm",
        "3 Literature",
        "4 See also",
        "5 References",
        "6 External links"
    ],
    "content": [
        {
            "image2": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Restricted_Boltzmann_machine.svg/440px-Restricted_Boltzmann_machine.svg.png",
                "caption": "\n\t\tDiagram of a restricted Boltzmann machine with three visible units and four hidden units (no bias units).\n\t"
            },
            "paragraph1": "A restricted Boltzmann machine (RBM) is a generative stochastic artificial neural network that can learn a probability distribution over its set of inputs.\n",
            "paragraph2": "RBMs were initially invented under the name Harmonium by Paul Smolensky in 1986,\nand rose to prominence after Geoffrey Hinton and collaborators invented fast learning algorithms for them in the mid-2000. RBMs have found applications in dimensionality reduction,\nclassification,\ncollaborative filtering, feature learning,\ntopic modelling\nand even many body quantum mechanics. They can be trained in either supervised or unsupervised ways, depending on the task.\n",
            "paragraph3": "As their name implies, RBMs are a variant of Boltzmann machines, with the restriction that their neurons must form a bipartite graph: \na pair of nodes from each of the two groups of units (commonly referred to as the \"visible\" and \"hidden\" units respectively) may have a symmetric connection between them; and there are no connections between nodes within a group. By contrast, \"unrestricted\" Boltzmann machines may have connections between hidden units. This restriction allows for more efficient training algorithms than are available for the general class of Boltzmann machines, in particular the gradient-based contrastive divergence algorithm.\n",
            "paragraph4": "Restricted Boltzmann machines can also be used in deep learning networks. In particular, deep belief networks can be formed by \"stacking\" RBMs and optionally fine-tuning the resulting deep network with gradient descent and backpropagation.\n"
        },
        {
            "title": "Structure",
            "paragraph1": "The standard type of RBM has binary-valued (Boolean) hidden and visible units, and consists of a matrix of weights \n\n\n\nW\n\n\n{\\displaystyle W}\n\n of size \n\n\n\nm\n×\nn\n\n\n{\\displaystyle m\\times n}\n\n. Each weight element \n\n\n\n(\n\nw\n\ni\n,\nj\n\n\n)\n\n\n{\\displaystyle (w_{i,j})}\n\n of the matrix is associated with the connection between the visible (input) unit \n\n\n\n\nv\n\ni\n\n\n\n\n{\\displaystyle v_{i))\n\n and the hidden unit \n\n\n\n\nh\n\nj\n\n\n\n\n{\\displaystyle h_{j))\n\n. In addition, there are bias weights (offsets) \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i))\n\n for \n\n\n\n\nv\n\ni\n\n\n\n\n{\\displaystyle v_{i))\n\n and \n\n\n\n\nb\n\nj\n\n\n\n\n{\\displaystyle b_{j))\n\n for \n\n\n\n\nh\n\nj\n\n\n\n\n{\\displaystyle h_{j))\n\n. Given the weights and biases, the energy of a configuration (pair of boolean vectors) (v,h) is defined as\n",
            "paragraph2": "or, in matrix notation,\n",
            "paragraph3": "This energy function is analogous to that of a Hopfield network. As with general Boltzmann machines, the joint probability distribution for the visible and hidden vectors is defined in terms of the energy function as follows,\n",
            "paragraph4": "where \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n is a partition function defined as the sum of \n\n\n\n\ne\n\n−\nE\n(\nv\n,\nh\n)\n\n\n\n\n{\\displaystyle e^{-E(v,h)))\n\n over all possible configurations, which can be interpreted as a normalizing constant to ensure that the probabilities sum to 1. The marginal probability of a visible vector is the sum of \n\n\n\nP\n(\nv\n,\nh\n)\n\n\n{\\displaystyle P(v,h)}\n\n over all possible hidden layer configurations,\n",
            "paragraph5": "and vice versa. Since the underlying graph structure of the RBM is bipartite (meaning there is no intra-layer connections), the hidden unit activations are mutually independent given the visible unit activations. Conversely, the visible unit activations are mutually independent given the hidden unit activations. That is, for m visible units and n hidden units, the conditional probability of a configuration of the visible units v, given a configuration of the hidden units h, is\n",
            "paragraph6": "Conversely, the conditional probability of h given v is\n",
            "paragraph7": "The individual activation probabilities are given by\n",
            "paragraph8": "where \n\n\n\nσ\n\n\n{\\displaystyle \\sigma }\n\n denotes the logistic sigmoid.\n",
            "paragraph9": "The visible units of Restricted Boltzmann Machine can be multinomial, although the hidden units are Bernoulli.[clarification needed] In this case, the logistic function for visible units is replaced by the softmax function\n",
            "paragraph10": "where K is the number of discrete values that the visible values have. They are applied in topic modeling, and recommender systems.\n",
            "subtitle1": "Relation to other models",
            "paragraph11": "Restricted Boltzmann machines are a special case of Boltzmann machines and Markov random fields.\nTheir graphical model corresponds to that of factor analysis.\n"
        },
        {
            "title": "Training algorithm",
            "paragraph1": "Restricted Boltzmann machines are trained to maximize the product of probabilities assigned to some training set \n\n\n\nV\n\n\n{\\displaystyle V}\n\n (a matrix, each row of which is treated as a visible vector \n\n\n\nv\n\n\n{\\displaystyle v}\n\n),\n",
            "paragraph2": "or equivalently, to maximize the expected log probability of a training sample \n\n\n\nv\n\n\n{\\displaystyle v}\n\n selected randomly from \n\n\n\nV\n\n\n{\\displaystyle V}\n\n:\n",
            "paragraph3": "The algorithm most often used to train RBMs, that is, to optimize the weight matrix \n\n\n\nW\n\n\n{\\displaystyle W}\n\n, is the contrastive divergence (CD) algorithm due to Hinton, originally developed to train PoE (product of experts) models.\nThe algorithm performs Gibbs sampling and is used inside a gradient descent procedure (similar to the way backpropagation is used inside such a procedure when training feedforward neural nets) to compute weight update.\n",
            "paragraph4": "The basic, single-step contrastive divergence (CD-1) procedure for a single sample can be summarized as follows:\n",
            "ol1": "1 - Take a training sample v, compute the probabilities of the hidden units and sample a hidden activation vector h from this probability distribution.\n2 - Compute the outer product of v and h and call this the positive gradient.\n3 - From h, sample a reconstruction v' of the visible units, then resample the hidden activations h' from this. (Gibbs sampling step)\n4 - Compute the outer product of v' and h' and call this the negative gradient.\n5 - Let the update to the weight matrix \n\n\n\nW\n\n\n{\\displaystyle W}\n\n be the positive gradient minus the negative gradient, times some learning rate: \n\n\n\nΔ\nW\n=\nϵ\n(\nv\n\nh\n\n\nT\n\n\n\n−\n\nv\n′\n\n\nh\n\n′\n\n\nT\n\n\n\n\n)\n\n\n{\\displaystyle \\Delta W=\\epsilon (vh^{\\mathsf {T))-v'h'^{\\mathsf {T)))}\n\n.\n6 - Update the biases a and b analogously: \n\n\n\nΔ\na\n=\nϵ\n(\nv\n−\n\nv\n′\n\n)\n\n\n{\\displaystyle \\Delta a=\\epsilon (v-v')}\n\n, \n\n\n\nΔ\nb\n=\nϵ\n(\nh\n−\n\nh\n′\n\n)\n\n\n{\\displaystyle \\Delta b=\\epsilon (h-h')}\n\n.\n",
            "paragraph5": "A Practical Guide to Training RBMs written by Hinton can be found on his homepage.\n"
        },
        {
            "title": "Literature",
            "ul1": "Fischer, Asja; Igel, Christian (2012), \"An Introduction to Restricted Boltzmann Machines\", Progress in Pattern Recognition, Image Analysis, Computer Vision, and Applications, Berlin, Heidelberg: Springer Berlin Heidelberg, pp. 14–36, retrieved 2021-09-19\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Data_mining",
        "https://en.wikipedia.org/wiki/Statistical_classification",
        "https://en.wikipedia.org/wiki/Cluster_analysis",
        "https://en.wikipedia.org/wiki/Regression_analysis",
        "https://en.wikipedia.org/wiki/Anomaly_detection",
        "https://en.wikipedia.org/wiki/Data_Cleaning",
        "https://en.wikipedia.org/wiki/Automated_machine_learning",
        "https://en.wikipedia.org/wiki/Association_rule_learning",
        "https://en.wikipedia.org/wiki/Reinforcement_learning",
        "https://en.wikipedia.org/wiki/Structured_prediction",
        "https://en.wikipedia.org/wiki/Feature_engineering",
        "https://en.wikipedia.org/wiki/Feature_learning",
        "https://en.wikipedia.org/wiki/Online_machine_learning",
        "https://en.wikipedia.org/wiki/Unsupervised_learning",
        "https://en.wikipedia.org/wiki/Learning_to_rank",
        "https://en.wikipedia.org/wiki/Grammar_induction",
        "https://en.wikipedia.org/wiki/Supervised_learning",
        "https://en.wikipedia.org/wiki/Statistical_classification",
        "https://en.wikipedia.org/wiki/Regression_analysis",
        "https://en.wikipedia.org/wiki/Decision_tree_learning",
        "https://en.wikipedia.org/wiki/Ensemble_learning",
        "https://en.wikipedia.org/wiki/Bootstrap_aggregating",
        "https://en.wikipedia.org/wiki/Random_forest",
        "https://en.wikipedia.org/wiki/Linear_regression",
        "https://en.wikipedia.org/wiki/Naive_Bayes_classifier",
        "https://en.wikipedia.org/wiki/Artificial_neural_network",
        "https://en.wikipedia.org/wiki/Logistic_regression",
        "https://en.wikipedia.org/wiki/Perceptron",
        "https://en.wikipedia.org/wiki/Relevance_vector_machine",
        "https://en.wikipedia.org/wiki/Cluster_analysis",
        "https://en.wikipedia.org/wiki/BIRCH",
        "https://en.wikipedia.org/wiki/CURE_algorithm",
        "https://en.wikipedia.org/wiki/Hierarchical_clustering",
        "https://en.wikipedia.org/wiki/DBSCAN",
        "https://en.wikipedia.org/wiki/OPTICS_algorithm",
        "https://en.wikipedia.org/wiki/Mean_shift",
        "https://en.wikipedia.org/wiki/Dimensionality_reduction",
        "https://en.wikipedia.org/wiki/Factor_analysis",
        "https://en.wikipedia.org/wiki/Canonical_correlation",
        "https://en.wikipedia.org/wiki/Independent_component_analysis",
        "https://en.wikipedia.org/wiki/Linear_discriminant_analysis",
        "https://en.wikipedia.org/wiki/Principal_component_analysis",
        "https://en.wikipedia.org/wiki/Proper_generalized_decomposition",
        "https://en.wikipedia.org/wiki/Structured_prediction",
        "https://en.wikipedia.org/wiki/Graphical_model",
        "https://en.wikipedia.org/wiki/Bayesian_network",
        "https://en.wikipedia.org/wiki/Conditional_random_field",
        "https://en.wikipedia.org/wiki/Hidden_Markov_model",
        "https://en.wikipedia.org/wiki/Anomaly_detection",
        "https://en.wikipedia.org/wiki/Local_outlier_factor",
        "https://en.wikipedia.org/wiki/Artificial_neural_network",
        "https://en.wikipedia.org/wiki/Autoencoder",
        "https://en.wikipedia.org/wiki/Cognitive_computing",
        "https://en.wikipedia.org/wiki/Deep_learning",
        "https://en.wikipedia.org/wiki/DeepDream",
        "https://en.wikipedia.org/wiki/Multilayer_perceptron",
        "https://en.wikipedia.org/wiki/Recurrent_neural_network",
        "https://en.wikipedia.org/wiki/Gated_recurrent_unit",
        "https://en.wikipedia.org/wiki/Echo_state_network",
        "https://en.wikipedia.org/wiki/Generative_adversarial_network",
        "https://en.wikipedia.org/wiki/Convolutional_neural_network",
        "https://en.wikipedia.org/wiki/Vision_transformer",
        "https://en.wikipedia.org/wiki/Spiking_neural_network",
        "https://en.wikipedia.org/wiki/Memtransistor",
        "https://en.wikipedia.org/wiki/Electrochemical_RAM",
        "https://en.wikipedia.org/wiki/Reinforcement_learning",
        "https://en.wikipedia.org/wiki/Temporal_difference_learning",
        "https://en.wikipedia.org/wiki/Kernel_machines",
        "https://en.wikipedia.org/wiki/Computational_learning_theory",
        "https://en.wikipedia.org/wiki/Empirical_risk_minimization",
        "https://en.wikipedia.org/wiki/Occam_learning",
        "https://en.wikipedia.org/wiki/Probably_approximately_correct_learning",
        "https://en.wikipedia.org/wiki/Statistical_learning_theory",
        "https://en.wikipedia.org/wiki/Conference_on_Neural_Information_Processing_Systems",
        "https://en.wikipedia.org/wiki/International_Conference_on_Machine_Learning",
        "https://en.wikipedia.org/wiki/Journal_of_Machine_Learning_Research",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Outline_of_machine_learning",
        "https://en.wikipedia.org/wiki/Generative_model",
        "https://en.wikipedia.org/wiki/Stochastic_neural_network",
        "https://en.wikipedia.org/wiki/Artificial_neural_network",
        "https://en.wikipedia.org/wiki/Probability_distribution",
        "https://en.wikipedia.org/wiki/Paul_Smolensky",
        "https://en.wikipedia.org/wiki/Geoffrey_Hinton",
        "https://en.wikipedia.org/wiki/Dimensionality_reduction",
        "https://en.wikipedia.org/wiki/Statistical_classification",
        "https://en.wikipedia.org/wiki/Collaborative_filtering",
        "https://en.wikipedia.org/wiki/Feature_learning",
        "https://en.wikipedia.org/wiki/Topic_model",
        "https://en.wikipedia.org/wiki/Supervised_learning",
        "https://en.wikipedia.org/wiki/Unsupervised_learning",
        "https://en.wikipedia.org/wiki/Boltzmann_machine",
        "https://en.wikipedia.org/wiki/Bipartite_graph",
        "https://en.wikipedia.org/wiki/Algorithms",
        "https://en.wikipedia.org/wiki/Gradient_descent",
        "https://en.wikipedia.org/wiki/Deep_learning",
        "https://en.wikipedia.org/wiki/Deep_belief_network",
        "https://en.wikipedia.org/wiki/Gradient_descent",
        "https://en.wikipedia.org/wiki/Backpropagation",
        "https://en.wikipedia.org/wiki/Boolean_algebra",
        "https://en.wikipedia.org/wiki/Hopfield_network",
        "https://en.wikipedia.org/wiki/Joint_probability_distribution",
        "https://en.wikipedia.org/wiki/Normalizing_constant",
        "https://en.wikipedia.org/wiki/Marginal_distribution",
        "https://en.wikipedia.org/wiki/Bipartite_graph",
        "https://en.wikipedia.org/wiki/Conditional_independence",
        "https://en.wikipedia.org/wiki/Conditional_probability",
        "https://en.wikipedia.org/wiki/Logistic_function",
        "https://en.wikipedia.org/wiki/Multinomial_distribution",
        "https://en.wikipedia.org/wiki/Bernoulli_distribution",
        "https://en.wikipedia.org/wiki/Softmax_function",
        "https://en.wikipedia.org/wiki/Recommender_system",
        "https://en.wikipedia.org/wiki/Boltzmann_machine",
        "https://en.wikipedia.org/wiki/Markov_random_field",
        "https://en.wikipedia.org/wiki/Graphical_model",
        "https://en.wikipedia.org/wiki/Factor_analysis",
        "https://en.wikipedia.org/wiki/Expected_value",
        "https://en.wikipedia.org/wiki/Log_probability",
        "https://en.wikipedia.org/wiki/Geoffrey_Hinton",
        "https://en.wikipedia.org/wiki/Product_of_experts",
        "https://en.wikipedia.org/wiki/Gibbs_sampling",
        "https://en.wikipedia.org/wiki/Gradient_descent",
        "https://en.wikipedia.org/wiki/Outer_product",
        "https://en.wikipedia.org/wiki/Outer_product",
        "https://en.wikipedia.org/wiki/Autoencoder",
        "https://en.wikipedia.org/wiki/Helmholtz_machine",
        "https://en.wikipedia.org/wiki/Connectionism",
        "https://en.wikipedia.org/wiki/Neural_Information_Processing_Systems",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Deeplearning4j",
        "https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine",
        "https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}