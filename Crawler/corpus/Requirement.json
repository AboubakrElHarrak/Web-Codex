{
    "url": "https://en.wikipedia.org/wiki/Requirement",
    "title": "Requirement",
    "table_of_contents": [
        "1 Origins of term",
        "2 Product versus process requirements",
        "3 Types of requirements",
        "4 Characteristics of good requirements",
        "4.1 Verification",
        "5 Documenting requirements",
        "6 Changes in requirements",
        "7 Issues",
        "7.1 Competing standards",
        "7.2 Disputes regarding the necessity and effects of software requirements",
        "7.3 Requirements creep",
        "7.4 Multiple requirements taxonomies",
        "7.5 Process corruptions",
        "8 See also",
        "9 References",
        "10 External links"
    ],
    "content": [
        {
            "paragraph1": "In product development and process optimization, a requirement is a singular documented physical or functional need that a particular design, product or process aims to satisfy. It is commonly used in a formal sense in engineering design, including for example in systems engineering, software engineering, or enterprise engineering. It is a broad concept that could speak to any necessary (or sometimes desired) function, attribute, capability, characteristic, or quality of a system for it to have value and utility to a customer, organization, internal user, or other stakeholder. \nRequirements can come with different levels of specificity; for example, a requirement specification or requirement \"spec\" (often imprecisely referred to as \"the\" spec/specs, but there are actually different sorts of specifications) refers to an explicit, highly objective/clear (and often quantitative) requirement (or sometimes, set of requirements) to be satisfied by a material, design, product, or service.\n",
            "paragraph2": "A set of requirements is used as inputs into the design stages of product development. Requirements are also an important input into the verification process, since tests should trace back to specific requirements. Requirements show what elements and functions are necessary for the particular project. When  iterative methods of software development or agile methods are used, the system requirements are incrementally developed in parallel with design and implementation. With the waterfall model requirements are developed before design and implementation.\n"
        },
        {
            "title": "Origins of term",
            "paragraph1": "The term requirement has been in use in the software engineering community since at least the 1960s.\n",
            "paragraph2": "According to the Guide to the Business Analysis Body of KnowledgeÂ® version 2 from IIBA (BABOK), a requirement is:\n",
            "ol1": "1 - A condition or capability needed by a stakeholder to solve a problem or achieve an objective.\n2 - A condition or capability that must be met or possessed by a solution or solution component to satisfy a contract, standard, specification, or other formally imposed documents.\n3 - A documented representation of a condition or capability as in (1) or (2).\n",
            "paragraph3": "This definition is based on  IEEE 610.12-1990: IEEE Standard Glossary of Software Engineering Terminology.\n"
        },
        {
            "title": "Product versus process requirements",
            "paragraph1": "Requirements can be said to relate to two fields:\n",
            "ul1": "Product requirements prescribe properties of a system or product.\nProcess requirements prescribe activities to be performed by the developing organization. For instance, process requirements could specify the methodologies that must be followed, and constraints that the organization must obey.\n",
            "paragraph2": "Product and process requirements are closely linked; a product requirement could be said to specify the automation required to support a process requirement while a process requirement could be said to specify the activities required to support a product requirement. For example, a maximum development cost requirement (a process requirement) may be imposed to help achieve a maximum sales price requirement (a product requirement); a requirement that the product be maintainable (a product requirement) often is addressed by imposing requirements to follow particular development styles (e.g., object-oriented programming), style-guides, or a review/inspection process (process requirements).\n"
        },
        {
            "title": "Types of requirements",
            "paragraph1": "Requirements are typically classified into types produced at different stages in a development progression, with the taxonomy depending on the overall model being used.  For example, the following scheme was devised by the International Institute of Business Analysis in their Business Analysis Body of Knowledge (see also FURPS and Types of requirements).\n"
        },
        {
            "title": "Characteristics of good requirements",
            "paragraph1": "The characteristics of good requirements are variously stated by different writers, with each writer generally emphasizing the characteristics most appropriate to their general discussion or the specific technology domain being addressed. However, the following characteristics are generally acknowledged.\n\n",
            "paragraph2": "There are many more attributes to consider that contribute to the quality of requirements.  If requirements are subject to rules of data integrity (for example) then accuracy/correctness and validity/authorization are also worthy attributes.  Traceability confirms that the requirement set satisfies the need (no more - and no less than what is required).\n",
            "paragraph3": "To the above some add Externally Observable, that is, the requirement specifies a characteristic of the product that is externally observable or experienced by the user. Such advocates argue that requirements that specify internal architecture, design, implementation, or testing decisions are probably constraints, and should be clearly articulated in the Constraints section of the Requirements document. The contrasting view is that this perspective fails on two points. First, the perspective does not recognize that the user experience may be supported by requirements not perceivable by the user. For example, a requirement to present geocoded information to the user may be supported by a requirement for an interface with an external third party business partner. The interface will be imperceptible to the user, though the presentation of information obtained through the interface certainly would not. Second, a constraint limits design alternatives, whereas a requirement specifies design characteristics. To continue the example, a requirement selecting a web service interface is different from a constraint limiting design alternatives to methods compatible with a Single Sign-On architecture.\n",
            "subtitle1": "Verification",
            "paragraph4": "All requirements should be verifiable. The most common method is by test. If this is not the case, another verification method should be used instead (e.g. analysis, demonstration, inspection, or review of design).\n",
            "paragraph5": "Certain requirements, by their very structure, are not verifiable. These include requirements that say the system must never or always exhibit a particular property. Proper testing of these requirements would require an infinite testing cycle. Such requirements must be rewritten to be verifiable. As stated above all requirements must be verifiable.\n",
            "paragraph6": "Non-functional requirements, which are unverifiable at the software level, must still be kept as a documentation of customer intent. However, they may be traced to process requirements that are determined to be a practical way of meeting them. For example, a non-functional requirement to be free from backdoors may be satisfied by replacing it with a process requirement to use pair programming. Other non-functional requirements will trace to other system components and be verified at that level. For example, system reliability is often verified by analysis at the system level. Avionics software with its complicated safety requirements must follow the DO-178B development process.\n",
            "paragraph7": "Activities that lead to the derivation of the system or software requirements. Requirements engineering may involve a feasibility study or a conceptual analysis phase of the project and requirements elicitation (gathering, understanding, reviewing, and articulating the needs of the stakeholders) and requirements analysis, analysis (checking for consistency and completeness), specification (documenting the requirements) and validation (making sure the specified requirements are correct).\n",
            "paragraph8": "Requirements are prone to issues of ambiguity, incompleteness, and inconsistency.  Techniques such as rigorous inspection have been shown to help deal with these issues.  Ambiguities, incompleteness, and inconsistencies that can be resolved in the requirements phase typically cost orders of magnitude less to correct than when these same issues are found in later stages of product development.  Requirements analysis strives to address these issues.\n",
            "paragraph9": "There is an engineering trade off to consider between requirements which are too vague, and those which are so detailed that they\n",
            "ol1": "1 - take a long time to produce - sometimes to the point of being obsolete once completed\n2 - limit the implementation options available\n3 - are costly to produce\n",
            "paragraph10": "Agile approaches evolved as a way of overcoming these problems, by baselining requirements at a high-level, and elaborating detail on a just-in-time or last responsible moment basis.\n"
        },
        {
            "title": "Documenting requirements",
            "paragraph1": "Requirements are usually written as a means for communication between the different stakeholders. This means that the requirements should be easy to understand both for normal users and for developers. One common way to document a requirement is stating what the system must do. Example: 'The contractor must deliver the product no later than xyz date.' Other methods include use cases and user stories.\n"
        },
        {
            "title": "Changes in requirements",
            "paragraph1": "Requirements generally change with time. Once defined and approved, requirements should fall under change control. For many projects, requirements are altered before the system is complete. This is partly due to the complexity of computer software and the fact that users don't know what they want before they see it. This characteristic of requirements has led to requirements management studies and practices.\n"
        },
        {
            "title": "Issues",
            "subtitle1": "Competing standards",
            "paragraph1": "There are several competing views of what requirements are and how they should be managed and used.  Two leading bodies in the industry are the IEEE and the IIBA.  Both of these groups have different but similar definitions of what a requirement is.\n",
            "subtitle2": "Disputes regarding the necessity and effects of software requirements",
            "paragraph2": "Many projects have succeeded with little or no agreement on requirements. Some evidence furthermore indicates that specifying requirements can decrease creativity and design performance  Requirements hinder creativity and design because designers become overly preoccupied with provided information. More generally, some research suggests that software requirements are an illusion created by misrepresenting design decisions as requirements in situations where no real requirements are evident.\n",
            "paragraph3": "Meanwhile, most agile software development methodologies question the need for rigorously describing software requirements upfront, which they consider a moving target. Instead, extreme programming for example describes requirements informally using user stories (short summaries fitting on an index card explaining one aspect of what the system should do), and considers it the developer's duty to directly ask the customer for clarification. Agile methodologies attempt to capture requirements in a series of automated acceptance tests.\n",
            "subtitle3": "Requirements creep",
            "paragraph4": "Scope creep may occur from requirements moving over time.  In Requirements management the alteration of requirements is allowed but if not adequately tracked or preceding steps (business goals then user requirements) are not throttled by additional oversight or handled as a cost and potential program failure, then requirements changes are easy and likely to happen.  It is easy for requirement changes to occur faster than developers are able to produce work, and the effort to go backwards as a result.\n",
            "subtitle4": "Multiple requirements taxonomies",
            "paragraph5": "There are multiple taxonomies for requirements depending on which framework one is operating under.  (For example, the stated standards of IEEE, vice IIBA or U.S. DoD approaches).  Differing language and processes in different venues or casual speech can cause confusion and deviation from desired process.\n",
            "subtitle5": "Process corruptions",
            "paragraph6": "A process being run by humans is subject to human flaws in governance, where convenience or desires or politics may lead to exceptions or outright subversion of the process and deviations from the textbook way the process is supposed to proceed.  Examples include:\n",
            "ul1": "Process with no rigor gets no respect - If exceptions or changes are common, such as the organization running it having little independence or power or not being reliable and transparent in records, it may lead to the overall process being ignored.\nNew players wanting a do-over - e.g., The natural tendency of new people to want to change their predecessor's work to demonstrate their power or claims of value, such as a new CEO wanting to change the previous CEO's planning, including business goals, of something (such as a software solution) already in development, or a newly created office objects to current development of a project because they did not exist when user requirements were crafted, so they begin an effort to backtrack and re-baseline the project.\nColoring outside the lines - e.g., Users wanting more control do not just input things that meet the requirements management definition of \"user requirement\" or priority level, but insert design details or favored vendor characteristic as user requirements or everything their office says as the highest possible priority.\nShowing up late - e.g., Doing little or no effort in requirements elicitation prior to development.  This may be due to thinking they will get the same benefit regardless of individual participation, or that there is no point if they can just insert demands at the testing stage and next spin, or the preference to be always right by waiting for post-work critique.\n",
            "paragraph7": "Within the U.S. Department of Defense process, some historical examples of requirements issues are\n",
            "ul2": "the M-2 Bradley issues of casual requirements movement portrayed in Pentagon Wars;\nthe F-16 growth from lightweight fighter concept of the Fighter mafia, attributed to F-15 program attempting to sabotage competition or individual offices putting in local desires eroding the concept of being lightweight and low cost.\nenthusiasm ca. 1998 for 'Net-Ready' led to its mandate as Key Performance Parameter from the Net-Ready office, outside the office defining requirements process and not consistent to that office's previously defined process, their definition of what a KPP was, or that some efforts might not be appropriate or able to define what constituted 'Net-Ready'.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Need",
        "https://en.wikipedia.org/wiki/Obligation",
        "https://en.wikipedia.org/wiki/Intelligence_requirement",
        "https://en.wikipedia.org/wiki/Spanish_Requirement_of_1513",
        "https://en.wikipedia.org/wiki/New_product_development",
        "https://en.wikipedia.org/wiki/Process_optimization",
        "https://en.wikipedia.org/wiki/Engineering_design",
        "https://en.wikipedia.org/wiki/Systems_engineering",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Enterprise_engineering",
        "https://en.wikipedia.org/wiki/Specification",
        "https://en.wikipedia.org/wiki/New_product_development",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/A_Guide_to_the_Business_Analysis_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/International_Institute_of_Business_Analysis",
        "https://en.wikipedia.org/wiki/A_Guide_to_the_Business_Analysis_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/FURPS",
        "https://en.wikipedia.org/wiki/Systems_architecture",
        "https://en.wikipedia.org/wiki/Structure",
        "https://en.wikipedia.org/wiki/Behavior",
        "https://en.wikipedia.org/wiki/Systems_architecture",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Architecturally_Significant_Requirements",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Business_requirements",
        "https://en.wikipedia.org/wiki/Business_case",
        "https://en.wikipedia.org/wiki/User_requirements_document",
        "https://en.wikipedia.org/wiki/Functional_requirements",
        "https://en.wikipedia.org/wiki/Ilities",
        "https://en.wikipedia.org/wiki/Implementation",
        "https://en.wikipedia.org/wiki/Regulation",
        "https://en.wikipedia.org/wiki/Law",
        "https://en.wikipedia.org/wiki/Contract",
        "https://en.wikipedia.org/wiki/Policy",
        "https://en.wikipedia.org/wiki/Consistency",
        "https://en.wikipedia.org/wiki/Traceability",
        "https://en.wikipedia.org/wiki/Unambiguous",
        "https://en.wikipedia.org/wiki/Technical_jargon",
        "https://en.wikipedia.org/wiki/Acronym",
        "https://en.wikipedia.org/wiki/Verification_and_validation",
        "https://en.wikipedia.org/wiki/Data_integrity",
        "https://en.wikipedia.org/wiki/Traceability",
        "https://en.wikipedia.org/wiki/Geocoding",
        "https://en.wikipedia.org/wiki/Pair_programming",
        "https://en.wikipedia.org/wiki/Avionics_software",
        "https://en.wikipedia.org/wiki/Feasibility_study",
        "https://en.wikipedia.org/wiki/Requirements_elicitation",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_inspection",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Use_cases",
        "https://en.wikipedia.org/wiki/User_stories",
        "https://en.wikipedia.org/wiki/Change_control",
        "https://en.wikipedia.org/wiki/Requirements_management",
        "https://en.wikipedia.org/wiki/Creativity",
        "https://en.wikipedia.org/wiki/Illusion",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/User_story",
        "https://en.wikipedia.org/wiki/Acceptance_test",
        "https://en.wikipedia.org/wiki/Scope_creep",
        "https://en.wikipedia.org/wiki/Requirements_management",
        "https://en.wikipedia.org/wiki/Pentagon_Wars",
        "https://en.wikipedia.org/wiki/Fighter_mafia",
        "https://en.wikipedia.org/wiki/Business_requirements",
        "https://en.wikipedia.org/wiki/Software_requirements",
        "https://en.wikipedia.org/wiki/Requirements_engineering",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Requirements_elicitation",
        "https://en.wikipedia.org/wiki/Requirements_management",
        "https://en.wikipedia.org/wiki/Requirement_prioritization",
        "https://en.wikipedia.org/wiki/Requirements_traceability",
        "https://en.wikipedia.org/wiki/MoSCoW_Method",
        "https://en.wikipedia.org/wiki/User_story",
        "https://en.wikipedia.org/wiki/Use_Case",
        "https://en.wikipedia.org/wiki/ASTM_International",
        "https://en.wikipedia.org/wiki/John_Mylopoulos",
        "https://en.wikipedia.org/wiki/Requirement",
        "https://en.wikipedia.org/wiki/Requirement",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}