{
    "url": "https://en.wikipedia.org/wiki/Automated_planning_and_scheduling",
    "title": "Automated planning and scheduling",
    "table_of_contents": [
        "1 Overview",
        "2 Domain independent planning",
        "3 Planning domain modelling languages",
        "4 Algorithms for planning",
        "4.1 Classical planning",
        "4.2 Reduction to other problems",
        "4.3 Temporal planning",
        "4.4 Probabilistic planning",
        "4.5 Preference-based planning",
        "4.6 Conditional planning",
        "4.6.1 Contingent planning",
        "4.6.2 Conformant planning",
        "5 Deployment of planning systems",
        "6 See also",
        "7 References",
        "8 Further reading",
        "9 External links"
    ],
    "content": [
        {
            "paragraph1": "Automated planning and scheduling, sometimes denoted as simply AI planning, is a branch of artificial intelligence that concerns the realization of strategies or action sequences, typically for execution by intelligent agents, autonomous robots and unmanned vehicles. Unlike classical control and classification problems, the solutions are complex and must be discovered and optimized in multidimensional space. Planning is also related to decision theory.\n",
            "paragraph2": "In known environments with available models, planning can be done offline. Solutions can be found and evaluated prior to execution. In dynamically unknown environments, the strategy often needs to be revised online. Models and policies must be adapted. Solutions usually resort to iterative trial and error processes commonly seen in artificial intelligence. These include dynamic programming, reinforcement learning and combinatorial optimization. Languages used to describe planning and scheduling are often called action languages.\n"
        },
        {
            "title": "Overview",
            "paragraph1": "Given a description of the possible initial states of the world, a description of the desired goals, and a description of a set of possible actions, the planning problem is to synthesize a plan that is guaranteed (when applied to any of the initial states) to generate a state which contains the desired goals (such a state is called a goal state).\n",
            "paragraph2": "The difficulty of planning is dependent on the simplifying assumptions employed. Several classes of planning problems can be identified depending on the properties the problems have in several dimensions.\n",
            "ul1": "Are the actions deterministic or non-deterministic? For nondeterministic actions, are the associated probabilities available?\nAre the state variables discrete or continuous? If they are discrete, do they have only a finite number of possible values?\nCan the current state be observed unambiguously? There can be full observability and partial observability.\nHow many initial states are there, finite or arbitrarily many?\nDo actions have a duration?\nCan several actions be taken concurrently, or is only one action possible at a time?\nIs the objective of a plan to reach a designated goal state, or to maximize a reward function?\nIs there only one agent or are there several agents? Are the agents cooperative or selfish? Do all of the agents construct their own plans separately, or are the plans constructed centrally for all agents?\n",
            "paragraph3": "The simplest possible planning problem, known as the Classical Planning Problem, is determined by:\n",
            "ul2": "a unique known initial state,\ndurationless actions,\ndeterministic actions,\nwhich can be taken only one at a time,\nand a single agent.\n",
            "paragraph4": "Since the initial state is known unambiguously, and all actions are deterministic, the state of the world after any sequence of actions can be accurately predicted, and the question of observability is irrelevant for classical planning.\n",
            "paragraph5": "Further, plans can be defined as sequences of actions, because it is always known in advance which actions will be needed.\n",
            "paragraph6": "With nondeterministic actions or other events outside the control of the agent, the possible executions form a tree, and plans have to determine the appropriate actions for every node of the tree.\n",
            "paragraph7": "Discrete-time Markov decision processes (MDP) are planning problems with:\n",
            "ul3": "durationless actions,\nnondeterministic actions with probabilities,\nfull observability,\nmaximization of a reward function,\nand a single agent.\n",
            "paragraph8": "When full observability is replaced by partial observability, planning corresponds to partially observable Markov decision process (POMDP).\n",
            "paragraph9": "If there are more than one agent, we have multi-agent planning, which is closely related to game theory.\n"
        },
        {
            "title": "Domain independent planning",
            "paragraph1": "In AI planning, planners typically input a domain model (a description of a set of possible actions which model the domain) as well as the specific problem to be solved specified by the initial state and goal, in contrast to those in which there is no input domain specified. Such planners are called \"domain independent\" to emphasize the fact that they can solve planning problems from a wide range of domains. Typical examples of domains are block-stacking, logistics, workflow management, and robot task planning. Hence a single domain-independent planner can be used to solve planning problems in all these various domains. On the other hand, a route planner is typical of a domain-specific planner.\n"
        },
        {
            "title": "Planning domain modelling languages",
            "paragraph1": "\nThe most commonly used languages for representing planning domains and specific planning problems, such as STRIPS and PDDL for Classical Planning, are based on state variables. Each possible state of the world is an assignment of values to the state variables, and actions determine how the values of the state variables change when that action is taken. Since a set of state variables induce a state space that has a size that is exponential in the set, planning, similarly to many other computational problems, suffers from the curse of dimensionality and the combinatorial explosion.\n",
            "paragraph2": "An alternative language for describing planning problems is that of hierarchical task networks, in which a set of tasks is given, and each task can be either realized by a primitive action or decomposed into a set of other tasks. This does not necessarily involve state variables, although in more realistic applications state variables simplify the description of task networks.\n"
        },
        {
            "title": "Algorithms for planning",
            "subtitle1": "Classical planning",
            "ul1": "forward chaining state space search, possibly enhanced with heuristics\nbackward chaining search, possibly enhanced by the use of state constraints (see STRIPS, graphplan)\npartial-order planning\n",
            "subtitle2": "Reduction to other problems",
            "ul2": "reduction to the propositional satisfiability problem (satplan).\nreduction to Model checking - both are essentially problems of traversing state spaces, and the classical planning problem corresponds to a subclass of model checking problems.\n",
            "subtitle3": "Temporal planning",
            "paragraph1": "Temporal planning can be solved with methods similar to classical planning. The main difference is, because of the possibility of several, temporally overlapping actions with a duration being taken concurrently,\nthat the definition of a state has to include information about the current absolute time and how far the execution of each active action has proceeded. Further, in planning with rational or real time, the state space may be infinite, unlike in classical planning or planning with integer time. Temporal planning is closely related to scheduling problems.\nTemporal planning can also be understood in terms of timed automata.\n",
            "subtitle4": "Probabilistic planning",
            "paragraph2": "Probabilistic planning can be solved with iterative methods such as value iteration and policy iteration, when the state space is sufficiently small.\nWith partial observability, probabilistic planning is similarly solved with iterative methods, but using a representation of the value functions defined for the space of beliefs instead of states.\n",
            "subtitle5": "Preference-based planning",
            "paragraph3": "In preference-based planning, the objective is not only to produce a plan but also to satisfy user-specified preferences. A difference to the more common reward-based planning, for example corresponding to MDPs, preferences don't necessarily have a precise numerical value.\n",
            "subtitle6": "Conditional planning",
            "paragraph4": "Deterministic planning was introduced with the STRIPS planning system, which is a hierarchical planner. Action names are ordered in a sequence and this is a plan for the robot. Hierarchical planning can be compared with an automatic generated behavior tree. The disadvantage is, that a normal behavior tree is not so expressive like a computer program. That means, the notation of a behavior graph contains action commands, but no loops or if-then-statements. Conditional planning overcomes the bottleneck and introduces an elaborated notation which is similar to a control flow, known from other programming languages like Pascal. It is very similar to program synthesis, which means a planner generates sourcecode which can be executed by an interpreter.\n",
            "paragraph5": "An early example of a conditional planner is “Warplan-C” which was introduced in the mid 1970s. What is the difference between a normal sequence and a complicated plan, which contains if-then-statements? It has to do with uncertainty at runtime of a plan. The idea is that a plan can react to sensor signals which are unknown for the planner. The planner generates two choices in advance. For example, if an object was detected, then action A is executed, if an object is missing, then action B is executed. A major advantage of conditional planning is the ability to handle partial plans. An agent is not forced to plan everything from start to finish but can divide the problem into chunks. This helps to reduce the state space and solves much more complex problems.\n",
            "paragraph6": "We speak of \"contingent planning\" when the environment is observable through sensors, which can be faulty. It is thus a situation where the planning agent acts under incomplete information. For a contingent planning problem, a plan is no longer a sequence of actions but a decision tree because each step of the plan is represented by a set of states rather than a single perfectly observable state, as in the case of classical planning. The selected actions depend on the state of the system. For example, if it rains, the agent chooses to take the umbrella, and if it doesn't, they may choose not to take it.\n",
            "paragraph7": "Michael L. Littman showed in 1998 that with branching actions, the planning problem becomes EXPTIME-complete. A particular case of contiguous planning is represented by FOND problems - for \"fully-observable and non-deterministic\". If the goal is specified in LTLf (linear time logic on finite trace) then the problem is always EXPTIME-complete and 2EXPTIME-complete if the goal is specified with LDLf.\n",
            "paragraph8": "Conformant planning is when the agent is uncertain about the state of the system, and it cannot make any observations. The agent then has beliefs about the real world, but cannot verify them with sensing actions, for instance. These problems are solved by techniques similar to those of classical planning, but where the state space is exponential in the size of the problem, because of the uncertainty about the current state. A solution for a conformant planning problem is a sequence of actions. Haslum and Jonsson have demonstrated that the problem of conformant planning is EXPSPACE-complete, and 2EXPTIME-complete when the initial situation is uncertain, and there is non-determinism in the actions outcomes.\n"
        },
        {
            "title": "Deployment of planning systems",
            "ul1": "The Hubble Space Telescope uses a short-term system called SPSS and a long-term planning system called Spike[citation needed].\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Outline_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Artificial_general_intelligence",
        "https://en.wikipedia.org/wiki/Computer_vision",
        "https://en.wikipedia.org/wiki/General_game_playing",
        "https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning",
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Natural_language_processing",
        "https://en.wikipedia.org/wiki/Robotics",
        "https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Deep_learning",
        "https://en.wikipedia.org/wiki/Bayesian_network",
        "https://en.wikipedia.org/wiki/Evolutionary_algorithm",
        "https://en.wikipedia.org/wiki/Philosophy_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Chinese_room",
        "https://en.wikipedia.org/wiki/Friendly_artificial_intelligence",
        "https://en.wikipedia.org/wiki/AI_control_problem",
        "https://en.wikipedia.org/wiki/AI_takeover",
        "https://en.wikipedia.org/wiki/Ethics_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Existential_risk_from_artificial_general_intelligence",
        "https://en.wikipedia.org/wiki/Turing_test",
        "https://en.wikipedia.org/wiki/History_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Timeline_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Progress_in_artificial_intelligence",
        "https://en.wikipedia.org/wiki/AI_winter",
        "https://en.wikipedia.org/wiki/Applications_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/List_of_artificial_intelligence_projects",
        "https://en.wikipedia.org/wiki/List_of_programming_languages_for_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Artificial_intelligence",
        "https://en.wikipedia.org/wiki/Strategy",
        "https://en.wikipedia.org/wiki/Intelligent_agent",
        "https://en.wikipedia.org/wiki/Autonomous_robot",
        "https://en.wikipedia.org/wiki/Unmanned_vehicle",
        "https://en.wikipedia.org/wiki/Control_system",
        "https://en.wikipedia.org/wiki/Statistical_classification",
        "https://en.wikipedia.org/wiki/Decision_theory",
        "https://en.wikipedia.org/wiki/Strategy",
        "https://en.wikipedia.org/wiki/Trial_and_error",
        "https://en.wikipedia.org/wiki/Artificial_intelligence",
        "https://en.wikipedia.org/wiki/Dynamic_programming",
        "https://en.wikipedia.org/wiki/Reinforcement_learning",
        "https://en.wikipedia.org/wiki/Combinatorial_optimization",
        "https://en.wikipedia.org/wiki/Action_language",
        "https://en.wikipedia.org/wiki/State_space_search",
        "https://en.wikipedia.org/wiki/Deterministic",
        "https://en.wikipedia.org/wiki/State_variable",
        "https://en.wikipedia.org/wiki/Reward_function",
        "https://en.wikipedia.org/wiki/Markov_decision_process",
        "https://en.wikipedia.org/wiki/Partially_observable_Markov_decision_process",
        "https://en.wikipedia.org/wiki/Game_theory",
        "https://en.wikipedia.org/wiki/Stanford_Research_Institute_Problem_Solver",
        "https://en.wikipedia.org/wiki/Planning_Domain_Definition_Language",
        "https://en.wikipedia.org/wiki/Curse_of_dimensionality",
        "https://en.wikipedia.org/wiki/Combinatorial_explosion",
        "https://en.wikipedia.org/wiki/Hierarchical_task_network",
        "https://en.wikipedia.org/wiki/Forward_chaining",
        "https://en.wikipedia.org/wiki/State_space_search",
        "https://en.wikipedia.org/wiki/Backward_chaining",
        "https://en.wikipedia.org/wiki/Stanford_Research_Institute_Problem_Solver",
        "https://en.wikipedia.org/wiki/Graphplan",
        "https://en.wikipedia.org/wiki/Sussman_anomaly",
        "https://en.wikipedia.org/wiki/Propositional_satisfiability",
        "https://en.wikipedia.org/wiki/Satplan",
        "https://en.wikipedia.org/wiki/Model_checking",
        "https://en.wikipedia.org/wiki/Scheduling",
        "https://en.wikipedia.org/wiki/Timed_automaton",
        "https://en.wikipedia.org/wiki/Markov_decision_process",
        "https://en.wikipedia.org/wiki/Partially_observable_Markov_decision_process",
        "https://en.wikipedia.org/wiki/Value_iteration",
        "https://en.wikipedia.org/wiki/Policy_iteration",
        "https://en.wikipedia.org/wiki/Preference",
        "https://en.wikipedia.org/wiki/Stanford_Research_Institute_Problem_Solver",
        "https://en.wikipedia.org/wiki/Control_flow",
        "https://en.wikipedia.org/wiki/Program_synthesis",
        "https://en.wikipedia.org/wiki/Soft_sensor",
        "https://en.wikipedia.org/wiki/Decision_tree",
        "https://en.wikipedia.org/wiki/EXPTIME",
        "https://en.wikipedia.org/wiki/EXPSPACE",
        "https://en.wikipedia.org/wiki/Hubble_Space_Telescope",
        "https://en.wikipedia.org/wiki/Action_description_language",
        "https://en.wikipedia.org/wiki/Actor_model",
        "https://en.wikipedia.org/wiki/Applications_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Constraint_satisfaction_problem",
        "https://en.wikipedia.org/wiki/Reactive_planning",
        "https://en.wikipedia.org/wiki/List_of_SMT_solvers",
        "https://en.wikipedia.org/wiki/List_of_constraint_programming_languages",
        "https://en.wikipedia.org/wiki/List_of_emerging_technologies",
        "https://en.wikipedia.org/wiki/Outline_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Morgan_Kaufmann",
        "https://en.wikipedia.org/wiki/Automated_planning_and_scheduling",
        "https://en.wikipedia.org/wiki/Automated_planning_and_scheduling",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}