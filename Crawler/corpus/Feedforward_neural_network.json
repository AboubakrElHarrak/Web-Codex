{
    "url": "https://en.wikipedia.org/wiki/Feedforward_neural_network",
    "title": "Feedforward neural network",
    "table_of_contents": [
        "1 Single-layer perceptron",
        "2 Multi-layer perceptron",
        "3 Other feedforward networks",
        "4 See also",
        "5 References",
        "6 External links"
    ],
    "content": [
        {
            "image3": {
                "url": "//upload.wikimedia.org/wikipedia/en/5/54/Feed_forward_neural_net.gif",
                "caption": "\n\t\tIn a feedforward network, information always moves one direction; it never goes backwards.\n\t"
            },
            "paragraph1": "A feedforward neural network is an artificial neural network wherein connections between the nodes do not form a cycle. As such, it is different from its  descendant: recurrent neural networks.\n",
            "paragraph2": "The feedforward neural network was the first and simplest type of artificial neural network devised. In this network, the information moves in only one direction—forward—from the input nodes, through the hidden nodes (if any) and to the output nodes. There are no cycles or loops in the network.\n"
        },
        {
            "title": "Single-layer perceptron",
            "paragraph1": "The simplest kind of neural network is a single-layer perceptron network, which consists of a single layer of output nodes; the inputs are fed directly to the outputs via a series of weights. The sum of the products of the weights and the inputs is calculated in each node, and if the value is above some threshold (typically 0) the neuron fires and takes the activated value (typically 1); otherwise it takes the deactivated value (typically -1). Neurons with this kind of activation function are also called artificial neurons or linear threshold units. In the literature the term perceptron often refers to networks consisting of just one of these units. A similar neuron was described by Warren McCulloch and Walter Pitts in the 1940s.\n",
            "paragraph2": "A perceptron can be created using any values for the activated and deactivated states as long as the threshold value lies between the two.\n",
            "paragraph3": "Perceptrons can be trained by a simple learning algorithm that is usually called the delta rule. It calculates the errors between calculated output and sample output data, and uses this to create an adjustment to the weights, thus implementing a form of gradient descent.\n",
            "paragraph4": "Single-layer perceptrons are only capable of learning linearly separable patterns; in 1969 in a famous monograph entitled Perceptrons, Marvin Minsky and Seymour Papert showed that it was impossible for a single-layer perceptron network to learn an XOR function (nonetheless, it was known that multi-layer perceptrons are capable of producing any possible boolean function). Single biological neurons in the human brain capable of learning the XOR function have since been discovered and artificial neurons with oscillating activation functions capable of individually learning the XOR function have also been recently proposed.\n",
            "paragraph5": "Although a single threshold unit is quite limited in its computational power, it has been shown that networks of parallel threshold units can approximate any continuous function from a compact interval of the real numbers into the interval [-1,1]. This result can be found in Peter Auer, Harald Burgsteiner and Wolfgang Maass \"A learning rule for very simple universal approximators consisting of a single layer of perceptrons\".\n",
            "paragraph6": "A single-layer neural network can compute a continuous output instead of a step function. A common choice is the so-called logistic function:\n",
            "paragraph7": "With this choice, the single-layer network is identical to the logistic regression model, widely used in statistical modeling. The logistic function is one of the family of functions called sigmoid functions because their S-shaped graphs resemble the final-letter lower case of the Greek letter Sigma. It has a continuous derivative, which allows it to be used in backpropagation. This function is also preferred because its derivative is easily calculated:\n",
            "paragraph8": "(The fact that \n\n\n\nf\n\n\n{\\displaystyle f}\n\n satisfies the differential equation above can easily be shown by applying the chain rule.)\n",
            "paragraph9": "If single-layer neural network activation function is modulo 1, then this network can solve XOR problem with a single neuron.\n"
        },
        {
            "title": "Multi-layer perceptron",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/7/7b/XOR_perceptron_net.png",
                "caption": "\n\t\tA two-layer neural network capable of calculating XOR. The numbers within the neurons represent each neuron's explicit threshold (which can be factored out so that all neurons have the same threshold, usually 1). The numbers that annotate arrows represent the weight of the inputs. This net assumes that if the threshold is not reached, zero (not -1) is output. Note that the bottom layer of inputs is not always considered a real neural network layer\n\t"
            },
            "paragraph1": "This class of networks consists of multiple layers of computational units, usually interconnected in a feed-forward way. Each neuron in one layer has directed connections to the neurons of the subsequent layer. In many applications the units of these networks apply a sigmoid function as an activation function. However sigmoidal activation functions have very small derivative values outside a small range and do not work well in deep neural networks due to the vanishing gradient problem. Alternatives to sigmoidal activation functions that alleviate the vanishing gradient problems and allow deep networks to be trained have been proposed.\n",
            "paragraph2": "The universal approximation theorem for neural networks states that every continuous function that maps intervals of real numbers to some output interval of real numbers can be approximated arbitrarily closely by a multi-layer perceptron with just one hidden layer. This result holds for a wide range of activation functions, e.g. for the sigmoidal functions.\n",
            "paragraph3": "Multi-layer networks use a variety of learning techniques, the most popular being back-propagation. Here, the output values are compared with the correct answer to compute the value of some predefined error-function. By various techniques, the error is then fed back through the network. Using this information, the algorithm adjusts the weights of each connection in order to reduce the value of the error function by some small amount. After repeating this process for a sufficiently large number of training cycles, the network will usually converge to some state where the error of the calculations is small. In this case, one would say that the network has learned a certain target function. To adjust weights properly, one applies a general method for non-linear optimization that is called gradient descent. For this, the network calculates the derivative of the error function with respect to the network weights, and changes the weights such that the error decreases (thus going downhill on the surface of the error function). For this reason, back-propagation can only be applied on networks with differentiable activation functions.\n",
            "paragraph4": "In general, the problem of teaching a network to perform well, even on samples that were not used as training samples, is a quite subtle issue that requires additional techniques. This is especially important for cases where only very limited numbers of training samples are available. The danger is that the network overfits the training data and fails to capture the true statistical process generating the data.  Computational learning theory is concerned with training classifiers on a limited amount of data.  In the context of neural networks a simple heuristic, called early stopping, often ensures that the network will generalize well to examples not in the training set.\n",
            "paragraph5": "Other typical problems of the back-propagation algorithm are the speed of convergence and the possibility of ending up in a local minimum of the error function. Today, there are practical methods that make back-propagation in multi-layer perceptrons the tool of choice for many machine learning tasks.\n",
            "paragraph6": "One also can use a series of independent neural networks moderated by some intermediary, a similar behavior that happens in brain. These neurons can perform separably and handle a large task, and the results can be finally combined.\n"
        },
        {
            "title": "Other feedforward networks",
            "paragraph1": "More generally, any directed acyclic graph may be used for a feedforward network, with some nodes (with no parents) designated as inputs, and some nodes (with no children) designated as outputs. These can be viewed as multilayer networks where some edges skip layers, either counting layers backwards from the outputs or forwards from the inputs. Various activation functions can be used, and there can be relations between weights, as in convolutional neural networks.\n",
            "paragraph2": "Examples of other feedforward networks include radial basis function networks, which use a different activation function.\n",
            "paragraph3": "Sometimes multi-layer perceptron is used loosely to refer to any feedforward neural network, while in other cases it is restricted to specific ones (e.g., with specific activation functions, or with fully connected layers, or trained by the perceptron algorithm).\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Artificial_neural_network",
        "https://en.wikipedia.org/wiki/Recurrent_neural_network",
        "https://en.wikipedia.org/wiki/Neural_network",
        "https://en.wikipedia.org/wiki/Perceptron",
        "https://en.wikipedia.org/wiki/Activation_function",
        "https://en.wikipedia.org/wiki/Artificial_neurons",
        "https://en.wikipedia.org/wiki/Perceptron",
        "https://en.wikipedia.org/wiki/Warren_McCulloch",
        "https://en.wikipedia.org/wiki/Walter_Pitts",
        "https://en.wikipedia.org/wiki/Delta_rule",
        "https://en.wikipedia.org/wiki/Gradient_descent",
        "https://en.wikipedia.org/wiki/Linearly_separable",
        "https://en.wikipedia.org/wiki/Monograph",
        "https://en.wikipedia.org/wiki/Marvin_Minsky",
        "https://en.wikipedia.org/wiki/Seymour_Papert",
        "https://en.wikipedia.org/wiki/Exclusive_or",
        "https://en.wikipedia.org/wiki/Universal_approximation_theorem",
        "https://en.wikipedia.org/wiki/Step_function",
        "https://en.wikipedia.org/wiki/Logistic_function",
        "https://en.wikipedia.org/wiki/Logistic_regression",
        "https://en.wikipedia.org/wiki/Statistical_model",
        "https://en.wikipedia.org/wiki/Logistic_function",
        "https://en.wikipedia.org/wiki/Sigmoid_function",
        "https://en.wikipedia.org/wiki/Sigma",
        "https://en.wikipedia.org/wiki/Backpropagation",
        "https://en.wikipedia.org/wiki/Chain_rule",
        "https://en.wikipedia.org/wiki/Modular_arithmetic",
        "https://en.wikipedia.org/wiki/Multilayer_perceptron",
        "https://en.wikipedia.org/wiki/Sigmoid_function",
        "https://en.wikipedia.org/wiki/Vanishing_gradient_problem",
        "https://en.wikipedia.org/wiki/Universal_approximation_theorem",
        "https://en.wikipedia.org/wiki/Gradient_descent",
        "https://en.wikipedia.org/wiki/Overfitting",
        "https://en.wikipedia.org/wiki/Computational_learning_theory",
        "https://en.wikipedia.org/wiki/Heuristic",
        "https://en.wikipedia.org/wiki/Early_stopping",
        "https://en.wikipedia.org/wiki/Local_minimum",
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Directed_acyclic_graph",
        "https://en.wikipedia.org/wiki/Convolutional_neural_network",
        "https://en.wikipedia.org/wiki/Radial_basis_function_network",
        "https://en.wikipedia.org/wiki/Hopfield_network",
        "https://en.wikipedia.org/wiki/Convolutional_neural_network",
        "https://en.wikipedia.org/wiki/Backpropagation",
        "https://en.wikipedia.org/wiki/Rprop",
        "https://en.wikipedia.org/wiki/Panayiota_Poirazi",
        "https://en.wikipedia.org/wiki/Chemometrics_and_Intelligent_Laboratory_Systems",
        "https://en.wikipedia.org/wiki/Differentiable_function",
        "https://en.wikipedia.org/wiki/Differentiable_programming",
        "https://en.wikipedia.org/wiki/Neural_Turing_machine",
        "https://en.wikipedia.org/wiki/Differentiable_neural_computer",
        "https://en.wikipedia.org/wiki/Automatic_differentiation",
        "https://en.wikipedia.org/wiki/Neuromorphic_engineering",
        "https://en.wikipedia.org/wiki/Cable_theory",
        "https://en.wikipedia.org/wiki/Pattern_recognition",
        "https://en.wikipedia.org/wiki/Computational_learning_theory",
        "https://en.wikipedia.org/wiki/Tensor_calculus",
        "https://en.wikipedia.org/wiki/Gradient_descent",
        "https://en.wikipedia.org/wiki/Stochastic_gradient_descent",
        "https://en.wikipedia.org/wiki/Cluster_analysis",
        "https://en.wikipedia.org/wiki/Regression_analysis",
        "https://en.wikipedia.org/wiki/Overfitting",
        "https://en.wikipedia.org/wiki/Adversarial_machine_learning",
        "https://en.wikipedia.org/wiki/Convolution",
        "https://en.wikipedia.org/wiki/Loss_functions_for_classification",
        "https://en.wikipedia.org/wiki/Backpropagation",
        "https://en.wikipedia.org/wiki/Batch_normalization",
        "https://en.wikipedia.org/wiki/Activation_function",
        "https://en.wikipedia.org/wiki/Softmax_function",
        "https://en.wikipedia.org/wiki/Sigmoid_function",
        "https://en.wikipedia.org/wiki/Data_augmentation",
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Artificial_neural_network",
        "https://en.wikipedia.org/wiki/Deep_learning",
        "https://en.wikipedia.org/wiki/Computational_science",
        "https://en.wikipedia.org/wiki/Artificial_intelligence",
        "https://en.wikipedia.org/wiki/Graphcore",
        "https://en.wikipedia.org/wiki/Tensor_Processing_Unit",
        "https://en.wikipedia.org/wiki/Vision_processing_unit",
        "https://en.wikipedia.org/wiki/Memristor",
        "https://en.wikipedia.org/wiki/SpiNNaker",
        "https://en.wikipedia.org/wiki/TensorFlow",
        "https://en.wikipedia.org/wiki/PyTorch",
        "https://en.wikipedia.org/wiki/Keras",
        "https://en.wikipedia.org/wiki/AlexNet",
        "https://en.wikipedia.org/wiki/WaveNet",
        "https://en.wikipedia.org/wiki/Human_image_synthesis",
        "https://en.wikipedia.org/wiki/Handwriting_recognition",
        "https://en.wikipedia.org/wiki/Optical_character_recognition",
        "https://en.wikipedia.org/wiki/Speech_synthesis",
        "https://en.wikipedia.org/wiki/Speech_recognition",
        "https://en.wikipedia.org/wiki/Facial_recognition_system",
        "https://en.wikipedia.org/wiki/AlphaFold",
        "https://en.wikipedia.org/wiki/Word2vec",
        "https://en.wikipedia.org/wiki/Neural_machine_translation",
        "https://en.wikipedia.org/wiki/Project_Debater",
        "https://en.wikipedia.org/wiki/AlphaGo",
        "https://en.wikipedia.org/wiki/AlphaZero",
        "https://en.wikipedia.org/wiki/OpenAI_Five",
        "https://en.wikipedia.org/wiki/MuZero",
        "https://en.wikipedia.org/wiki/Action_selection",
        "https://en.wikipedia.org/wiki/Robot_control",
        "https://en.wikipedia.org/wiki/Ian_Goodfellow",
        "https://en.wikipedia.org/wiki/Yoshua_Bengio",
        "https://en.wikipedia.org/wiki/Geoffrey_Hinton",
        "https://en.wikipedia.org/wiki/Yann_LeCun",
        "https://en.wikipedia.org/wiki/Andrew_Ng",
        "https://en.wikipedia.org/wiki/Demis_Hassabis",
        "https://en.wikipedia.org/wiki/DeepMind",
        "https://en.wikipedia.org/wiki/OpenAI",
        "https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory",
        "https://en.wikipedia.org/wiki/Google_Brain",
        "https://en.wikipedia.org/wiki/Feedforward_neural_network",
        "https://en.wikipedia.org/wiki/Feedforward_neural_network",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}