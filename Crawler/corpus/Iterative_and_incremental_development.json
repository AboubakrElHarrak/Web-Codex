{
    "url": "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
    "title": "Iterative and incremental development",
    "table_of_contents": [
        "1 Overview",
        "1.1 Phases",
        "1.2 Usage/History",
        "1.3 Contrast with Waterfall development",
        "1.4 Implementation guidelines",
        "2 Use in hardware and embedded systems",
        "3 See also",
        "4 Notes",
        "5 References"
    ],
    "content": [
        {
            "paragraph1": "Iterative and incremental development is any combination of both iterative design or iterative method and incremental build model for development.  \n",
            "paragraph2": "Usage of the term began in software development, with a long-standing combination of the two terms iterative and incremental having been widely suggested for large development efforts. For example, the 1985 DOD-STD-2167\nmentions (in section 4.1.2): \"During software development, more than one iteration of the software development cycle may be in progress at the same time.\" and \"This process may be described as an 'evolutionary acquisition' or 'incremental build' approach.\" In software, the relationship between iterations and increments is determined by the overall software development process.\n",
            "image2": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/5/58/Iterative_Process_Diagram.svg/600px-Iterative_Process_Diagram.svg.png",
                "caption": "\n\t\tIterative development model\n\t"
            }
        },
        {
            "title": "Overview",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/5/50/Agile_Project_Management_by_Planbox.png/440px-Agile_Project_Management_by_Planbox.png",
                "caption": "\n\t\tA simplified version of a typical iteration cycle in agile project management\n\t"
            },
            "paragraph1": "The basic idea behind this method is to develop a system through repeated cycles (iterative) and in smaller portions at a time (incremental), allowing software developers to take advantage of what was learned during development of earlier parts or versions of the system.  Learning comes from both the development and use of the system, where possible key steps in the process start with a simple implementation of a subset of the software requirements and iteratively enhance the evolving versions until the full system is implemented. At each iteration, design modifications are made and new functional capabilities are added.\n",
            "paragraph2": "The procedure itself consists of the initialization step, the iteration step, and the Project Control List. The initialization step creates a base version of the system. The goal for this initial implementation is to create a product to which the user can react. It should offer a sampling of the key aspects of the problem and provide a solution that is simple enough to understand and implement easily.  To guide the iteration process, a project control list is created that contains a record of all tasks that need to be performed. It includes items such as new features to be implemented and areas of redesign of the existing solution. The control list is constantly being revised as a result of the analysis phase.\n",
            "paragraph3": "The iteration involves the redesign and implementation of iteration is to be simple, straightforward, and modular, supporting redesign at that stage or as a task added to the project control list.[clarification needed] The level of design detail is not dictated by the iterative approach.  In a light-weight iterative project the code may represent the major source of documentation of the system; however, in a critical iterative project a formal Software Design Document may be used. The analysis of an iteration is based upon user feedback, and the program analysis facilities available. It involves analysis of the structure, modularity, usability, reliability, efficiency, & achievement of goals. The project control list is modified in light of the analysis results.\n",
            "image2": {
                "url": "//upload.wikimedia.org/wikipedia/commons/1/19/Development-iterative.png",
                "caption": "\n\t\tIterative development.\n\t"
            },
            "subtitle1": "Phases",
            "paragraph4": "Incremental development slices the system functionality into increments (portions).  In each increment, a slice of functionality is delivered through cross-discipline work, from the requirements to the deployment.  The Unified Process groups increments/iterations into phases: inception, elaboration, construction, and transition.\n",
            "ul1": "Inception identifies project scope, requirements (functional and non-functional) and risks at a high level but in enough detail that work can be estimated.\nElaboration delivers a working architecture that mitigates the top risks and fulfills the non-functional requirements.\nConstruction incrementally fills-in the architecture with production-ready code produced from analysis, design, implementation, and testing of the functional requirements.\nTransition delivers the system into the production operating environment.\n",
            "paragraph5": "Each of the phases may be divided into 1 or more iterations, which are usually time-boxed rather than feature-boxed.  Architects and analysts work one iteration ahead of developers and testers to keep their work-product backlog full.\n",
            "subtitle2": "Usage/History",
            "paragraph6": "Many examples of early usage are provided in Craig Larman and Victor Basili's article \"Iterative and Incremental Development: A Brief History\", with one of the earliest being NASA's 1960s Project Mercury.\n",
            "paragraph7": "Some of those Mercury engineers later formed a new division within IBM, where \"another early and striking example of a major IID success  the very heart of NASA’s space shuttle software—the primary avionics software system, which  built from 1977 to 1980. The team applied IID in a series of 17 iterations over 31 months, averaging around eight weeks per iteration. Their motivation for avoiding the waterfall life cycle was that the shuttle program’s requirements changed during the software development process.\"\n",
            "paragraph8": "Some organizations, such as the US Department of Defense, have a preference for iterative methodologies, starting with MIL-STD-498 \"clearly encouraging evolutionary acquisition and IID\".\n",
            "paragraph9": "\nThe DoD Instruction 5000.2 released in 2000 stated a clear preference for IID: ",
            "paragraph10": " Recent revisions to DoDI 5000.02 no longer refer to \"spiral development,\" but do advocate the general approach as a baseline for software-intensive development/procurement programs. In addition, the United States Agency for International Development (USAID) also employs an iterative and incremental developmental approach to its programming cycle to design, monitor, evaluate, learn and adapt international development projects with a project management approach that focuses on incorporating collaboration, learning, and adaptation strategies to iterate and adapt programming.\n",
            "subtitle3": "Contrast with Waterfall development",
            "paragraph11": "The main cause of the software development projects failure is the choice of the model, so should be made with a great care.\n",
            "paragraph12": "For example, the Waterfall development paradigm completes the project-wide work-products of each discipline in one step before moving on to the next discipline in a succeeding step. Business value is delivered all at once, and only at the very end of the project, whereas backtracking[clarification needed] is possible in an iterative approach.  Comparing the two approaches, some patterns begin to emerge:[citation needed]\n",
            "ul2": "User involvement: In the waterfall model, the user is involved in two stages of the model, i.e. requirements and acceptance testing, and possibly creation of user education material. Whereas in the incremental model, the client is involved at each and every stage.\nVariability: The software is delivered to the user only after the build stage of the life cycle is completed, for user acceptance testing. On the other hand, every increment is delivered to the user and after the approval of user, the developer is allowed to move towards the next module.\nHuman resources: In the incremental model fewer staff are potentially required as compared to the waterfall model.\nTime limitation: An operational product is delivered after months while in the incremental model the product is given to the user within a few weeks.\nProject size: Waterfall model is unsuitable for small projects while the incremental model is suitable for small, as well as large projects.\n",
            "subtitle4": "Implementation guidelines",
            "paragraph13": "Guidelines that drive software implementation and analysis include:[citation needed]\n",
            "ul3": "Any difficulty in design, coding and testing a modification should signal the need for redesign or re-coding.\nModifications should fit easily into isolated and easy-to-find modules. If they do not, some redesign is possibly needed.\nModifications to tables should be especially easy to make. If any table modification is not quickly and easily done, redesign is indicated.\nModifications should become easier to make as the iterations progress. If they are not, there is a basic problem such as a design flaw or a proliferation of patches.\nPatches should normally be allowed to exist for only one or two iterations. Patches may be necessary to avoid redesigning during an implementation phase.\nThe existing implementation should be analyzed frequently to determine how well it measures up to project goals.\nProgram analysis facilities should be used whenever available to aid in the analysis of partial implementations.\nUser reaction should be solicited and analyzed for indications of deficiencies in the current implementation.\n"
        },
        {
            "title": "Use in hardware and embedded systems",
            "paragraph1": "While the term iterative and incremental development got started in the software industry, many hardware and embedded software development efforts are using iterative and incremental techniques.  \n",
            "paragraph2": "Examples of this may be seen in a number of industries.  One sector that has recently been substantially affected by this shift of thinking has been the space launch industry, with substantial new competitive forces at work brought about by faster and more extensive technology innovation brought to bear by the formation of private companies pursuing space launch.  These companies, such as SpaceX and Rocket Lab, are now both providing commercial orbital launch services in the past decade, something that only six nations had done prior to a decade ago.  New innovation in technology development approaches, pricing, and service offerings—including the ability that has existed only since 2016 to fly to space on a previously-flown (reusable) booster stage—further decreasing the price of obtaining access to space.\n",
            "paragraph3": "SpaceX has been explicit about its effort to bring iterative design practices into the space industry, and uses the technique on spacecraft, launch vehicles, electronics and avionics, and operational flight hardware operations.\n",
            "paragraph4": "As the industry has begun to change, other launch competitors are beginning to change their long-term development practices with government agencies as well.  For example, the large US launch service provider United Launch Alliance (ULA) began in 2015 a decade-long project to restructure its launch business—reducing two launch vehicles to one—using an iterative and incremental approach to get to a partially-reusable and much lower-cost launch system over the next decade.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Iterative_design",
        "https://en.wikipedia.org/wiki/Iterative_method",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/New_product_development",
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_construction",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Debugging",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Cleanroom_software_engineering",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Software_development_methodology",
        "https://en.wikipedia.org/wiki/Adaptive_software_development",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Disciplined_agile_delivery",
        "https://en.wikipedia.org/wiki/Dynamic_systems_development_method",
        "https://en.wikipedia.org/wiki/Lean_software_development",
        "https://en.wikipedia.org/wiki/Microsoft_Solutions_Framework",
        "https://en.wikipedia.org/wiki/Personal_software_process",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Rational_Unified_Process",
        "https://en.wikipedia.org/wiki/Scaled_agile_framework",
        "https://en.wikipedia.org/wiki/SEMAT",
        "https://en.wikipedia.org/wiki/Team_software_process",
        "https://en.wikipedia.org/wiki/OpenUP",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_documentation",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_project_management",
        "https://en.wikipedia.org/wiki/User_experience",
        "https://en.wikipedia.org/wiki/Continuous_integration",
        "https://en.wikipedia.org/wiki/Continuous_delivery",
        "https://en.wikipedia.org/wiki/Pair_programming",
        "https://en.wikipedia.org/wiki/Specification_by_example",
        "https://en.wikipedia.org/wiki/Programming_tool",
        "https://en.wikipedia.org/wiki/Compiler",
        "https://en.wikipedia.org/wiki/Debugger",
        "https://en.wikipedia.org/wiki/Graphical_user_interface_builder",
        "https://en.wikipedia.org/wiki/UML_tool",
        "https://en.wikipedia.org/wiki/Integrated_development_environment",
        "https://en.wikipedia.org/wiki/Build_automation",
        "https://en.wikipedia.org/wiki/Infrastructure_as_code",
        "https://en.wikipedia.org/wiki/A_Guide_to_the_Business_Analysis_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/IEEE_Standards_Association",
        "https://en.wikipedia.org/wiki/ISO_9001",
        "https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/ITIL",
        "https://en.wikipedia.org/wiki/International_Requirements_Engineering_Board",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Glossary_of_computer_science",
        "https://en.wikipedia.org/wiki/Glossary_of_electrical_and_electronics_engineering",
        "https://en.wikipedia.org/wiki/Outline_of_software_development",
        "https://en.wikipedia.org/wiki/Software_developer",
        "https://en.wikipedia.org/wiki/Iteration",
        "https://en.wikipedia.org/wiki/Software_documentation",
        "https://en.wikipedia.org/wiki/Software_Design_Document",
        "https://en.wikipedia.org/wiki/Usability",
        "https://en.wikipedia.org/wiki/Cross_discipline",
        "https://en.wikipedia.org/wiki/Requirements",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Craig_Larman",
        "https://en.wikipedia.org/wiki/Victor_Basili",
        "https://en.wikipedia.org/wiki/Project_Mercury",
        "https://en.wikipedia.org/wiki/United_States_Agency_for_International_Development",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Action_language",
        "https://en.wikipedia.org/wiki/Array_programming",
        "https://en.wikipedia.org/wiki/Concurrent_computing",
        "https://en.wikipedia.org/wiki/Choreographic_programming",
        "https://en.wikipedia.org/wiki/Relativistic_programming",
        "https://en.wikipedia.org/wiki/Declarative_programming",
        "https://en.wikipedia.org/wiki/Imperative_programming",
        "https://en.wikipedia.org/wiki/Functional_programming",
        "https://en.wikipedia.org/wiki/Functional_logic_programming",
        "https://en.wikipedia.org/wiki/Purely_functional_programming",
        "https://en.wikipedia.org/wiki/Logic_programming",
        "https://en.wikipedia.org/wiki/Abductive_logic_programming",
        "https://en.wikipedia.org/wiki/Answer_set_programming",
        "https://en.wikipedia.org/wiki/Concurrent_logic_programming",
        "https://en.wikipedia.org/wiki/Functional_logic_programming",
        "https://en.wikipedia.org/wiki/Inductive_logic_programming",
        "https://en.wikipedia.org/wiki/Constraint_programming",
        "https://en.wikipedia.org/wiki/Constraint_logic_programming",
        "https://en.wikipedia.org/wiki/Concurrent_constraint_logic_programming",
        "https://en.wikipedia.org/wiki/Dataflow_programming",
        "https://en.wikipedia.org/wiki/Reactive_programming",
        "https://en.wikipedia.org/wiki/Functional_reactive_programming",
        "https://en.wikipedia.org/wiki/Ontology_language",
        "https://en.wikipedia.org/wiki/Query_language",
        "https://en.wikipedia.org/wiki/Differentiable_programming",
        "https://en.wikipedia.org/wiki/Dynamic_programming_language",
        "https://en.wikipedia.org/wiki/Tacit_programming",
        "https://en.wikipedia.org/wiki/Concatenative_programming_language",
        "https://en.wikipedia.org/wiki/Generic_programming",
        "https://en.wikipedia.org/wiki/Imperative_programming",
        "https://en.wikipedia.org/wiki/Declarative_programming",
        "https://en.wikipedia.org/wiki/Procedural_programming",
        "https://en.wikipedia.org/wiki/Polymorphic_code",
        "https://en.wikipedia.org/wiki/Intentional_programming",
        "https://en.wikipedia.org/wiki/Literate_programming",
        "https://en.wikipedia.org/wiki/Metaprogramming",
        "https://en.wikipedia.org/wiki/Automatic_programming",
        "https://en.wikipedia.org/wiki/Inductive_programming",
        "https://en.wikipedia.org/wiki/Reflective_programming",
        "https://en.wikipedia.org/wiki/Template_metaprogramming",
        "https://en.wikipedia.org/wiki/Structured_programming",
        "https://en.wikipedia.org/wiki/Array_programming",
        "https://en.wikipedia.org/wiki/Nondeterministic_programming",
        "https://en.wikipedia.org/wiki/Parallel_computing",
        "https://en.wikipedia.org/wiki/Probabilistic_programming",
        "https://en.wikipedia.org/wiki/Quantum_programming",
        "https://en.wikipedia.org/wiki/Set_theoretic_programming",
        "https://en.wikipedia.org/wiki/Structured_programming",
        "https://en.wikipedia.org/wiki/Structured_concurrency",
        "https://en.wikipedia.org/wiki/Actor_model",
        "https://en.wikipedia.org/wiki/Separation_of_concerns",
        "https://en.wikipedia.org/wiki/Symbolic_programming",
        "https://en.wikipedia.org/wiki/Waterfall_development",
        "https://en.wikipedia.org/wiki/Embedded_software",
        "https://en.wikipedia.org/wiki/New_product_development",
        "https://en.wikipedia.org/wiki/Launch_service_provider",
        "https://en.wikipedia.org/wiki/Space_launch_market_competition",
        "https://en.wikipedia.org/wiki/Private_spaceflight",
        "https://en.wikipedia.org/wiki/SpaceX",
        "https://en.wikipedia.org/wiki/Rocket_Lab",
        "https://en.wikipedia.org/wiki/SpaceX_reusable_launch_system_development_program",
        "https://en.wikipedia.org/wiki/Launch_service_provider",
        "https://en.wikipedia.org/wiki/United_Launch_Alliance",
        "https://en.wikipedia.org/wiki/Atlas_V",
        "https://en.wikipedia.org/wiki/Delta_IV",
        "https://en.wikipedia.org/wiki/Vulcan_launch_vehicle",
        "https://en.wikipedia.org/wiki/Reusable_launch_vehicle",
        "https://en.wikipedia.org/wiki/Adaptive_management",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Continuous_integration",
        "https://en.wikipedia.org/wiki/Dynamic_systems_development_method",
        "https://en.wikipedia.org/wiki/Interaction_design",
        "https://en.wikipedia.org/wiki/Kaizen",
        "https://en.wikipedia.org/wiki/Microsoft_Solutions_Framework",
        "https://en.wikipedia.org/wiki/PDCA",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/John_von_Neumann",
        "https://en.wikipedia.org/wiki/Foreign_Policy",
        "https://en.wikipedia.org/wiki/USAF",
        "https://en.wikipedia.org/wiki/IEEE_Computer",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Computer_programming",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Requirements_engineering",
        "https://en.wikipedia.org/wiki/Site_reliability_engineering",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Systems_analysis",
        "https://en.wikipedia.org/wiki/Formal_methods",
        "https://en.wikipedia.org/wiki/Data_modeling",
        "https://en.wikipedia.org/wiki/Enterprise_architecture",
        "https://en.wikipedia.org/wiki/Functional_specification",
        "https://en.wikipedia.org/wiki/Modeling_language",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Software_archaeology",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Software_quality",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_verification_and_validation",
        "https://en.wikipedia.org/wiki/Structured_analysis",
        "https://en.wikipedia.org/wiki/Essential_Systems_Analysis",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Systems_development_life_cycle",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Enterprise_Unified_Process",
        "https://en.wikipedia.org/wiki/Executable_UML",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/Data_model",
        "https://en.wikipedia.org/wiki/Function_model",
        "https://en.wikipedia.org/wiki/Information_model",
        "https://en.wikipedia.org/wiki/Metamodeling",
        "https://en.wikipedia.org/wiki/Object_model",
        "https://en.wikipedia.org/wiki/Systems_modeling",
        "https://en.wikipedia.org/wiki/View_model",
        "https://en.wikipedia.org/wiki/IDEF",
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Universal_Systems_Language",
        "https://en.wikipedia.org/wiki/Systems_Modeling_Language",
        "https://en.wikipedia.org/wiki/Computer_science",
        "https://en.wikipedia.org/wiki/Computer_engineering",
        "https://en.wikipedia.org/wiki/Information_science",
        "https://en.wikipedia.org/wiki/Project_management",
        "https://en.wikipedia.org/wiki/Risk_management",
        "https://en.wikipedia.org/wiki/Systems_engineering",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}