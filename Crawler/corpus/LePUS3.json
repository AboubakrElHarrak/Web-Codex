{
    "url": "https://en.wikipedia.org/wiki/LePUS3",
    "title": "LePUS3",
    "table_of_contents": [
        "1 Purpose",
        "2 Context",
        "3 Vocabulary",
        "4 Tool support",
        "5 Design patterns",
        "6 Examples",
        "7 References",
        "8 External links"
    ],
    "content": [
        {
            "image2": {
                "url": "//upload.wikimedia.org/wikipedia/commons/a/a9/Composite_pattern_in_LePUS3.png",
                "caption": "\n\t\tExample: Codechart modelling the Composite pattern in LePUS3\n\t"
            },
            "paragraph1": "LePUS3  is a language for modelling and visualizing object-oriented (Java, C++, C#) programs and design patterns.  It is defined as a formal specification language, formulated as an axiomatized subset of First-order predicate logic.  A diagram in LePUS3 is also called a Codechart. LePUS, the name of the first version of the language, is an abbreviation for Language for Pattern Uniform Specification.\n"
        },
        {
            "title": "Purpose",
            "paragraph1": "LePUS3 is tailored for the following purposes:\n",
            "ul1": "Scalability: To model large-scale programs using small Codecharts with only few symbols\nAutomated verifiability: To allow programmers to check fully automatically conformance to design so as to keep the design in synch with the implementation\nProgram visualization: To allow tools to reverse-engineer legible Codecharts from plain source code modeling their design\nPattern implementation: To allow tools to determine automatically whether your program implements a design pattern\nDesign abstraction: To specify unimplemented programs without committing prematurely to implementation minutiae\nGenerality: To model a design pattern not as a specific implementation but as a design motif\nRigour: To allow software designers to be sure exactly what Codecharts represent and reason rigorously about them\n"
        },
        {
            "title": "Context",
            "paragraph1": "LePUS3 belongs to the following families of languages:\n",
            "ul1": "Object-oriented software modeling languages (e.g., UML): LePUS3 is a visual notation that is used to represent the building-blocks in the design of programs object-oriented programming languages\nFormal specification languages: Like other Logic Visual Languages, Codecharts articulate sentences in mathematical logic. LePUS3 is axiomatized in and defined as a recursive (turing-decidable) subset of first-order predicate calculus.  Its semantics are defined using finite structure (mathematical logic).\nArchitecture description languages: LePUS3 is a non-functional specification language used to represent design decisions about programs in class-based object-oriented programming languages (such as Java and C++).\nTool supported specification languages: Verification of Codecharts (checking their consistency with a Java 1.4 program) can be established ('verified') by a click of a button, as demonstrated by the Two-Tier Programming Toolkit.\nSoftware visualization notations are notations which offer a graphical representation of the program, normally generated by reverse-engineering the source code of the program.\n"
        },
        {
            "title": "Vocabulary",
            "paragraph1": "LePUS3 was designed to accommodate for parsimony and for economy of expression.  Its vocabulary consists of only 15 visual tokens.\n",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/f/f1/LePUS3_vocab.png/1200px-LePUS3_vocab.png",
                "caption": "\n\t\tLePUS3 Vocabulary\n\t"
            }
        },
        {
            "title": "Tool support",
            "paragraph1": "The Two-Tier Programming Toolkit\ncan be used to\n",
            "ul1": "create LePUS3 specifications (Codecharts)\nverify automatically[8] the consistency of LePUS3 Codecharts with Java 1.4 programs; and\nreverse-engineer Codecharts from Java source code.\n"
        },
        {
            "title": "Design patterns",
            "paragraph1": "LePUS3 was specifically designed to model, among others, the 'Gang of Four' design patterns, including abstract factory, factory method, adapter, decorator, composite, proxy, iterator, state, strategy, template method, and visitor. (See \"The 'Gang of Four' Companion\")  The abbreviation LePUS for \"Language for Pattern Uniform Specification\" is used because the precursor of this language was primarily concerned with design patterns.  The implementation of design patterns specified in LePUS3 can be automatically verified by the TTP Toolkit.\n"
        },
        {
            "title": "Examples",
            "paragraph1": "LePUS3 is particularly suitable for modelling large programs, design patterns, and object-oriented application frameworks.  It is unsuitable for modelling non object-oriented programs, architectural styles, and undecidable and semi-decidable properties.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Design_pattern",
        "https://en.wikipedia.org/wiki/Formal_specification",
        "https://en.wikipedia.org/wiki/Modeling_language",
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Formal_specification",
        "https://en.wikipedia.org/wiki/Architecture_description_language",
        "https://en.wikipedia.org/wiki/Specification",
        "https://en.wikipedia.org/wiki/Software_visualization",
        "https://en.wikipedia.org/wiki/Design_pattern",
        "https://en.wikipedia.org/wiki/Abstract_factory_pattern",
        "https://en.wikipedia.org/wiki/Factory_method_pattern",
        "https://en.wikipedia.org/wiki/Adapter_pattern",
        "https://en.wikipedia.org/wiki/Decorator_pattern",
        "https://en.wikipedia.org/wiki/Composite_pattern",
        "https://en.wikipedia.org/wiki/Proxy_pattern",
        "https://en.wikipedia.org/wiki/Iterator_pattern",
        "https://en.wikipedia.org/wiki/State_pattern",
        "https://en.wikipedia.org/wiki/Strategy_pattern",
        "https://en.wikipedia.org/wiki/Template_method_pattern",
        "https://en.wikipedia.org/wiki/Visitor_pattern",
        "https://en.wikipedia.org/wiki/Design_patterns",
        "https://en.wikipedia.org/wiki/Application_framework",
        "https://en.wikipedia.org/wiki/Architectural_style",
        "https://en.wikipedia.org/wiki/Undecidable_problem",
        "https://en.wikipedia.org/wiki/Factory_method_pattern",
        "https://en.wikipedia.org/wiki/Enterprise_JavaBean",
        "https://en.wikipedia.org/wiki/Java3D",
        "https://en.wikipedia.org/wiki/JUnit",
        "https://en.wikipedia.org/wiki/LePUS3",
        "https://en.wikipedia.org/wiki/LePUS3",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}