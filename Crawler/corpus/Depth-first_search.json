{
    "url": "https://en.wikipedia.org/wiki/Depth_first_search",
    "title": "Depth-first search",
    "table_of_contents": [
        "1 Properties",
        "2 Example",
        "3 Output of a depth-first search",
        "3.1 Vertex orderings",
        "4 Pseudocode",
        "5 Applications",
        "6 Complexity",
        "7 See also",
        "8 Notes",
        "9 References",
        "10 External links"
    ],
    "content": [
        {
            "paragraph1": "Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking.\n",
            "paragraph2": "A version of depth-first search was investigated in the 19th century by French mathematician Charles Pierre Trémaux as a strategy for solving mazes.\n"
        },
        {
            "title": "Properties",
            "paragraph1": "The time and space analysis of DFS differs according to its application area. In theoretical computer science, DFS is typically used to traverse an entire graph, and takes time \n\n\n\nO\n(\n\n|\n\nV\n\n|\n\n+\n\n|\n\nE\n\n|\n\n)\n\n\n{\\displaystyle O(|V|+|E|)}\n\n, where |V| is the number of vertices  and |E| the number of  edges. This is linear in the size of the graph. In these applications it also uses space \n\n\n\nO\n(\n\n|\n\nV\n\n|\n\n)\n\n\n{\\displaystyle O(|V|)}\n\n in the worst case to store the stack of vertices on the current search path as well as the set of already-visited vertices. Thus, in this setting, the time and space bounds are the same as for breadth-first search and the choice of which of these two algorithms to use depends less on their complexity and more on the different properties of the vertex orderings the two algorithms produce.\n",
            "paragraph2": "For applications of DFS in relation to specific domains, such as searching for solutions in artificial intelligence or web-crawling, the graph to be traversed is often either too large to visit in its entirety or infinite (DFS may suffer from non-termination). In such cases, search is only performed to a limited depth; due to limited resources, such as memory or disk space, one typically does not use data structures to keep track of the set of all previously visited vertices. When search is performed to a limited depth, the time is still linear in terms of the number of expanded vertices and edges (although this number is not the same as the size of the entire graph because some vertices may be searched more than once and others not at all) but the space complexity of this variant of DFS is only proportional to the depth limit, and as a result, is much smaller than the space needed for searching to the same depth using breadth-first search. For such applications, DFS also lends itself much better to heuristic methods for choosing a likely-looking branch. When an appropriate depth limit is not known a priori, iterative deepening depth-first search applies DFS repeatedly with a sequence of increasing limits. In the artificial intelligence mode of analysis, with a branching factor greater than one, iterative deepening increases the running time by only a constant factor over the case in which the correct depth limit is known due to the geometric growth of the number of nodes per level.\n",
            "paragraph3": "DFS may also be used to collect a sample of graph nodes. However, incomplete DFS, similarly to incomplete BFS, is biased towards nodes of high degree.\n"
        },
        {
            "title": "Example",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/7/7f/Depth-First-Search.gif/440px-Depth-First-Search.gif",
                "caption": "\n\t\tAnimated example of a depth-first search\n\t"
            },
            "paragraph1": "For the following graph:\n",
            "paragraph2": "",
            "image2": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/6/61/Graph.traversal.example.svg/400px-Graph.traversal.example.svg.png",
                "caption": "\n"
            },
            "paragraph3": "",
            "paragraph4": "a depth-first search starting at the node A, assuming that the left edges in the shown graph are chosen before right edges, and assuming the search remembers previously visited nodes and will not repeat them (since this is a small graph), will visit the nodes in the following order: A, B, D, F, E, C, G.  The edges traversed in this search form a Trémaux tree, a structure with important applications in graph theory.\nPerforming the same search without remembering previously visited nodes results in visiting the nodes in the order A, B, D, F, E, A, B, D, F, E, etc. forever, caught in the A, B, D, F, E cycle and never reaching C or G.\n",
            "paragraph5": "Iterative deepening is one technique to avoid this infinite loop and would reach all nodes.\n"
        },
        {
            "title": "Output of a depth-first search",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/5/57/Tree_edges.svg/520px-Tree_edges.svg.png",
                "caption": "\n\t\tThe four types of edges defined by a spanning tree\n\t"
            },
            "paragraph1": "The result of a depth-first search of a graph can be conveniently described in terms of a spanning tree of the vertices reached during the search. Based on this spanning tree, the edges of the original graph can be divided into three classes: forward edges, which point from a node of the tree to one of its descendants, back edges, which point from a node to one of its ancestors, and cross edges, which do neither. Sometimes tree edges, edges which belong to the spanning tree itself, are classified separately from forward edges. If the original graph is undirected then all of its edges are tree edges or back edges.\n",
            "subtitle1": "Vertex orderings",
            "paragraph2": "It is also possible to use depth-first search to linearly order the vertices of a graph or tree. There are four possible ways of doing this:\n",
            "ul1": "A preordering is a list of the vertices in the order that they were first visited by the depth-first search algorithm. This is a compact and natural way of describing the progress of the search, as was done earlier in this article. A preordering of an expression tree is the expression in Polish notation.\nA postordering is a list of the vertices in the order that they were last visited by the algorithm. A postordering of an expression tree is the expression in reverse Polish notation.\nA reverse preordering is the reverse of a preordering, i.e. a list of the vertices in the opposite order of their first visit. Reverse preordering is not the same as postordering.\nA reverse postordering is the reverse of a postordering, i.e. a list of the vertices in the opposite order of their last visit. Reverse postordering is not the same as preordering.\n",
            "paragraph3": "For binary trees there is additionally in-ordering and reverse in-ordering.\n",
            "paragraph4": "For example, when searching the directed graph below beginning at node A, the sequence of traversals is either A B D B A C A or A C D C A B A (choosing to first visit B or C from A is up to the algorithm). Note that repeat visits in the form of backtracking to a node, to check if it has still unvisited neighbors, are included here (even if it is found to have none). Thus the possible preorderings are A B D C and A C D B, while the possible postorderings are D B C A and D C B A, and the possible reverse postorderings are A C B D and A B C D.\n",
            "paragraph5": "Reverse postordering produces a topological sorting of any directed acyclic graph. This ordering is also useful in control-flow analysis as it often represents a natural linearization of the control flows. The graph above might represent the flow of control in the code fragment below, and it is natural to consider this code in the order A B C D or A C B D but not natural to use the order A B D C or A C D B.\n"
        },
        {
            "title": "Pseudocode",
            "paragraph1": "Input: \nOutput: \nA recursive implementation of DFS:\n",
            "paragraph2": "A non-recursive implementation of DFS with worst-case space complexity \n\n\n\nO\n(\n\n|\n\nE\n\n|\n\n)\n\n\n{\\displaystyle O(|E|)}\n\n, with the possibility of duplicate vertices on the stack:\n",
            "paragraph3": "These two variations of DFS visit the neighbors of each vertex in the opposite order from each other: the first neighbor of v visited by the recursive variation is  the first one in the list of adjacent edges, while in the iterative variation the first visited neighbor is the last one in the list of adjacent edges. The recursive implementation will visit the nodes from the example graph in the following order: A, B, D, F, E, C, G. The non-recursive implementation will visit the nodes as: A, E, F, B, D, C, G.\n",
            "paragraph4": "The non-recursive implementation is similar to breadth-first search but differs from it in two ways: \n",
            "ol1": "1 - it uses a stack instead of a queue, and\n2 - it delays checking whether a vertex has been discovered until the vertex is popped from the stack rather than making this check before adding the vertex.\n",
            "paragraph5": "If G is a tree, replacing the queue of the breadth-first search algorithm with a stack will yield a depth-first search algorithm. For general graphs, replacing the stack of the iterative depth-first search implementation with a queue would also produce a breadth-first search algorithm, although a somewhat nonstandard one.\n",
            "paragraph6": "Another possible implementation of iterative depth-first search uses a stack of iterators of the list of neighbors of a node, instead of a stack of nodes. This yields the same traversal as recursive DFS.\n"
        },
        {
            "title": "Applications",
            "image1": {
                "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/MAZE_30x20_DFS.ogv/330px--MAZE_30x20_DFS.ogv.jpg",
                "caption": "\n\t\tRandomized algorithm similar to depth-first search used in generating a maze.\n\t"
            },
            "paragraph1": "Algorithms that use depth-first search as a building block include:\n",
            "ul1": "Finding connected components.\nTopological sorting.\nFinding 2-(edge or vertex)-connected components.\nFinding 3-(edge or vertex)-connected components.\nFinding the bridges of a graph.\nGenerating words in order to plot the limit set of a group.\nFinding strongly connected components.\nDetermining whether a species is closer to one species or another in a phylogenetic tree.\nPlanarity testing.[9][10]\nSolving puzzles with only one solution, such as mazes. (DFS can be adapted to find all solutions to a maze by only including nodes on the current path in the visited set.)\nMaze generation may use a randomized depth-first search.\nFinding biconnectivity in graphs.\n"
        },
        {
            "title": "Complexity",
            "paragraph1": "The computational complexity of DFS was investigated by John Reif. More precisely, given a graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n, let \n\n\n\nO\n=\n(\n\nv\n\n1\n\n\n,\n…\n,\n\nv\n\nn\n\n\n)\n\n\n{\\displaystyle O=(v_{1},\\dots ,v_{n})}\n\n be the ordering computed by the standard recursive DFS algorithm. This ordering is called the lexicographic depth-first search ordering. John Reif considered the complexity of computing the lexicographic depth-first search ordering, given a graph and a source. A decision version of the problem (testing whether some vertex u occurs before some vertex v in this order) is P-complete, meaning that it is \"a nightmare for parallel processing\".: 189 \n",
            "paragraph2": "A depth-first search ordering (not necessarily the lexicographic one), can be computed by a randomized parallel algorithm in the complexity class RNC. As of 1997, it remained unknown whether a depth-first traversal could be constructed by a deterministic parallel algorithm, in the complexity class NC.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Search_algorithm",
        "https://en.wikipedia.org/wiki/Time_complexity",
        "https://en.wikipedia.org/wiki/Space_complexity",
        "https://en.wikipedia.org/wiki/Graph_traversal",
        "https://en.wikipedia.org/wiki/Tree_traversal",
        "https://en.wikipedia.org/wiki/Backtracking",
        "https://en.wikipedia.org/wiki/Beam_search",
        "https://en.wikipedia.org/wiki/Bidirectional_search",
        "https://en.wikipedia.org/wiki/Branch_and_bound",
        "https://en.wikipedia.org/wiki/British_Museum_algorithm",
        "https://en.wikipedia.org/wiki/Fringe_search",
        "https://en.wikipedia.org/wiki/Hill_climbing",
        "https://en.wikipedia.org/wiki/Jump_point_search",
        "https://en.wikipedia.org/wiki/Dynamic_programming",
        "https://en.wikipedia.org/wiki/Graph_traversal",
        "https://en.wikipedia.org/wiki/Tree_traversal",
        "https://en.wikipedia.org/wiki/Search_game",
        "https://en.wikipedia.org/wiki/Graph_coloring",
        "https://en.wikipedia.org/wiki/Algorithm",
        "https://en.wikipedia.org/wiki/Tree_data_structure",
        "https://en.wikipedia.org/wiki/Maze_solving_algorithm",
        "https://en.wikipedia.org/wiki/Time_complexity",
        "https://en.wikipedia.org/wiki/Memory_management",
        "https://en.wikipedia.org/wiki/Artificial_intelligence",
        "https://en.wikipedia.org/wiki/Halting_problem",
        "https://en.wikipedia.org/wiki/Heuristics",
        "https://en.wikipedia.org/wiki/Branching_factor",
        "https://en.wikipedia.org/wiki/Bias",
        "https://en.wikipedia.org/wiki/Graph_theory",
        "https://en.wikipedia.org/wiki/Parse_tree",
        "https://en.wikipedia.org/wiki/Polish_notation",
        "https://en.wikipedia.org/wiki/Reverse_Polish_notation",
        "https://en.wikipedia.org/wiki/Topological_sorting",
        "https://en.wikipedia.org/wiki/Directed_acyclic_graph",
        "https://en.wikipedia.org/wiki/Iterator",
        "https://en.wikipedia.org/wiki/Topological_sorting",
        "https://en.wikipedia.org/wiki/Limit_set",
        "https://en.wikipedia.org/wiki/Strongly_connected_components",
        "https://en.wikipedia.org/wiki/Planarity_testing",
        "https://en.wikipedia.org/wiki/Maze",
        "https://en.wikipedia.org/wiki/Maze_generation",
        "https://en.wikipedia.org/wiki/Biconnected_graph",
        "https://en.wikipedia.org/wiki/Analysis_of_algorithms",
        "https://en.wikipedia.org/wiki/John_Reif",
        "https://en.wikipedia.org/wiki/Decision_problem",
        "https://en.wikipedia.org/wiki/Parallel_algorithm",
        "https://en.wikipedia.org/wiki/Tree_traversal",
        "https://en.wikipedia.org/wiki/Search_games",
        "https://en.wikipedia.org/wiki/Shimon_Even",
        "https://en.wikipedia.org/wiki/John_Hopcroft",
        "https://en.wikipedia.org/wiki/Robert_Tarjan",
        "https://en.wikipedia.org/wiki/Journal_of_the_ACM",
        "https://en.wikipedia.org/wiki/Patrice_Ossona_de_Mendez",
        "https://en.wikipedia.org/wiki/Pierre_Rosenstiehl",
        "https://en.wikipedia.org/wiki/Kurt_Mehlhorn",
        "https://en.wikipedia.org/wiki/Combinatorica",
        "https://en.wikipedia.org/wiki/David_Karger",
        "https://en.wikipedia.org/wiki/Rajeev_Motwani",
        "https://en.wikipedia.org/wiki/SIAM_Journal_on_Computing",
        "https://en.wikipedia.org/wiki/Clifford_Stein",
        "https://en.wikipedia.org/wiki/Introduction_to_Algorithms",
        "https://en.wikipedia.org/wiki/Roberto_Tamassia",
        "https://en.wikipedia.org/wiki/Jon_Kleinberg",
        "https://en.wikipedia.org/wiki/Donald_Knuth",
        "https://en.wikipedia.org/wiki/Pat_Morin",
        "https://en.wikipedia.org/wiki/Data_structure",
        "https://en.wikipedia.org/wiki/Algorithm",
        "https://en.wikipedia.org/wiki/Array_data_structure",
        "https://en.wikipedia.org/wiki/Associative_array",
        "https://en.wikipedia.org/wiki/Binary_search_tree",
        "https://en.wikipedia.org/wiki/Fenwick_tree",
        "https://en.wikipedia.org/wiki/Hash_table",
        "https://en.wikipedia.org/wiki/Linked_list",
        "https://en.wikipedia.org/wiki/Segment_tree",
        "https://en.wikipedia.org/wiki/Trie",
        "https://en.wikipedia.org/wiki/Backtracking",
        "https://en.wikipedia.org/wiki/Binary_search",
        "https://en.wikipedia.org/wiki/Dynamic_programming",
        "https://en.wikipedia.org/wiki/Greedy_algorithm",
        "https://en.wikipedia.org/wiki/Minimax",
        "https://en.wikipedia.org/wiki/Sorting_algorithm",
        "https://en.wikipedia.org/wiki/Streaming_algorithm",
        "https://en.wikipedia.org/wiki/Sweep_line_algorithm",
        "https://en.wikipedia.org/wiki/Topological_sorting",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}