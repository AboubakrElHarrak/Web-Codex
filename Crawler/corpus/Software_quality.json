{
    "url": "https://en.wikipedia.org/wiki/Software_quality",
    "title": "Software quality",
    "table_of_contents": [
        "1 Motivation",
        "2 Definitions",
        "2.1 ISO",
        "2.2 ASQ",
        "2.3 NIST",
        "2.4 PMI",
        "2.5 Other general and historic",
        "2.6 Other meanings and controversies",
        "3 Measurement",
        "3.1 Introduction",
        "3.2 Code-based analysis",
        "3.3 Reliability",
        "3.4 Efficiency",
        "3.5 Security",
        "3.6 Maintainability",
        "3.7 Size",
        "3.8 Identifying critical programming errors",
        "3.9 Operationalized quality models",
        "4 Trivia",
        "5 See also",
        "6 Further reading",
        "7 References",
        "8 External links"
    ],
    "content": [
        {
            "paragraph1": "In the context of software engineering, software quality refers to two related but distinct notions:[citation needed]\n",
            "ul1": "Software functional quality reflects how well it complies with or conforms to a given design, based on functional requirements or specifications.[1] That attribute can also be described as the fitness for purpose of a piece of software or how it compares to competitors in the marketplace as a worthwhile product.[2] It is the degree to which the correct software was produced.\nSoftware structural quality refers to how it meets non-functional requirements that support the delivery of the functional requirements, such as robustness or maintainability. It has a lot more to do with the degree to which the software works as needed.\n",
            "paragraph2": "Many aspects of structural quality can be evaluated only statically through the analysis of the software inner structure, its source code (see Software metrics), at the unit level, system level (sometimes referred to as end-to-end testing), which is in effect how its architecture adheres to sound principles of software architecture outlined in a paper on the topic by Object Management Group (OMG).\n",
            "paragraph3": "However some structural qualities, such as usability, can be assessed only dynamically (users or others acting in their behalf interact with the software or, at least, some prototype or partial implementation; even the interaction with a mock version made in cardboard represents a dynamic test because such version can be considered a prototype). Other aspects, such as reliability, might involve not only the software but also the underlying hardware, therefore, it can be assessed both statically and dynamically (stress test).[citation needed]\n",
            "paragraph4": "Functional quality is typically assessed dynamically but it is also possible to use static tests (such as software reviews).[citation needed]\n",
            "paragraph5": "Historically, the structure, classification and terminology of attributes and metrics applicable to software quality management have been derived or extracted from the ISO 9126 and the subsequent ISO/IEC 25000 standard. Based on these models (see Models), the Consortium for IT Software Quality (CISQ) has defined five major desirable structural characteristics needed for a piece of software to provide business value: Reliability, Efficiency, Security, Maintainability and (adequate) Size.\n",
            "paragraph6": "Software quality measurement quantifies to what extent a software program or system rates along each of these five dimensions. An aggregated measure of software quality can be computed through a qualitative or a quantitative scoring scheme or a mix of both and then a weighting system reflecting the priorities. This view of software quality being positioned on a linear continuum is supplemented by the analysis of \"critical programming errors\" that under specific circumstances can lead to catastrophic outages or performance degradations that make a given system unsuitable for use regardless of rating based on aggregated measurements. Such programming errors found at the system level represent up to 90 percent of production issues, whilst at the unit-level, even if far more numerous, programming errors account for less than 10 percent of production issues (see also Ninety-ninety rule). As a consequence, code quality without the context of the whole system, as W. Edwards Deming described it, has limited value.[citation needed]\n",
            "paragraph7": "To view, explore, analyze, and communicate software quality measurements, concepts and techniques of information visualization provide visual, interactive means useful, in particular, if several software quality measures have to be related to each other or to components of a software or system. For example, software maps represent a specialized approach that \"can express and combine information about software development, software quality, and system dynamics\".\n",
            "paragraph8": "Software quality also plays a role in the release phase of a software project. Specifically, the quality and establishment of the release processes (also patch processes), configuration management are important parts of a overall software engineering process.\n"
        },
        {
            "title": "Motivation",
            "paragraph1": "Software quality is motivated by at least two main perspectives:\n",
            "ul1": "Risk management: Software failure has caused more than inconvenience. Software errors can cause human fatalities (see for example: List of software bugs). The causes have ranged from poorly designed user interfaces to direct programming errors,[18][19][20] see for example Boeing 737 case or Unintended acceleration cases[21][22] or Therac-25 cases.[23] This resulted in requirements for the development of some types of software, particularly and historically for software embedded in medical and other devices that regulate critical infrastructures: \"[Engineers who write embedded software] see Java programs stalling for one third of a second to perform garbage collection and update the user interface, and they envision airplanes falling out of the sky.\".[24] In the United States, within the Federal Aviation Administration (FAA), the FAA Aircraft Certification Service provides software programs, policy, guidance and training, focus on software and Complex Electronic Hardware that has an effect on the airborne product (a \"product\" is an aircraft, an engine, or a propeller).[25] Certification standards such as DO-178C, ISO 26262, IEC 62304, etc. provide guidance.\nCost management: As in any other fields of engineering, a software product or service governed by good software quality costs less to maintain, is easier to understand and can change more cost-effective in response to pressing business needs.[26] Industry data demonstrate that poor application structural quality in core business applications (such as enterprise resource planning (ERP), customer relationship management (CRM) or large transaction processing systems in financial services) results in cost, schedule overruns and creates waste in the form of rework (see Muda (Japanese term)).[27][28][29] Moreover, poor structural quality is strongly correlated with high-impact business disruptions due to corrupted data, application outages, security breaches, and performance problems.[30]\nCISQ reports on the cost of poor quality estimates an impact of:\n$2.08 trillion in 2020[31][32]\n$2.84 trillion in 2018\nIBM's Cost of a Data Breach Report 2020 estimates that the average global costs of a data breach:[33][34]\n$3.86 million\nCISQ reports on the cost of poor quality estimates an impact of:\n$2.08 trillion in 2020[31][32]\n$2.84 trillion in 2018\n$2.08 trillion in 2020[31][32]\n$2.84 trillion in 2018\nIBM's Cost of a Data Breach Report 2020 estimates that the average global costs of a data breach:[33][34]\n$3.86 million\n$3.86 million\n"
        },
        {
            "title": "Definitions",
            "subtitle1": "ISO",
            "paragraph1": "Software quality is \"capability of a software product to conform to requirements.\" while for others it can be synonymous with customer- or value-creation or even defect level.\n",
            "subtitle2": "ASQ",
            "paragraph2": "ASQ uses the following definition: Software quality describes the desirable attributes of software products. There are two main approaches exist: defect management and quality attributes.\n",
            "subtitle3": "NIST",
            "paragraph3": "Software Assurance (SA) covers both the property and the process to achieve it:\n",
            "ul1": "[Justifiable] confidence that software is free from vulnerabilities, either intentionally designed into the software or accidentally inserted at any time during its life cycle and that the software functions in the intended manner\nThe planned and systematic set of activities that ensure that software life cycle processes and products conform to requirements, standards, and procedures\n",
            "subtitle4": "PMI",
            "paragraph4": "The Project Management Institute's PMBOK Guide \"Software Extension\" defines not \"Software quality\" itself, but Software Quality Assurance (SQA) as \"a continuous process that audits other software processes to ensure that those processes are being followed (includes for example a software quality management plan).\" whereas Software Quality Control (SCQ) means \"taking care of applying methods, tools, techniques to ensure satisfaction of the work products towards quality requirements for a software under development or modification.\"\n",
            "subtitle5": "Other general and historic",
            "paragraph5": "The first definition of quality history remembers is from Shewhart in the beginning of 20th century: \"There are two common aspects of quality: one of them has to do with the consideration of the quality of a thing as an objective reality independent of the existence of man. The other has to do with what we think, feel or sense as a result of the objective reality. In other words, there is a subjective side of quality.\"\n",
            "paragraph6": "Kitchenham and Pfleeger, further reporting the teachings of David Garvin, identify five different perspectives on quality:\n",
            "ul2": "The transcendental perspective deals with the metaphysical aspect of quality. In this view of quality, it is \"something toward which we strive as an ideal, but may never implement completely\".[46] It can hardly be defined, but is similar to what a federal judge once commented about obscenity: \"I know it when I see it\".[47]\nThe user perspective is concerned with the appropriateness of the product for a given context of use. Whereas the transcendental view is ethereal, the user view is more concrete, grounded in the product characteristics that meet user's needs.[46]\nThe manufacturing perspective represents quality as conformance to requirements. This aspect of quality is stressed by standards such as ISO 9001, which defines quality as \"the degree to which a set of inherent characteristics fulfills requirements\" (ISO/IEC 9001[48]).\nThe product perspective implies that quality can be appreciated by measuring the inherent characteristics of the product.\nThe final perspective of quality is value-based.[37] This perspective recognizes that the different perspectives of quality may have different importance, or value, to various stakeholders.\n",
            "paragraph7": "Tom DeMarco has proposed that \"a product's quality is a function of how much it changes the world for the better.\"[citation needed] This can be interpreted as meaning that functional quality and user satisfaction are more important than structural quality in determining software quality.\n",
            "paragraph8": "Another definition, coined by Gerald Weinberg in Quality Software Management: Systems Thinking, is \"Quality is value to some person.\" This definition stresses that quality is inherently subjective—different people will experience the quality of the same software differently. One strength of this definition is the questions it invites software teams to consider, such as \"Who are the people we want to value our software?\" and \"What will be valuable to them?\".\n",
            "subtitle6": "Other meanings and controversies",
            "paragraph9": "One of the challenges in defining quality is that \"everyone feels they understand it\" and other definitions of software quality could be based on extending the various descriptions of the concept of quality used in business.\n",
            "paragraph10": "Software quality also often gets mixed-up with Quality Assurance or Problem Resolution Management or Quality Control  or DevOps. It does over-lap with before mentioned areas (see also PMI definitions), but is distinctive as it does not solely focus on testing but also on processes, management, improvements, assessments, etc.\n"
        },
        {
            "title": "Measurement",
            "paragraph1": "Although the concepts presented in this section are applicable to both structural and functional software quality, measurement of the latter is essentially performed through testing [see main article: Software testing]. However, testing isn't enough: According to a study, individual programmers are less than 50% efficient at finding bugs in their own software. And most forms of testing are only 35% efficient. This makes it difficult to determine  quality.\n",
            "subtitle1": "Introduction",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/en/5/54/SoftwareQualityCharacteristicAttributeRelationship.png",
                "caption": "\n\t\tRelationship between software desirable characteristics (right) and measurable attributes (left).\n\t"
            },
            "paragraph2": "Software quality measurement is about quantifying to what extent a system or software possesses desirable characteristics. This can be performed through qualitative or quantitative means or a mix of both. In both cases, for each desirable characteristic, there are a set of measurable attributes the existence of which in a piece of software or system tend to be correlated and associated with this characteristic. For example, an attribute associated with portability is the number of target-dependent statements in a program. More precisely, using the Quality Function Deployment approach, these measurable attributes are the \"hows\" that need to be enforced to enable the \"whats\" in the Software Quality definition above.\n",
            "paragraph3": "The structure, classification and terminology of attributes and metrics applicable to software quality management have been derived or extracted from the ISO 9126-3 and the subsequent ISO/IEC 25000:2005 quality model. The main focus is on internal structural quality. Subcategories have been created to handle specific areas like business application architecture and technical characteristics such as data access and manipulation or the notion of transactions.\n",
            "paragraph4": "The dependence tree between software quality characteristics and their measurable attributes is represented in the diagram on the right, where each of the 5 characteristics that matter for the user (right) or owner of the business system depends on measurable attributes (left):\n",
            "ul1": "Application Architecture Practices\nCoding Practices\nApplication Complexity\nDocumentation\nPortability\nTechnical and Functional Volume\n",
            "paragraph5": "Correlations between programming errors and production defects unveil that basic code errors account for 92 percent of the total errors in the source code. These numerous code-level issues eventually count for only 10 percent of the defects in production. Bad software engineering practices at the architecture levels account for only 8 percent of total defects, but consume over half the effort spent on fixing problems, and lead to 90 percent of the serious reliability, security, and efficiency issues in production.\n",
            "subtitle2": "Code-based analysis",
            "paragraph6": "Many of the existing software measures count structural elements of the application that result from parsing the source code for such individual instructions tokens control structures (Complexity), and objects.\n",
            "paragraph7": "Software quality measurement is about quantifying to what extent a system or software rates along these dimensions. The analysis can be performed using a qualitative or quantitative approach or a mix of both to provide an aggregate view [using for example weighted average(s) that reflect relative importance between the factors being measured].\n",
            "paragraph8": "This view of software quality on a linear continuum has to be supplemented by the identification of discrete Critical Programming Errors. These vulnerabilities may not fail a test case, but they are the result of bad practices that under specific circumstances can lead to catastrophic outages, performance degradations, security breaches, corrupted data, and myriad other problems that make a given system de facto unsuitable for use regardless of its rating based on aggregated measurements. A well-known example of vulnerability is the Common Weakness Enumeration, a repository of vulnerabilities in the source code that make applications exposed to security breaches.\n",
            "paragraph9": "The measurement of critical application characteristics involves measuring structural attributes of the application's architecture, coding, and in-line documentation, as displayed in the picture above. Thus, each characteristic is affected by attributes at numerous levels of abstraction in the application and all of which must be included calculating the characteristic's measure if it is to be a valuable predictor of quality outcomes that affect the business. The layered approach to calculating characteristic measures displayed in the figure above was first proposed by Boehm and his colleagues at TRW (Boehm, 1978) and is the approach taken in the ISO 9126 and 25000 series standards. These attributes can be measured from the parsed results of a static analysis of the application source code. Even dynamic characteristics of applications such as reliability and performance efficiency have their causal roots in the static structure of the application.\n",
            "paragraph10": "Structural quality analysis and measurement is performed through the analysis of the source code, the architecture, software framework, database schema in relationship to principles and standards that together define the conceptual and logical architecture of a system. This is distinct from the basic, local, component-level code analysis typically performed by development tools which are mostly concerned with implementation considerations and are crucial during debugging and testing activities.\n",
            "subtitle3": "Reliability",
            "paragraph11": "The root causes of poor reliability are found in a combination of non-compliance with good architectural and coding practices. This non-compliance can be detected by measuring the static quality attributes of an application. Assessing the static attributes underlying an application's reliability provides an estimate of the level of business risk and the likelihood of potential application failures and defects the application will experience when placed in operation.\n",
            "paragraph12": "Assessing reliability requires checks of at least the following software engineering best practices and technical attributes:\n",
            "paragraph13": "Depending on the application architecture and the third-party components used (such as external libraries or frameworks), custom checks should be defined along the lines drawn by the above list of best practices to ensure a better assessment of the reliability of the delivered software.\n",
            "subtitle4": "Efficiency",
            "paragraph14": "As with Reliability, the causes of performance inefficiency are often found in violations of good architectural and coding practice which can be detected by measuring the static quality attributes of an application. These static attributes predict potential operational performance bottlenecks and future scalability problems, especially for applications requiring high execution speed for handling complex algorithms or huge volumes of data.\n",
            "paragraph15": "Assessing performance efficiency requires checking at least the following software engineering best practices and technical attributes:\n",
            "ul2": "Application Architecture Practices\nAppropriate interactions with expensive and/or remote resources\nData access performance and data management\nMemory, network and disk space management\nCompliance with Coding Practices[67] (Best coding practices)\n",
            "subtitle5": "Security",
            "paragraph16": "Software quality includes software security. Many security vulnerabilities result from poor coding and architectural practices such as SQL injection or cross-site scripting. These are well documented in lists maintained by CWE, and the SEI/Computer Emergency Center (CERT) at Carnegie Mellon University.\n",
            "paragraph17": "Assessing security requires at least checking the following software engineering best practices and technical attributes:\n",
            "ul3": "Implementation, Management of a security-aware and hardening development process, e.g. Security Development Lifecycle (Microsoft) or IBM's Secure Engineering Framework.[72]\nSecure Application Architecture Practices[73][74]\nMulti-layer design compliance\nSecurity best practices (Input Validation, SQL Injection, Cross-Site Scripting, Access control etc.)[75][76]\nSecure and good Programming Practices[67]\nError & Exception handling\n",
            "subtitle6": "Maintainability",
            "paragraph18": "Maintainability includes concepts of modularity, understandability, changeability, testability, reusability, and transferability from one development team to another. These do not take the form of critical issues at the code level. Rather, poor maintainability is typically the result of thousands of minor violations with best practices in documentation, complexity avoidance strategy, and basic programming practices that make the difference between clean and easy-to-read code vs. unorganized and difficult-to-read code.\n",
            "paragraph19": "Assessing maintainability requires checking the following software engineering best practices and technical attributes:\n",
            "paragraph20": "Maintainability is closely related to Ward Cunningham's concept of technical debt, which is an expression of the costs resulting of a lack of maintainability. Reasons for why maintainability is low can be classified as reckless vs. prudent and deliberate vs. inadvertent, and often have their origin in developers' inability, lack of time and goals, their carelessness and discrepancies in the creation cost of and benefits from documentation and, in particular, maintainable source code.\n",
            "subtitle7": "Size",
            "paragraph21": "Measuring software size requires that the whole source code be correctly gathered, including database structure scripts, data manipulation source code, component headers, configuration files etc. There are essentially two types of software sizes to be measured, the technical size (footprint) and the functional size:\n",
            "ul4": "There are several software technical sizing methods that have been widely described. The most common technical sizing method is number of Lines of Code (#LOC) per technology, number of files, functions, classes, tables, etc., from which backfiring Function Points can be computed;\nThe most common for measuring functional size is function point analysis. Function point analysis measures the size of the software deliverable from a user's perspective. Function point sizing is done based on user requirements and provides an accurate representation of both size for the developer/estimator and value (functionality to be delivered) and reflects the business functionality being delivered to the customer. The method includes the identification and weighting of user recognizable inputs, outputs and data stores. The size value is then available for use in conjunction with numerous measures to quantify and to evaluate software delivery and performance (development cost per function point; delivered defects per function point; function points per staff month.).\n",
            "paragraph22": "The function point analysis sizing standard is supported by the International Function Point Users Group (IFPUG). It can be applied early in the software development life-cycle and it is not dependent on lines of code like the somewhat inaccurate Backfiring method. The method is technology agnostic and can be used for comparative analysis across organizations and across industries.\n",
            "paragraph23": "Since the inception of Function Point Analysis, several variations have evolved and the family of functional sizing techniques has broadened to include such sizing measures as COSMIC, NESMA, Use Case Points, FP Lite, Early and Quick FPs, and most recently Story Points. However, Function Points has a history of statistical accuracy, and has been used as a common unit of work measurement in numerous application development management (ADM) or outsourcing engagements, serving as the \"currency\" by which services are delivered and performance is measured.\n",
            "paragraph24": "One common limitation to the Function Point methodology is that it is a manual process and therefore it can be labor-intensive and costly in large scale initiatives such as application development or outsourcing engagements. This negative aspect of applying the methodology may be what motivated industry IT leaders to form the Consortium for IT Software Quality focused on introducing a computable metrics standard for automating the measuring of software size while the IFPUG keep promoting a manual approach as most of its activity rely on FP counters certifications.\n",
            "paragraph25": "CISQ defines Sizing as to estimate the size of software to support cost estimating, progress tracking or other related software project management activities. Two standards are used: Automated Function Points to measure the functional size of software and Automated Enhancement Points to measure the size of both functional and non-functional code in one measure.\n",
            "subtitle8": "Identifying critical programming errors",
            "paragraph26": "  \nCritical Programming Errors are specific architectural and/or coding bad practices that result in the highest, immediate or long term, business disruption risk.\n",
            "paragraph27": "These are quite often technology-related and depend heavily on the context, business objectives and risks. Some may consider respect for naming conventions while others – those preparing the ground for a knowledge transfer for example – will consider it as absolutely critical.\n",
            "paragraph28": "Critical Programming Errors can also be classified per CISQ Characteristics. Basic example below: \n",
            "ul5": "Reliability\nAvoid software patterns that will lead to unexpected behavior (Uninitialized variable, null pointers, etc.)\nMethods, procedures and functions doing Insert, Update, Delete, Create Table or Select must include error management\nMulti-thread functions should be made thread safe, for instance servlets or struts action classes must not have instance/non-final static fields\nAvoid software patterns that will lead to unexpected behavior (Uninitialized variable, null pointers, etc.)\nMethods, procedures and functions doing Insert, Update, Delete, Create Table or Select must include error management\nMulti-thread functions should be made thread safe, for instance servlets or struts action classes must not have instance/non-final static fields\nEfficiency\nEnsure centralization of client requests (incoming and data) to reduce network traffic\nAvoid SQL queries that don't use an index against large tables in a loop\nEnsure centralization of client requests (incoming and data) to reduce network traffic\nAvoid SQL queries that don't use an index against large tables in a loop\nSecurity\nAvoid fields in servlet classes that are not final static\nAvoid data access without including error management\nCheck control return codes and implement error handling mechanisms\nEnsure input validation to avoid cross-site scripting flaws or SQL injections flaws\nAvoid fields in servlet classes that are not final static\nAvoid data access without including error management\nCheck control return codes and implement error handling mechanisms\nEnsure input validation to avoid cross-site scripting flaws or SQL injections flaws\nMaintainability\nDeep inheritance trees and nesting should be avoided to improve comprehensibility\nModules should be loosely coupled (fanout, intermediaries) to avoid propagation of modifications\nEnforce homogeneous naming conventions\nDeep inheritance trees and nesting should be avoided to improve comprehensibility\nModules should be loosely coupled (fanout, intermediaries) to avoid propagation of modifications\nEnforce homogeneous naming conventions\n",
            "subtitle9": "Operationalized quality models",
            "paragraph29": "Newer proposals for quality models such as Squale and Quamoco propagate a direct integration of the definition of quality attributes and measurement. By breaking down quality attributes or even defining additional layers, the complex, abstract quality attributes (such as reliability or maintainability) become more manageable and measurable. Those quality models have been applied in industrial contexts but have not received widespread adoption.\n"
        },
        {
            "title": "Trivia",
            "ul1": "\"A science is as mature as its measurement tools.\"[83]\n\"I know it when I see it.\"\n\"You cannot control what you cannot measure.\"[7] (Tom DeMarco)\n\"You cannot inspect quality into a product.\" (W. Edwards Deming)[84]\n\"The bitterness of poor quality remains long after the sweetness of meeting the schedule has been forgotten.\" (Anonymous)[84]\n\"If you don't start with a spec, every piece of code you write is a patch.\" (Leslie Lamport)\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Functional_requirements",
        "https://en.wikipedia.org/wiki/Static_testing",
        "https://en.wikipedia.org/wiki/Software_metric",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Object_Management_Group",
        "https://en.wikipedia.org/wiki/Usability",
        "https://en.wikipedia.org/wiki/Dynamic_testing",
        "https://en.wikipedia.org/wiki/Software_review",
        "https://en.wikipedia.org/wiki/Software_quality_management",
        "https://en.wikipedia.org/wiki/ISO_9126",
        "https://en.wikipedia.org/wiki/CISQ",
        "https://en.wikipedia.org/wiki/Business_value",
        "https://en.wikipedia.org/wiki/Information_visualization",
        "https://en.wikipedia.org/wiki/Software_map",
        "https://en.wikipedia.org/wiki/Release_management",
        "https://en.wikipedia.org/wiki/Configuration_management",
        "https://en.wikipedia.org/wiki/Risk_Management",
        "https://en.wikipedia.org/wiki/List_of_software_bugs",
        "https://en.wikipedia.org/wiki/Programming_error",
        "https://en.wikipedia.org/wiki/Sudden_unintended_acceleration",
        "https://en.wikipedia.org/wiki/Embedded_software",
        "https://en.wikipedia.org/wiki/Federal_Aviation_Administration",
        "https://en.wikipedia.org/wiki/ISO_26262",
        "https://en.wikipedia.org/wiki/IEC_62304",
        "https://en.wikipedia.org/wiki/Cost_management",
        "https://en.wikipedia.org/wiki/Business_application",
        "https://en.wikipedia.org/wiki/Enterprise_resource_planning",
        "https://en.wikipedia.org/wiki/Customer_relationship_management",
        "https://en.wikipedia.org/wiki/Transaction_processing",
        "https://en.wikipedia.org/wiki/American_Society_for_Quality",
        "https://en.wikipedia.org/wiki/Project_Management_Institute",
        "https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Tom_DeMarco",
        "https://en.wikipedia.org/wiki/Gerald_Weinberg",
        "https://en.wikipedia.org/wiki/Quality_assurance",
        "https://en.wikipedia.org/wiki/Problem_management",
        "https://en.wikipedia.org/wiki/Quality_control",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Quality_Function_Deployment",
        "https://en.wikipedia.org/wiki/ISO_9126",
        "https://en.wikipedia.org/wiki/Software_complexity",
        "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
        "https://en.wikipedia.org/wiki/Source_code",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Software_framework",
        "https://en.wikipedia.org/wiki/Database_schema",
        "https://en.wikipedia.org/wiki/Development_tool",
        "https://en.wikipedia.org/wiki/Debugging",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Best_coding_practices",
        "https://en.wikipedia.org/wiki/CERT_Coordination_Center",
        "https://en.wikipedia.org/wiki/Security_Development_Lifecycle",
        "https://en.wikipedia.org/wiki/Code_smells",
        "https://en.wikipedia.org/wiki/Duplicate_code",
        "https://en.wikipedia.org/wiki/Technical_debt",
        "https://en.wikipedia.org/wiki/Source_code",
        "https://en.wikipedia.org/wiki/Software_Sizing",
        "https://en.wikipedia.org/wiki/Lines_of_Code",
        "https://en.wikipedia.org/wiki/Function_point",
        "https://en.wikipedia.org/wiki/IFPUG",
        "https://en.wikipedia.org/wiki/CISQ",
        "https://en.wikipedia.org/wiki/Uninitialized_variable",
        "https://en.wikipedia.org/wiki/Apache_Struts",
        "https://en.wikipedia.org/wiki/Squale",
        "https://en.wikipedia.org/wiki/I_know_it_when_I_see_it",
        "https://en.wikipedia.org/wiki/Tom_DeMarco",
        "https://en.wikipedia.org/wiki/Leslie_Lamport",
        "https://en.wikipedia.org/wiki/Anomaly_in_software",
        "https://en.wikipedia.org/wiki/Accessibility",
        "https://en.wikipedia.org/wiki/Availability",
        "https://en.wikipedia.org/wiki/Best_coding_practices",
        "https://en.wikipedia.org/wiki/Cyclomatic_complexity",
        "https://en.wikipedia.org/wiki/Coding_conventions",
        "https://en.wikipedia.org/wiki/Computer_bug",
        "https://en.wikipedia.org/wiki/Dependability",
        "https://en.wikipedia.org/wiki/GQM",
        "https://en.wikipedia.org/wiki/Programming_style",
        "https://en.wikipedia.org/wiki/Quality_control",
        "https://en.wikipedia.org/wiki/Total_quality_management",
        "https://en.wikipedia.org/wiki/Requirements_management",
        "https://en.wikipedia.org/wiki/Security",
        "https://en.wikipedia.org/wiki/Security_engineering",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Software_quality_control",
        "https://en.wikipedia.org/wiki/Software_metric",
        "https://en.wikipedia.org/wiki/Software_reusability",
        "https://en.wikipedia.org/wiki/Software_standard",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Software_testability",
        "https://en.wikipedia.org/wiki/Static_program_analysis",
        "https://en.wikipedia.org/wiki/Capers_Jones",
        "https://en.wikipedia.org/wiki/American_Society_for_Quality",
        "https://en.wikipedia.org/wiki/Springer_Nature",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/CISQ",
        "https://en.wikipedia.org/wiki/International_Requirements_Engineering_Board",
        "https://en.wikipedia.org/wiki/Software_sizing",
        "https://en.wikipedia.org/wiki/Software_portability",
        "https://en.wikipedia.org/wiki/Reusability",
        "https://en.wikipedia.org/wiki/Scalability",
        "https://en.wikipedia.org/wiki/Software_testability",
        "https://en.wikipedia.org/wiki/Understandability",
        "https://en.wikipedia.org/wiki/Loose_coupling",
        "https://en.wikipedia.org/wiki/Usability",
        "https://en.wikipedia.org/wiki/Reliability_engineering",
        "https://en.wikipedia.org/wiki/Adaptability",
        "https://en.wikipedia.org/wiki/Accuracy_and_precision",
        "https://en.wikipedia.org/wiki/Algorithmic_efficiency",
        "https://en.wikipedia.org/wiki/Software_development_security",
        "https://en.wikipedia.org/wiki/Software_system_safety",
        "https://en.wikipedia.org/wiki/List_of_system_quality_attributes",
        "https://en.wikipedia.org/wiki/Software_quality_management",
        "https://en.wikipedia.org/wiki/Software_quality_control",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Computer_programming",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Requirements_engineering",
        "https://en.wikipedia.org/wiki/Site_reliability_engineering",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Systems_analysis",
        "https://en.wikipedia.org/wiki/Formal_methods",
        "https://en.wikipedia.org/wiki/Data_modeling",
        "https://en.wikipedia.org/wiki/Enterprise_architecture",
        "https://en.wikipedia.org/wiki/Functional_specification",
        "https://en.wikipedia.org/wiki/Modeling_language",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Software_archaeology",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_verification_and_validation",
        "https://en.wikipedia.org/wiki/Structured_analysis",
        "https://en.wikipedia.org/wiki/Essential_Systems_Analysis",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Systems_development_life_cycle",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Enterprise_Unified_Process",
        "https://en.wikipedia.org/wiki/Executable_UML",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/Data_model",
        "https://en.wikipedia.org/wiki/Function_model",
        "https://en.wikipedia.org/wiki/Information_model",
        "https://en.wikipedia.org/wiki/Metamodeling",
        "https://en.wikipedia.org/wiki/Object_model",
        "https://en.wikipedia.org/wiki/Systems_modeling",
        "https://en.wikipedia.org/wiki/View_model",
        "https://en.wikipedia.org/wiki/IDEF",
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Universal_Systems_Language",
        "https://en.wikipedia.org/wiki/Systems_Modeling_Language",
        "https://en.wikipedia.org/wiki/Computer_science",
        "https://en.wikipedia.org/wiki/Computer_engineering",
        "https://en.wikipedia.org/wiki/Information_science",
        "https://en.wikipedia.org/wiki/Project_management",
        "https://en.wikipedia.org/wiki/Risk_management",
        "https://en.wikipedia.org/wiki/Systems_engineering",
        "https://en.wikipedia.org/wiki/Computer_science",
        "https://en.wikipedia.org/wiki/ACM_Computing_Classification_System",
        "https://en.wikipedia.org/wiki/Computer_hardware",
        "https://en.wikipedia.org/wiki/Printed_circuit_board",
        "https://en.wikipedia.org/wiki/Peripheral",
        "https://en.wikipedia.org/wiki/Integrated_circuit",
        "https://en.wikipedia.org/wiki/Very_Large_Scale_Integration",
        "https://en.wikipedia.org/wiki/System_on_a_chip",
        "https://en.wikipedia.org/wiki/Green_computing",
        "https://en.wikipedia.org/wiki/Electronic_design_automation",
        "https://en.wikipedia.org/wiki/Hardware_acceleration",
        "https://en.wikipedia.org/wiki/Computer_architecture",
        "https://en.wikipedia.org/wiki/Embedded_system",
        "https://en.wikipedia.org/wiki/Dependability",
        "https://en.wikipedia.org/wiki/Computer_network",
        "https://en.wikipedia.org/wiki/Network_architecture",
        "https://en.wikipedia.org/wiki/Network_protocol",
        "https://en.wikipedia.org/wiki/Networking_hardware",
        "https://en.wikipedia.org/wiki/Network_scheduler",
        "https://en.wikipedia.org/wiki/Network_performance",
        "https://en.wikipedia.org/wiki/Network_service",
        "https://en.wikipedia.org/wiki/Middleware",
        "https://en.wikipedia.org/wiki/Virtual_machine",
        "https://en.wikipedia.org/wiki/Operating_system",
        "https://en.wikipedia.org/wiki/Programming_language_theory",
        "https://en.wikipedia.org/wiki/Programming_tool",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Programming_language",
        "https://en.wikipedia.org/wiki/Compiler_construction",
        "https://en.wikipedia.org/wiki/Modeling_language",
        "https://en.wikipedia.org/wiki/Software_framework",
        "https://en.wikipedia.org/wiki/Integrated_development_environment",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_repository",
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_construction",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Programming_team",
        "https://en.wikipedia.org/wiki/Theory_of_computation",
        "https://en.wikipedia.org/wiki/Model_of_computation",
        "https://en.wikipedia.org/wiki/Formal_language",
        "https://en.wikipedia.org/wiki/Automata_theory",
        "https://en.wikipedia.org/wiki/Computability_theory",
        "https://en.wikipedia.org/wiki/Computational_complexity_theory",
        "https://en.wikipedia.org/wiki/Logic_in_computer_science",
        "https://en.wikipedia.org/wiki/Algorithm",
        "https://en.wikipedia.org/wiki/Algorithm_design",
        "https://en.wikipedia.org/wiki/Analysis_of_algorithms",
        "https://en.wikipedia.org/wiki/Algorithmic_efficiency",
        "https://en.wikipedia.org/wiki/Randomized_algorithm",
        "https://en.wikipedia.org/wiki/Computational_geometry",
        "https://en.wikipedia.org/wiki/Discrete_mathematics",
        "https://en.wikipedia.org/wiki/Probability",
        "https://en.wikipedia.org/wiki/Statistics",
        "https://en.wikipedia.org/wiki/Mathematical_software",
        "https://en.wikipedia.org/wiki/Information_theory",
        "https://en.wikipedia.org/wiki/Mathematical_analysis",
        "https://en.wikipedia.org/wiki/Numerical_analysis",
        "https://en.wikipedia.org/wiki/Theoretical_computer_science",
        "https://en.wikipedia.org/wiki/Information_system",
        "https://en.wikipedia.org/wiki/Database",
        "https://en.wikipedia.org/wiki/Computer_data_storage",
        "https://en.wikipedia.org/wiki/Enterprise_information_system",
        "https://en.wikipedia.org/wiki/Social_software",
        "https://en.wikipedia.org/wiki/Geographic_information_system",
        "https://en.wikipedia.org/wiki/Decision_support_system",
        "https://en.wikipedia.org/wiki/Process_control",
        "https://en.wikipedia.org/wiki/Multimedia_database",
        "https://en.wikipedia.org/wiki/Data_mining",
        "https://en.wikipedia.org/wiki/Digital_library",
        "https://en.wikipedia.org/wiki/Computing_platform",
        "https://en.wikipedia.org/wiki/Digital_marketing",
        "https://en.wikipedia.org/wiki/World_Wide_Web",
        "https://en.wikipedia.org/wiki/Information_retrieval",
        "https://en.wikipedia.org/wiki/Computer_security",
        "https://en.wikipedia.org/wiki/Cryptography",
        "https://en.wikipedia.org/wiki/Formal_methods",
        "https://en.wikipedia.org/wiki/Intrusion_detection_system",
        "https://en.wikipedia.org/wiki/Computer_security_compromised_by_hardware_failure",
        "https://en.wikipedia.org/wiki/Network_security",
        "https://en.wikipedia.org/wiki/Information_security",
        "https://en.wikipedia.org/wiki/Application_security",
        "https://en.wikipedia.org/wiki/Interaction_design",
        "https://en.wikipedia.org/wiki/Social_computing",
        "https://en.wikipedia.org/wiki/Ubiquitous_computing",
        "https://en.wikipedia.org/wiki/Computer_accessibility",
        "https://en.wikipedia.org/wiki/Concurrent_computing",
        "https://en.wikipedia.org/wiki/Parallel_computing",
        "https://en.wikipedia.org/wiki/Distributed_computing",
        "https://en.wikipedia.org/wiki/Multiprocessing",
        "https://en.wikipedia.org/wiki/Artificial_intelligence",
        "https://en.wikipedia.org/wiki/Natural_language_processing",
        "https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning",
        "https://en.wikipedia.org/wiki/Computer_vision",
        "https://en.wikipedia.org/wiki/Automated_planning_and_scheduling",
        "https://en.wikipedia.org/wiki/Mathematical_optimization",
        "https://en.wikipedia.org/wiki/Control_theory",
        "https://en.wikipedia.org/wiki/Philosophy_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Distributed_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Supervised_learning",
        "https://en.wikipedia.org/wiki/Unsupervised_learning",
        "https://en.wikipedia.org/wiki/Reinforcement_learning",
        "https://en.wikipedia.org/wiki/Computer_graphics",
        "https://en.wikipedia.org/wiki/Computer_animation",
        "https://en.wikipedia.org/wiki/Photo_manipulation",
        "https://en.wikipedia.org/wiki/Graphics_processing_unit",
        "https://en.wikipedia.org/wiki/Mixed_reality",
        "https://en.wikipedia.org/wiki/Virtual_reality",
        "https://en.wikipedia.org/wiki/Image_compression",
        "https://en.wikipedia.org/wiki/Solid_modeling",
        "https://en.wikipedia.org/wiki/Enterprise_software",
        "https://en.wikipedia.org/wiki/Computational_mathematics",
        "https://en.wikipedia.org/wiki/Computational_physics",
        "https://en.wikipedia.org/wiki/Computational_chemistry",
        "https://en.wikipedia.org/wiki/Computational_biology",
        "https://en.wikipedia.org/wiki/Computational_social_science",
        "https://en.wikipedia.org/wiki/Computational_engineering",
        "https://en.wikipedia.org/wiki/Health_informatics",
        "https://en.wikipedia.org/wiki/Digital_art",
        "https://en.wikipedia.org/wiki/Electronic_publishing",
        "https://en.wikipedia.org/wiki/Cyberwarfare",
        "https://en.wikipedia.org/wiki/Electronic_voting",
        "https://en.wikipedia.org/wiki/Video_game",
        "https://en.wikipedia.org/wiki/Word_processor",
        "https://en.wikipedia.org/wiki/Operations_research",
        "https://en.wikipedia.org/wiki/Educational_technology",
        "https://en.wikipedia.org/wiki/Document_management_system",
        "https://en.wikipedia.org/wiki/Outline_of_computer_science",
        "https://en.wikipedia.org/wiki/Software_quality",
        "https://en.wikipedia.org/wiki/Software_quality",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}