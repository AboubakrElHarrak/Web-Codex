{
    "url": "https://en.wikipedia.org/wiki/Debugging",
    "title": "Debugging",
    "table_of_contents": [
        "1 Etymology",
        "2 Scope",
        "3 Tools",
        "4 Debugging process",
        "5 Techniques",
        "6 Debugging for embedded systems",
        "7 Anti-debugging",
        "8 See also",
        "9 References",
        "10 Further reading",
        "11 External links"
    ],
    "content": [
        {
            "paragraph1": "In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems.\n",
            "paragraph2": "Debugging tactics can involve interactive debugging, control flow analysis, unit testing, integration testing, log file analysis, monitoring at the application or system level, memory dumps, and profiling. Many programming languages and software development tools also offer programs to aid in debugging, known as debuggers.\n"
        },
        {
            "title": "Etymology",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/f/ff/First_Computer_Bug%2C_1945.jpg/440px-First_Computer_Bug%2C_1945.jpg",
                "caption": "\n\t\tA computer log entry from the Mark II, with a moth taped to the page\n\t"
            },
            "paragraph1": "The terms \"bug\" and \"debugging\" are popularly attributed to Admiral Grace Hopper in the 1940s. While she was working on a Mark II computer at Harvard University, her associates discovered a moth stuck in a relay and thereby impeding operation, whereupon she remarked that they were \"debugging\" the system. However, the term \"bug\", in the sense of \"technical error\", dates back at least to 1878 and Thomas Edison (see software bug for a full discussion). Similarly, the term \"debugging\" seems to have been used as a term in aeronautics before entering the world of computers. Indeed, in an interview Grace Hopper remarked that she was not coining the term.[citation needed] The moth fit the already existing terminology, so it was saved. A letter from J. Robert Oppenheimer (director of the WWII atomic bomb \"Manhattan\" project at Los Alamos, NM) used the term in a letter to Dr. Ernest Lawrence at UC Berkeley, dated October 27, 1944, regarding the recruitment of additional technical staff.\n",
            "paragraph2": "The Oxford English Dictionary entry for \"debug\" quotes the term \"debugging\" used in reference to airplane engine testing in a 1945 article in the Journal of the Royal Aeronautical Society. An article in \"Airforce\" (June 1945 p. 50) also refers to debugging, this time of aircraft cameras. Hopper's bug was found on September 9, 1947. Computer programmers did not adopt the term until the early 1950s.\nThe seminal article by Gill in 1951 is the earliest in-depth discussion of programming errors, but it does not use the term \"bug\" or \"debugging\".\nIn the ACM's digital library, the term \"debugging\" is first used in three papers from 1952 ACM National Meetings. Two of the three use the term in quotation marks.\nBy 1963 \"debugging\" was a common-enough term to be mentioned in passing without explanation on page 1 of the CTSS manual.\n",
            "paragraph3": "Peggy A. Kidwell's article Stalking the Elusive Computer Bug discusses the etymology of \"bug\" and \"debug\" in greater detail.\n"
        },
        {
            "title": "Scope",
            "paragraph1": "As software and electronic systems have become generally more complex, the various common debugging techniques have expanded with more methods to detect anomalies, assess impact, and schedule software patches or full updates to a system. The words \"anomaly\" and \"discrepancy\" can be used, as being more neutral terms, to avoid the words \"error\" and \"defect\" or \"bug\" where there might be an implication that all so-called errors, defects or bugs must be fixed (at all costs). Instead, an impact assessment can be made to determine if changes to remove an anomaly (or discrepancy) would be cost-effective for the system, or perhaps a scheduled new release might render the change(s) unnecessary. Not all issues are safety-critical or mission-critical in a system. Also, it is important to avoid the situation where a change might be more upsetting to users, long-term, than living with the known problem(s) (where the \"cure would be worse than the disease\"). Basing decisions of the acceptability of some anomalies can avoid a culture of a \"zero-defects\" mandate, where people might be tempted to deny the existence of problems so that the result would appear as zero defects. Considering the collateral issues, such as the cost-versus-benefit impact assessment, then broader debugging techniques will expand to determine the frequency of anomalies (how often the same \"bugs\" occur) to help assess their impact to the overall system.\n"
        },
        {
            "title": "Tools",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/3/37/Xbox-Debug-Console-Set.jpg/500px-Xbox-Debug-Console-Set.jpg",
                "caption": "\n\t\tDebugging on video game consoles is usually done with special hardware such as this Xbox debug unit intended for developers.\n\t"
            },
            "paragraph1": "Debugging ranges in complexity from fixing simple errors to performing lengthy and tiresome tasks of data collection, analysis, and scheduling updates. The debugging skill of the programmer can be a major factor in the ability to debug a problem, but the difficulty of software debugging varies greatly with the complexity of the system, and also depends, to some extent, on the programming language(s) used and the available tools, such as debuggers. Debuggers are software tools which enable the programmer to monitor the execution of a program, stop it, restart it, set breakpoints, and change values in memory. The term debugger can also refer to the person who is doing the debugging.\n",
            "paragraph2": "Generally, high-level programming languages, such as Java, make debugging easier, because they have features such as exception handling and type checking that make real sources of erratic behaviour easier to spot. In programming languages such as C or assembly, bugs may cause silent problems such as memory corruption, and it is often difficult to see where the initial problem happened. In those cases, memory debugger tools may be needed.\n",
            "paragraph3": "In certain situations, general purpose software tools that are language specific in nature can be very useful. These take the form of static code analysis tools. These tools look for a very specific set of known problems, some common and some rare, within the source code, concentrating more on the semantics (e.g. data flow) rather than the syntax, as compilers and interpreters do.\n",
            "paragraph4": "Both commercial and free tools exist for various languages; some claim to be able to detect hundreds of different problems. These tools can be extremely useful when checking very large source trees, where it is impractical to do code walk-throughs. A typical example of a problem detected would be a variable dereference that occurs before the variable is assigned a value. As another example, some such tools perform strong type checking when the language does not require it. Thus, they are better at locating likely errors in code that is syntactically correct. But these tools have a reputation of false positives, where correct code is flagged as dubious. The old Unix lint program is an early example.\n",
            "paragraph5": "For debugging electronic hardware (e.g., computer hardware) as well as low-level software (e.g., BIOSes, device drivers) and firmware, instruments such as oscilloscopes, logic analyzers, or in-circuit emulators (ICEs) are often used, alone or in combination. An ICE may perform many of the typical software debugger's tasks on low-level software and firmware.\n"
        },
        {
            "title": "Debugging process",
            "paragraph1": "Normally the first step in debugging is to attempt to reproduce the problem. This can be a non-trivial task, for example as with parallel processes and some Heisenbugs. Also, specific user environment and usage history can make it difficult to reproduce the problem.\n",
            "paragraph2": "After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug. For example, a bug in a compiler can make it crash when parsing some large source file. However, after simplification of the test case, only few lines from the original source file can be sufficient to reproduce the same crash. Such simplification can be made manually, using a divide-and-conquer approach. The programmer will try to remove some parts of original test case and check if the problem still exists. When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.\n",
            "paragraph3": "After the test case is sufficiently simplified, a programmer can use a debugger tool to examine program states (values of variables, plus the call stack) and track down the origin of the problem(s). Alternatively, tracing can be used. In simple cases, tracing is just a few print statements, which output the values of variables at certain points of program execution.[citation needed]\n"
        },
        {
            "title": "Techniques",
            "ul1": "Interactive debugging\nPrint debugging (or tracing) is the act of watching (live or recorded) trace statements, or print statements, that indicate the flow of execution of a process. This is sometimes called printf debugging, due to the use of the printf function in C. This kind of debugging was turned on by the command TRON in the original versions of the novice-oriented BASIC programming language. TRON stood for, \"Trace On.\" TRON caused the line numbers of each BASIC command line to print as the program ran.\nRemote debugging is the process of debugging a program running on a system different from the debugger. To start remote debugging, a debugger connects to a remote system over a communications link such as a local area network. The debugger can then control the execution of the program on the remote system and retrieve information about its state.\nPost-mortem debugging is debugging of the program after it has already crashed. Related techniques often include various tracing techniques like examining log files, outputting a call stack on crash,[9] and analysis of memory dump (or core dump) of the crashed process. The dump of the process could be obtained automatically by the system (for example, when the process has terminated due to an unhandled exception), or by a programmer-inserted instruction, or manually by the interactive user.\n\"Wolf fence\" algorithm: Edward Gauss described this simple but very useful and now famous algorithm in a 1982 article for Communications of the ACM as follows: \"There's one wolf in Alaska; how do you find it? First build a fence down the middle of the state, wait for the wolf to howl, determine which side of the fence it is on. Repeat process on that side only, until you get to the point where you can see the wolf.\"[10] This is implemented e.g. in the Git version control system as the command git bisect, which uses the above algorithm to determine which commit introduced a particular bug.\nRecord and replay debugging is the technique of creating a program execution recording (e.g. using Mozilla's free rr debugging tool; enabling reversible debugging/execution), which can be replayed and interactively debugged. Useful for remote debugging and debugging intermittent, non-determinstic, and other hard-to-reproduce defects.\nDelta Debugging –  a technique of automating test case simplification.[11]: p.123 \nSaff Squeeze –  a technique of isolating failure within the test using progressive inlining of parts of the failing test.[12]\nCausality tracking: There are techniques to track the cause effect chains in the computation.[13] Those techniques can be tailored for specific bugs, such as null pointer dereferences.[14][15]\n"
        },
        {
            "title": "Debugging for embedded systems",
            "paragraph1": "In contrast to the general purpose computer software design environment, a primary characteristic of embedded environments is the sheer number of different platforms available to the developers (CPU architectures, vendors, operating systems, and their variants). Embedded systems are, by definition, not general-purpose designs: they are typically developed for a single task (or small range of tasks), and the platform is chosen specifically to optimize that application. Not only does this fact make life tough for embedded system developers, it also makes debugging and testing of these systems harder as well, since different debugging tools are needed for different platforms.\n",
            "paragraph2": "Despite the challenge of heterogeneity mentioned above, some debuggers have been developed commercially as well as research prototypes. Examples of commercial solutions come from Green Hills Software, Lauterbach GmbH and Microchip's MPLAB-ICD (for in-circuit debugger). Two examples of research prototype tools are Aveksha and Flocklab. They all leverage a functionality available on low-cost embedded processors, an On-Chip Debug Module (OCDM), whose signals are exposed through a standard JTAG interface. They are benchmarked based on how much change to the application is needed and the rate of events that they can keep up with.\n",
            "paragraph3": "In addition to the typical task of identifying bugs in the system, embedded system debugging also seeks to collect information about the operating states of the system that may then be used to analyze the system: to find ways to boost its performance or to optimize other important characteristics (e.g. energy consumption, reliability, real-time response, etc.).\n"
        },
        {
            "title": "Anti-debugging",
            "paragraph1": "Anti-debugging is \"the implementation of one or more techniques within computer code that hinders attempts at reverse engineering or debugging a target process\". It is actively used by recognized publishers in copy-protection schemas, but is also used by malware to complicate its detection and elimination. Techniques used in anti-debugging include:\n",
            "ul1": "API-based: check for the existence of a debugger using system information\nException-based: check to see if exceptions are interfered with\nProcess and thread blocks: check whether process and thread blocks have been manipulated\nModified code: check for code modifications made by a debugger handling software breakpoints\nHardware- and register-based: check for hardware breakpoints and CPU registers\nTiming and latency: check the time taken for the execution of instructions\nDetecting and penalizing debugger[21]\n",
            "paragraph2": "An early example of anti-debugging existed in early versions of Microsoft Word which, if a debugger was detected, produced a message that said, \"The tree of evil bears bitter fruit. Now trashing program disk.\", after which it caused the floppy disk drive to emit alarming noises with the intent of scaring the user away from attempting it again.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Requirements_analysis",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_construction",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Cleanroom_software_engineering",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Software_development_methodology",
        "https://en.wikipedia.org/wiki/Adaptive_software_development",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Disciplined_agile_delivery",
        "https://en.wikipedia.org/wiki/Dynamic_systems_development_method",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Lean_software_development",
        "https://en.wikipedia.org/wiki/Microsoft_Solutions_Framework",
        "https://en.wikipedia.org/wiki/Personal_software_process",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Rational_Unified_Process",
        "https://en.wikipedia.org/wiki/Scaled_agile_framework",
        "https://en.wikipedia.org/wiki/SEMAT",
        "https://en.wikipedia.org/wiki/Team_software_process",
        "https://en.wikipedia.org/wiki/OpenUP",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_documentation",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_project_management",
        "https://en.wikipedia.org/wiki/User_experience",
        "https://en.wikipedia.org/wiki/Continuous_integration",
        "https://en.wikipedia.org/wiki/Continuous_delivery",
        "https://en.wikipedia.org/wiki/Pair_programming",
        "https://en.wikipedia.org/wiki/Specification_by_example",
        "https://en.wikipedia.org/wiki/Programming_tool",
        "https://en.wikipedia.org/wiki/Compiler",
        "https://en.wikipedia.org/wiki/Debugger",
        "https://en.wikipedia.org/wiki/Graphical_user_interface_builder",
        "https://en.wikipedia.org/wiki/UML_tool",
        "https://en.wikipedia.org/wiki/Integrated_development_environment",
        "https://en.wikipedia.org/wiki/Build_automation",
        "https://en.wikipedia.org/wiki/Infrastructure_as_code",
        "https://en.wikipedia.org/wiki/A_Guide_to_the_Business_Analysis_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/IEEE_Standards_Association",
        "https://en.wikipedia.org/wiki/ISO_9001",
        "https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge",
        "https://en.wikipedia.org/wiki/ITIL",
        "https://en.wikipedia.org/wiki/International_Requirements_Engineering_Board",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Glossary_of_computer_science",
        "https://en.wikipedia.org/wiki/Glossary_of_electrical_and_electronics_engineering",
        "https://en.wikipedia.org/wiki/Outline_of_software_development",
        "https://en.wikipedia.org/wiki/Computer_programming",
        "https://en.wikipedia.org/wiki/Software_development",
        "https://en.wikipedia.org/wiki/Software_bug",
        "https://en.wikipedia.org/wiki/Computer_program",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Software_system",
        "https://en.wikipedia.org/wiki/Interactive",
        "https://en.wikipedia.org/wiki/Control_flow",
        "https://en.wikipedia.org/wiki/Unit_testing",
        "https://en.wikipedia.org/wiki/Integration_testing",
        "https://en.wikipedia.org/wiki/Logfile",
        "https://en.wikipedia.org/wiki/Application_monitoring",
        "https://en.wikipedia.org/wiki/System_monitoring",
        "https://en.wikipedia.org/wiki/Memory_dump",
        "https://en.wikipedia.org/wiki/Debugger",
        "https://en.wikipedia.org/wiki/Admiral_Grace_Hopper",
        "https://en.wikipedia.org/wiki/Harvard_Mark_II",
        "https://en.wikipedia.org/wiki/Thomas_Edison",
        "https://en.wikipedia.org/wiki/Software_bug",
        "https://en.wikipedia.org/wiki/Ernest_Lawrence",
        "https://en.wikipedia.org/wiki/Oxford_English_Dictionary",
        "https://en.wikipedia.org/wiki/Computer_bug",
        "https://en.wikipedia.org/wiki/Association_for_Computing_Machinery",
        "https://en.wikipedia.org/wiki/Software_patch",
        "https://en.wikipedia.org/wiki/Euphemism",
        "https://en.wikipedia.org/wiki/Impact_assessment",
        "https://en.wikipedia.org/wiki/Debugger",
        "https://en.wikipedia.org/wiki/Programming_language",
        "https://en.wikipedia.org/wiki/Debugger",
        "https://en.wikipedia.org/wiki/Programmer",
        "https://en.wikipedia.org/wiki/Breakpoint",
        "https://en.wikipedia.org/wiki/Exception_handling",
        "https://en.wikipedia.org/wiki/Type_checking",
        "https://en.wikipedia.org/wiki/Assembly_language",
        "https://en.wikipedia.org/wiki/Memory_corruption",
        "https://en.wikipedia.org/wiki/Memory_debugging",
        "https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis",
        "https://en.wikipedia.org/wiki/Computer_hardware",
        "https://en.wikipedia.org/wiki/BIOS",
        "https://en.wikipedia.org/wiki/Device_driver",
        "https://en.wikipedia.org/wiki/Firmware",
        "https://en.wikipedia.org/wiki/Oscilloscope",
        "https://en.wikipedia.org/wiki/Logic_analyzer",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Firmware",
        "https://en.wikipedia.org/wiki/Parallel_computing",
        "https://en.wikipedia.org/wiki/Heisenbug",
        "https://en.wikipedia.org/wiki/Graphical_user_interface",
        "https://en.wikipedia.org/wiki/Call_stack",
        "https://en.wikipedia.org/wiki/Printf",
        "https://en.wikipedia.org/wiki/BASIC",
        "https://en.wikipedia.org/wiki/Call_stack",
        "https://en.wikipedia.org/wiki/Memory_dump",
        "https://en.wikipedia.org/wiki/Core_dump",
        "https://en.wikipedia.org/wiki/Communications_of_the_ACM",
        "https://en.wikipedia.org/wiki/Version_control_system",
        "https://en.wikipedia.org/wiki/Record_and_replay_debugging",
        "https://en.wikipedia.org/wiki/Delta_Debugging",
        "https://en.wikipedia.org/wiki/Green_Hills_Software",
        "https://en.wikipedia.org/wiki/Lauterbach_GmbH",
        "https://en.wikipedia.org/wiki/JTAG",
        "https://en.wikipedia.org/wiki/Reverse_engineering",
        "https://en.wikipedia.org/wiki/Copy_protection",
        "https://en.wikipedia.org/wiki/Malware",
        "https://en.wikipedia.org/wiki/Microsoft_Word",
        "https://en.wikipedia.org/wiki/Automatic_bug_fixing",
        "https://en.wikipedia.org/wiki/Debugging_pattern",
        "https://en.wikipedia.org/wiki/Shotgun_debugging",
        "https://en.wikipedia.org/wiki/Software_bug",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Time_travel_debugging",
        "https://en.wikipedia.org/wiki/Trace_table",
        "https://en.wikipedia.org/wiki/Troubleshooting",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/Veracode",
        "https://en.wikipedia.org/wiki/IBM",
        "https://en.wikipedia.org/wiki/Debugging",
        "https://en.wikipedia.org/wiki/Debugging",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}