{
    "url": "https://en.wikipedia.org/wiki/Open_domain_question_answering",
    "title": "Question answering",
    "table_of_contents": [
        "1 Overview",
        "2 History",
        "3 Architecture",
        "4 Question answering methods",
        "4.1 Open domain question answering",
        "4.2 Mathematical question answering",
        "5 Progress",
        "6 References",
        "7 Further reading",
        "8 External links"
    ],
    "content": [
        {
            "paragraph1": "Question answering (QA) is a computer science discipline within the fields of information retrieval and natural language processing (NLP), which is concerned with building systems that automatically answer questions posed by humans in a natural language.\n"
        },
        {
            "title": "Overview",
            "paragraph1": "A question answering implementation, usually a computer program, may construct its answers by querying a structured database of knowledge or information, usually a knowledge base. More commonly, question answering systems can pull answers from an unstructured collection of natural language documents.\n",
            "paragraph2": "Some examples of natural language document collections used for question answering systems include:\n",
            "ul1": "a local collection of reference texts\ninternal organization documents and web pages\ncompiled newswire reports\na set of Wikipedia pages\na subset of World Wide Web pages\n",
            "paragraph3": "Question answering research attempts to deal with a wide range of question types including: fact, list, definition, How, Why, hypothetical, semantically constrained, and cross-lingual questions.\n",
            "ul2": "Closed-domain question answering deals with questions under a specific domain (for example, medicine or automotive maintenance), and can exploit domain-specific knowledge frequently formalized in ontologies. Alternatively, closed-domain might refer to a situation where only a limited type of questions are accepted, such as questions asking for descriptive rather than procedural information. Question answering systems in the context of machine reading applications have also been constructed in the medical domain, for instance related to Alzheimer's disease.[2]\nOpen-domain question answering deals with questions about nearly anything, and can only rely on general ontologies and world knowledge. On the other hand, these systems usually have much more data available from which to extract the answer.\n"
        },
        {
            "title": "History",
            "paragraph1": "Two early question answering systems were BASEBALL and LUNAR. BASEBALL answered questions about Major League Baseball league over a period of one year. LUNAR, in turn, answered questions about the geological analysis of rocks returned by the Apollo moon missions. Both question answering systems were very effective in their chosen domains. In fact, LUNAR was demonstrated at a lunar science convention in 1971 and it was able to answer 90% of the questions in its domain posed by people untrained on the system. Further restricted-domain question answering systems were developed in the following years. The common feature of all these systems is that they had a core database or knowledge system that was hand-written by experts of the chosen domain. The language abilities of BASEBALL and LUNAR used techniques similar to ELIZA and DOCTOR, the first chatterbot programs.\n",
            "paragraph2": "SHRDLU was a highly successful question-answering program developed by Terry Winograd in the late 1960s and early 1970s. It simulated the operation of a robot in a toy world (the \"blocks world\"), and it offered the possibility of asking the robot questions about the state of the world. Again, the strength of this system was the choice of a very specific domain and a very simple world with rules of physics that were easy to encode in a computer program.\n",
            "paragraph3": "In the 1970s, knowledge bases were developed that targeted narrower domains of knowledge. The question answering systems developed to interface with these expert systems produced more repeatable and valid responses to questions within an area of knowledge. These expert systems closely resembled modern question answering systems except in their internal architecture. Expert systems rely heavily on expert-constructed and organized knowledge bases, whereas many modern question answering systems rely on statistical processing of a large, unstructured, natural language text corpus.\n",
            "paragraph4": "The 1970s and 1980s saw the development of comprehensive theories in computational linguistics, which led to the development of ambitious projects in text comprehension and question answering. One example of such a system was the Unix Consultant (UC), developed by Robert Wilensky at U.C. Berkeley in the late 1980s. The system answered questions pertaining to the Unix operating system. It had a comprehensive hand-crafted knowledge base of its domain, and it aimed at phrasing the answer to accommodate various types of users. Another project was LILOG, a text-understanding system that operated on the domain of tourism information in a German city. The systems developed in the UC and LILOG projects never went past the stage of simple demonstrations, but they helped the development of theories on computational linguistics and reasoning.\n",
            "paragraph5": "Specialized natural language question answering systems have been developed, such as EAGLi for health and life scientists.\n"
        },
        {
            "title": "Architecture",
            "paragraph1": "As of 2001, question answering systems typically included a question classifier module that determines the type of question and the type of answer.\n"
        },
        {
            "title": "Question answering methods",
            "paragraph1": "Question answering is very dependent on a good search corpusâ€”for without documents containing the answer, there is little any question answering system can do. It thus makes sense that larger collection sizes generally lend well to better question answering performance, unless the question domain is orthogonal to the collection. The notion of data redundancy in massive collections, such as the web, means that nuggets of information are likely to be phrased in many different ways in differing contexts and documents, leading to two benefits:\n",
            "ol1": "1 - By having the right information appear in many forms, the burden on the question answering system to perform complex NLP techniques to understand the text is lessened.\n2 - Correct answers can be filtered from false positives by relying on the correct answer to appear more times in the documents than instances of incorrect ones.\n",
            "paragraph2": "Some question answering systems rely heavily on automated reasoning.\n",
            "subtitle1": "Open domain question answering",
            "paragraph3": "In information retrieval, an open domain question answering system aims at returning an answer in response to the user's question. The returned answer is in the form of short texts rather than a list of relevant documents. The system uses a combination of techniques from computational linguistics, information retrieval and knowledge representation for finding answers.\n",
            "paragraph4": "The system takes a natural language question as an input rather than a set of keywords, for example, \"When is the national day of China?\" The sentence is then transformed into a query through its logical form. Having the input in the form of a natural language question makes the system more user-friendly, but harder to implement, as there are various question types and the system will have to identify the correct one in order to give a sensible answer. Assigning a question type to the question is a crucial task, the entire answer extraction process relies on finding the correct question type and hence the correct answer type.\n",
            "paragraph5": "Keyword extraction is the first step for identifying the input question type. In some cases, there are clear words that indicate the question type directly, i.e., \"Who\", \"Where\" or \"How many\", these words tell the system that the answers should be of type \"Person\", \"Location\", or \"Number\", respectively. In the example above, the word \"When\" indicates that the answer should be of type \"Date\". POS (part-of-speech) tagging and syntactic parsing techniques can also be used to determine the answer type. In this case, the subject is \"Chinese National Day\", the predicate is \"is\" and the adverbial modifier is \"when\", therefore the answer type is \"Date\". Unfortunately, some interrogative words like \"Which\", \"What\" or \"How\" do not give clear answer types. Each of these words can represent more than one type. In situations like this, other words in the question need to be considered. First thing to do is to find the words that can indicate the meaning of the question. A lexical dictionary such as WordNet can then be used for understanding the context.\n",
            "paragraph6": "Once the question type has been identified, an information retrieval system is used to find a set of documents containing the correct keywords. A tagger and NP/Verb Group chunker can be used to verify whether the correct entities and relations are mentioned in the found documents. For questions such as \"Who\" or \"Where\", a named-entity recogniser is used to find relevant \"Person\" and \"Location\" names from the retrieved documents. Only the relevant paragraphs are selected for ranking.\n",
            "paragraph7": "A vector space model can be used as a strategy for classifying the candidate answers. Check if the answer is of the correct type as determined in the question type analysis stage. An inference technique can also be used to validate the candidate answers. A score is then given to each of these candidates according to the number of question words it contains and how close these words are to the candidate, the more and the closer the better. The answer is then translated into a compact and meaningful representation by parsing. In the previous example, the expected output answer is \"1st Oct.\"\n",
            "subtitle2": "Mathematical question answering",
            "paragraph8": "An open source math-aware question answering system based on Ask Platypus and Wikidata was published in 2018. The system takes an English or Hindi natural language question as input and returns a mathematical formula retrieved from Wikidata as succinct answer. The resulting formula is translated into a computable form, allowing the user to insert values for the variables. Names and values of variables and common constants are retrieved from Wikidata if available. It is claimed that the system outperforms a commercial computational mathematical knowledge engine on a test set.\n",
            "paragraph9": "MathQA methods need to combine natural and formula language. One possible approach is to perform supervised annotation via Entity Linking. The \"ARQMath Task\" at CLEF 2020 was launched to address the problem of linking newly posted questions from the platform Math Stack Exchange (MSE) to existing ones that were already answered by the community. The lab was motivated by the fact that Mansouri et al. discovered that 20% of the mathematical queries in general-purpose search engines are expressed as well-formed questions. It contained two separate sub-tasks. Task 1: \"Answer retrieval\" matching old post answers to newly posed questions and Task 2: \"Formula retrieval\" matching old post formulae to new questions. Starting with the domain of mathematics, which involves formula language, the goal is to later extend the task to other domains (e.g., STEM disciplines, such as chemistry, biology, etc.), which employ other types of special notation (e.g., chemical formulae).\n"
        },
        {
            "title": "Progress",
            "paragraph1": "Question answering systems have been extended in recent years to encompass additional domains of knowledge  For example, systems have been developed to automatically answer temporal and geospatial questions, questions of definition and terminology, biographical questions, multilingual questions, and questions about the content of audio, images, and video. Current question answering research topics include:\n",
            "ul1": "interactivityâ€”clarification of questions or answers[19]\nanswer reuse or caching[20]\nsemantic parsing[21]\nanswer presentation[22]\nknowledge representation and semantic entailment[23]\nsocial media analysis with question answering systems\nsentiment analysis[24]\nutilization of thematic roles[25]\nsemantic resolution: to bridge the gap between syntactically different questions and answer-bearing texts[26]\nutilization of linguistic resources,[27] such as WordNet, FrameNet, and the similar\nImage captioning for visual question answering[17]\nEmbodied question answering[28]\n",
            "paragraph2": "In 2011, Watson, a question answering computer system developed by IBM, competed in two exhibition matches of Jeopardy! against Brad Rutter and Ken Jennings, winning by a significant margin.\nFacebook Research has made their DrQA system available under an open source license. This system has been used for open domain question answering using Wikipedia as knowledge source.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Question",
        "https://en.wikipedia.org/wiki/Question",
        "https://en.wikipedia.org/wiki/Information_retrieval",
        "https://en.wikipedia.org/wiki/Natural_language_processing",
        "https://en.wikipedia.org/wiki/Natural_language",
        "https://en.wikipedia.org/wiki/Database",
        "https://en.wikipedia.org/wiki/Knowledge_base",
        "https://en.wikipedia.org/wiki/Newswire",
        "https://en.wikipedia.org/wiki/Wikipedia",
        "https://en.wikipedia.org/wiki/World_Wide_Web",
        "https://en.wikipedia.org/wiki/Definition",
        "https://en.wikipedia.org/wiki/Descriptive_knowledge",
        "https://en.wikipedia.org/wiki/Procedural_knowledge",
        "https://en.wikipedia.org/wiki/ELIZA",
        "https://en.wikipedia.org/wiki/DOCTOR",
        "https://en.wikipedia.org/wiki/Chatterbot",
        "https://en.wikipedia.org/wiki/SHRDLU",
        "https://en.wikipedia.org/wiki/Terry_Winograd",
        "https://en.wikipedia.org/wiki/Knowledge_base",
        "https://en.wikipedia.org/wiki/Expert_system",
        "https://en.wikipedia.org/wiki/Expert_systems",
        "https://en.wikipedia.org/wiki/Knowledge_base",
        "https://en.wikipedia.org/wiki/Computational_linguistics",
        "https://en.wikipedia.org/wiki/Robert_Wilensky",
        "https://en.wikipedia.org/wiki/Unix",
        "https://en.wikipedia.org/wiki/Text_corpus",
        "https://en.wikipedia.org/wiki/Data_redundancy",
        "https://en.wikipedia.org/wiki/False_positive",
        "https://en.wikipedia.org/wiki/Automated_reasoning",
        "https://en.wikipedia.org/wiki/Information_retrieval",
        "https://en.wikipedia.org/wiki/Computational_linguistics",
        "https://en.wikipedia.org/wiki/Information_retrieval",
        "https://en.wikipedia.org/wiki/Knowledge_representation",
        "https://en.wikipedia.org/wiki/Natural_language",
        "https://en.wikipedia.org/wiki/Logical_form",
        "https://en.wikipedia.org/wiki/Data_extraction",
        "https://en.wikipedia.org/wiki/WordNet",
        "https://en.wikipedia.org/wiki/Information_retrieval",
        "https://en.wikipedia.org/wiki/Phrase_chunking",
        "https://en.wikipedia.org/wiki/Vector_space_model",
        "https://en.wikipedia.org/wiki/Wikidata",
        "https://en.wikipedia.org/wiki/Semantic_parsing",
        "https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning",
        "https://en.wikipedia.org/wiki/Sentiment_analysis",
        "https://en.wikipedia.org/wiki/WordNet",
        "https://en.wikipedia.org/wiki/FrameNet",
        "https://en.wikipedia.org/wiki/Image_captioning",
        "https://en.wikipedia.org/wiki/Embodied_agent",
        "https://en.wikipedia.org/wiki/IBM",
        "https://en.wikipedia.org/wiki/Brad_Rutter",
        "https://en.wikipedia.org/wiki/Ken_Jennings",
        "https://en.wikipedia.org/wiki/Facebook_Research",
        "https://en.wikipedia.org/wiki/Open_source_license",
        "https://en.wikipedia.org/wiki/Wikipedia",
        "https://en.wikipedia.org/wiki/Alphabet_of_human_thought",
        "https://en.wikipedia.org/wiki/Authority_control",
        "https://en.wikipedia.org/wiki/Automated_reasoning",
        "https://en.wikipedia.org/wiki/Commonsense_reasoning",
        "https://en.wikipedia.org/wiki/Computability",
        "https://en.wikipedia.org/wiki/Formal_system",
        "https://en.wikipedia.org/wiki/Inference_engine",
        "https://en.wikipedia.org/wiki/Knowledge_base",
        "https://en.wikipedia.org/wiki/Personal_knowledge_base",
        "https://en.wikipedia.org/wiki/Knowledge_engineering",
        "https://en.wikipedia.org/wiki/Knowledge_extraction",
        "https://en.wikipedia.org/wiki/Knowledge_graph",
        "https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning",
        "https://en.wikipedia.org/wiki/Knowledge_retrieval",
        "https://en.wikipedia.org/wiki/Library_classification",
        "https://en.wikipedia.org/wiki/Logic_programming",
        "https://en.wikipedia.org/wiki/Semantic_reasoner",
        "https://en.wikipedia.org/wiki/Zairja",
        "https://en.wikipedia.org/wiki/Calculus_ratiocinator",
        "https://en.wikipedia.org/wiki/Characteristica_universalis",
        "https://en.wikipedia.org/wiki/Dewey_Decimal_Classification",
        "https://en.wikipedia.org/wiki/Begriffsschrift",
        "https://en.wikipedia.org/wiki/Mundaneum",
        "https://en.wikipedia.org/wiki/Logical_atomism",
        "https://en.wikipedia.org/wiki/World_Brain",
        "https://en.wikipedia.org/wiki/Memex",
        "https://en.wikipedia.org/wiki/General_Problem_Solver",
        "https://en.wikipedia.org/wiki/Prolog",
        "https://en.wikipedia.org/wiki/Cyc",
        "https://en.wikipedia.org/wiki/Semantic_Web",
        "https://en.wikipedia.org/wiki/Wikipedia",
        "https://en.wikipedia.org/wiki/Wolfram_Alpha",
        "https://en.wikipedia.org/wiki/Siri",
        "https://en.wikipedia.org/wiki/Google_Knowledge_Graph",
        "https://en.wikipedia.org/wiki/Wikidata",
        "https://en.wikipedia.org/wiki/The_Engine",
        "https://en.wikipedia.org/wiki/A_Logic_Named_Joe",
        "https://en.wikipedia.org/wiki/Snow_Crash",
        "https://en.wikipedia.org/wiki/The_Baroque_Cycle",
        "https://en.wikipedia.org/wiki/List_of_fictional_computers",
        "https://en.wikipedia.org/wiki/Natural_language_processing",
        "https://en.wikipedia.org/wiki/Bigram",
        "https://en.wikipedia.org/wiki/Trigram",
        "https://en.wikipedia.org/wiki/Computational_linguistics",
        "https://en.wikipedia.org/wiki/Stop_word",
        "https://en.wikipedia.org/wiki/Text_processing",
        "https://en.wikipedia.org/wiki/Text_mining",
        "https://en.wikipedia.org/wiki/Collocation_extraction",
        "https://en.wikipedia.org/wiki/Concept_mining",
        "https://en.wikipedia.org/wiki/Deep_linguistic_processing",
        "https://en.wikipedia.org/wiki/Distant_reading",
        "https://en.wikipedia.org/wiki/Information_extraction",
        "https://en.wikipedia.org/wiki/Ontology_learning",
        "https://en.wikipedia.org/wiki/Parsing",
        "https://en.wikipedia.org/wiki/Semantic_role_labeling",
        "https://en.wikipedia.org/wiki/Semantic_similarity",
        "https://en.wikipedia.org/wiki/Sentiment_analysis",
        "https://en.wikipedia.org/wiki/Terminology_extraction",
        "https://en.wikipedia.org/wiki/Text_mining",
        "https://en.wikipedia.org/wiki/Textual_entailment",
        "https://en.wikipedia.org/wiki/Truecasing",
        "https://en.wikipedia.org/wiki/Text_segmentation",
        "https://en.wikipedia.org/wiki/Lemmatisation",
        "https://en.wikipedia.org/wiki/Lexical_analysis",
        "https://en.wikipedia.org/wiki/Shallow_parsing",
        "https://en.wikipedia.org/wiki/Stemming",
        "https://en.wikipedia.org/wiki/Sentence_boundary_disambiguation",
        "https://en.wikipedia.org/wiki/Automatic_summarization",
        "https://en.wikipedia.org/wiki/Sentence_extraction",
        "https://en.wikipedia.org/wiki/Text_simplification",
        "https://en.wikipedia.org/wiki/Machine_translation",
        "https://en.wikipedia.org/wiki/Statistical_machine_translation",
        "https://en.wikipedia.org/wiki/Neural_machine_translation",
        "https://en.wikipedia.org/wiki/Distributional_semantics",
        "https://en.wikipedia.org/wiki/Explicit_semantic_analysis",
        "https://en.wikipedia.org/wiki/FastText",
        "https://en.wikipedia.org/wiki/GloVe",
        "https://en.wikipedia.org/wiki/Latent_semantic_analysis",
        "https://en.wikipedia.org/wiki/Word_embedding",
        "https://en.wikipedia.org/wiki/Word2vec",
        "https://en.wikipedia.org/wiki/Language_resource",
        "https://en.wikipedia.org/wiki/Corpus_linguistics",
        "https://en.wikipedia.org/wiki/Lexical_resource",
        "https://en.wikipedia.org/wiki/Linguistic_Linked_Open_Data",
        "https://en.wikipedia.org/wiki/Parallel_text",
        "https://en.wikipedia.org/wiki/PropBank",
        "https://en.wikipedia.org/wiki/Semantic_network",
        "https://en.wikipedia.org/wiki/Simple_Knowledge_Organization_System",
        "https://en.wikipedia.org/wiki/Speech_corpus",
        "https://en.wikipedia.org/wiki/Text_corpus",
        "https://en.wikipedia.org/wiki/Treebank",
        "https://en.wikipedia.org/wiki/Universal_Dependencies",
        "https://en.wikipedia.org/wiki/BabelNet",
        "https://en.wikipedia.org/wiki/Bank_of_English",
        "https://en.wikipedia.org/wiki/DBpedia",
        "https://en.wikipedia.org/wiki/FrameNet",
        "https://en.wikipedia.org/wiki/Google_Ngram_Viewer",
        "https://en.wikipedia.org/wiki/ThoughtTreasure",
        "https://en.wikipedia.org/wiki/UBY",
        "https://en.wikipedia.org/wiki/WordNet",
        "https://en.wikipedia.org/wiki/Automatic_identification_and_data_capture",
        "https://en.wikipedia.org/wiki/Speech_recognition",
        "https://en.wikipedia.org/wiki/Speech_segmentation",
        "https://en.wikipedia.org/wiki/Speech_synthesis",
        "https://en.wikipedia.org/wiki/Natural_language_generation",
        "https://en.wikipedia.org/wiki/Optical_character_recognition",
        "https://en.wikipedia.org/wiki/Topic_model",
        "https://en.wikipedia.org/wiki/Document_classification",
        "https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation",
        "https://en.wikipedia.org/wiki/Pachinko_allocation",
        "https://en.wikipedia.org/wiki/Automated_essay_scoring",
        "https://en.wikipedia.org/wiki/Concordancer",
        "https://en.wikipedia.org/wiki/Grammar_checker",
        "https://en.wikipedia.org/wiki/Predictive_text",
        "https://en.wikipedia.org/wiki/Spell_checker",
        "https://en.wikipedia.org/wiki/Syntax_guessing",
        "https://en.wikipedia.org/wiki/Natural_language_user_interface",
        "https://en.wikipedia.org/wiki/Chatbot",
        "https://en.wikipedia.org/wiki/Interactive_fiction",
        "https://en.wikipedia.org/wiki/Virtual_assistant",
        "https://en.wikipedia.org/wiki/Voice_user_interface",
        "https://en.wikipedia.org/wiki/Natural_Language_Toolkit",
        "https://en.wikipedia.org/wiki/SpaCy",
        "https://en.wikipedia.org/wiki/Question_answering",
        "https://en.wikipedia.org/wiki/Question_answering",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}