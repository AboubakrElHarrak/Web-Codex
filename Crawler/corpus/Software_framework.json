{
    "url": "https://en.wikipedia.org/wiki/Software_framework",
    "title": "Software framework",
    "table_of_contents": [
        "1 Rationale",
        "2 Examples",
        "3 Architecture",
        "4 See also",
        "5 References"
    ],
    "content": [
        {
            "paragraph1": "In computer programming, a software framework is an abstraction in which software, providing generic functionality, can be selectively changed by additional user-written code, thus providing application-specific software. It provides a standard way to build and deploy applications and is a universal, reusable software environment that provides particular functionality as part of a larger software platform to facilitate the development of software applications, products and solutions. Software frameworks may include support programs, compilers, code libraries, toolsets, and application programming interfaces (APIs) that bring together all the different components to enable development of a project or system.\n",
            "paragraph2": "Frameworks have key distinguishing features that separate them from normal libraries:\n",
            "ul1": "inversion of control: In a framework, unlike in libraries or in standard user applications, the overall program's flow of control is not dictated by the caller, but by the framework.[1] This is usually achieved with the Template Method Pattern.\ndefault behaviour: This can be provided with the invariant methods of the Template Method Pattern in an abstract class which is provided by the framework.\nextensibility: A user can extend the framework – usually by selective overriding – or programmers can add specialized user code to provide specific functionality. This is usually achieved by a hook method in a subclass that overrides a template method in the superclass.\nnon-modifiable framework code: The framework code, in general, is not supposed to be modified, while accepting user-implemented extensions. In other words, users can extend the framework, but cannot modify its code.\n"
        },
        {
            "title": "Rationale",
            "paragraph1": "The designers of software frameworks aim to facilitate software developments by allowing designers and programmers to devote their time to meeting software requirements rather than dealing with the more standard low-level details of providing a working system, thereby reducing overall development time. For example, a team using a web framework to develop a banking website can focus on writing code particular to banking rather than the mechanics of request handling and state management.\n",
            "paragraph2": "Frameworks often add to the size of programs, a phenomenon termed \"code bloat\". Due to customer-demand-driven applications needs, both competing and complementary frameworks sometimes end up in a product.  Further, due to the complexity of their APIs, the intended reduction in overall development time may not be achieved due to the need to spend additional time learning to use the framework; this criticism is clearly valid when a special or new framework is first encountered by development staff.[citation needed] If such a framework is not used in subsequent job taskings, the time invested in learning the framework can cost more than purpose-written code familiar to the project's staff; many programmers keep copies of useful boilerplate for common needs.\n",
            "paragraph3": "However, once a framework is learned, future projects can be faster and easier to complete; the concept of a framework is to make a one-size-fits-all solution set, and with familiarity, code production should logically rise. There are no such claims made about the size of the code eventually bundled with the output product, nor its relative efficiency and conciseness. Using any library solution necessarily pulls in extras and unused extraneous assets unless the software is a compiler-object linker making a tight (small, wholly controlled, and specified) executable module.\n",
            "paragraph4": "The issue continues, but a decade-plus of industry experience[citation needed] has shown that the most effective frameworks turn out to be those that evolve from re-factoring the common code of the enterprise, instead of using a generic \"one-size-fits-all\" framework developed by third parties for general purposes. An example of that would be how the user interface in such an application package as an office suite grows to have common look, feel, and data-sharing attributes and methods, as the once disparate bundled applications, grow unified into a suite that is tighter and smaller; the newer/evolved suite can be a product that shares integral utility libraries and user interfaces.\n",
            "paragraph5": "This trend in the controversy brings up an important issue about frameworks. Creating a framework that is elegant, versus one that merely solves a problem, is still rather a craft than a science. \"Software elegance\" implies clarity, conciseness, and little waste (extra or extraneous functionality, much of which is user-defined). For those frameworks that generate code, for example, \"elegance\" would imply the creation of code that is clean and comprehensible to a reasonably knowledgeable programmer (and which is therefore readily modifiable), versus one that merely generates correct code. The elegance issue is why relatively few software frameworks have stood the test of time: the best frameworks have been able to evolve gracefully as the underlying technology on which they were built advanced. Even there, having evolved, many such packages will retain legacy capabilities bloating the final software as otherwise replaced methods have been retained in parallel with the newer methods.\n"
        },
        {
            "title": "Examples",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/b/bd/Python_Powered.png/440px-Python_Powered.png",
                "caption": "\n"
            },
            "paragraph1": "Software frameworks typically contain considerable housekeeping and utility code in order to help bootstrap user applications, but generally focus on specific problem domains, such as:\n",
            "ul1": "Artistic drawing, music composition, and mechanical CAD[3][4]\nFinancial modeling applications[5]\nEarth system modeling applications[6]\nDecision support systems[7]\nMedia playback and authoring\nWeb framework\nMiddleware\nCactus Framework – High performance scientific computing.\nApplication framework – General GUI applications.\nEnterprise Architecture framework\nOracle Application Development Framework\nLaravel (PHP Framework)\n"
        },
        {
            "title": "Architecture",
            "paragraph1": "According to Pree, software frameworks consist of frozen spots and hot spots. Frozen spots define the overall architecture of a software system, that is to say its basic components and the relationships between them. These remain unchanged (frozen) in any instantiation of the application framework. Hot spots represent those parts where the programmers using the framework add their own code to add the functionality specific to their own project.\n",
            "paragraph2": "In an object-oriented environment, a framework consists of abstract and concrete classes. Instantiation of such a framework consists of composing and subclassing the existing classes.\n",
            "paragraph3": "The necessary functionality can be implemented by using the Template Method Pattern in which the frozen spots are known as invariant methods and the hot spots are known as variant or hook methods. The invariant methods in the superclass provide default behaviour while the hook methods in each subclass provide custom behaviour.\n",
            "paragraph4": "When developing a concrete software system with a software framework, developers utilize the hot spots according to the specific needs and requirements of the system. Software frameworks rely on the Hollywood Principle: \"Don't call us, we'll call you.\" This means that the user-defined classes (for example, new subclasses) receive messages from the predefined framework classes. Developers usually handle this by implementing superclass abstract methods.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Computer_programming",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Software_platform",
        "https://en.wikipedia.org/wiki/Software_application",
        "https://en.wikipedia.org/wiki/Application_programming_interface",
        "https://en.wikipedia.org/wiki/Software_component",
        "https://en.wikipedia.org/wiki/Software_project",
        "https://en.wikipedia.org/wiki/Software_system",
        "https://en.wikipedia.org/wiki/Inversion_of_control",
        "https://en.wikipedia.org/wiki/Control_flow",
        "https://en.wikipedia.org/wiki/Template_method_pattern",
        "https://en.wikipedia.org/wiki/Template_method_pattern",
        "https://en.wikipedia.org/wiki/Extensibility",
        "https://en.wikipedia.org/wiki/Web_framework",
        "https://en.wikipedia.org/wiki/State_management",
        "https://en.wikipedia.org/wiki/Code_bloat",
        "https://en.wikipedia.org/wiki/Code_refactoring",
        "https://en.wikipedia.org/wiki/Elegance",
        "https://en.wikipedia.org/wiki/Decision_support_systems",
        "https://en.wikipedia.org/wiki/Web_framework",
        "https://en.wikipedia.org/wiki/Middleware",
        "https://en.wikipedia.org/wiki/Cactus_Framework",
        "https://en.wikipedia.org/wiki/Application_framework",
        "https://en.wikipedia.org/wiki/Enterprise_Architecture_framework",
        "https://en.wikipedia.org/wiki/Oracle_Application_Development_Framework",
        "https://en.wikipedia.org/wiki/Laravel",
        "https://en.wikipedia.org/wiki/Abstract_class",
        "https://en.wikipedia.org/wiki/Object_composition",
        "https://en.wikipedia.org/wiki/Template_method_pattern",
        "https://en.wikipedia.org/wiki/Hollywood_Principle",
        "https://en.wikipedia.org/wiki/Abstract_method",
        "https://en.wikipedia.org/wiki/Implicit_invocation",
        "https://en.wikipedia.org/wiki/Software_engine",
        "https://en.wikipedia.org/wiki/ETH_Zurich",
        "https://en.wikipedia.org/wiki/ESMF",
        "https://en.wikipedia.org/wiki/Prentice_Hall",
        "https://en.wikipedia.org/wiki/Erich_Gamma",
        "https://en.wikipedia.org/wiki/Richard_Helm",
        "https://en.wikipedia.org/wiki/John_Vlissides",
        "https://en.wikipedia.org/wiki/Design_Patterns",
        "https://en.wikipedia.org/wiki/Software_framework",
        "https://en.wikipedia.org/wiki/Software_framework",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}