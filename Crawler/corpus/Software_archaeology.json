{
    "url": "https://en.wikipedia.org/wiki/Software_archaeology",
    "title": "Software archaeology",
    "table_of_contents": [
        "1 Techniques",
        "2 See also",
        "3 References",
        "4 External links"
    ],
    "content": [
        {
            "paragraph1": "Software archaeology or software archeology is the study of poorly documented or undocumented legacy software implementations, as part of software maintenance. Software archaeology, named by analogy with archaeology, includes the reverse engineering of software modules, and the application of a variety of tools and processes for extracting and understanding program structure and recovering design information. Software archaeology may reveal dysfunctional team processes which have produced poorly designed or even unused software modules, and in some cases deliberately obfuscatory code may be found. The term has been in use for decades, and reflects a fairly natural metaphor: a programmer reading legacy code may feel that he or she is in the same situation as an archaeologist exploring the rubble of an ancient civilization.\n"
        },
        {
            "title": "Techniques",
            "paragraph1": "A workshop on Software Archaeology at the 2001 OOPSLA (Object-Oriented Programming, Systems, Languages & Applications) conference identified the following software archaeology techniques, some of which are specific to object-oriented programming:\n",
            "ul1": "Scripting languages to build static reports and for filtering diagnostic output\nOngoing documentation in HTML pages or Wikis\nSynoptic signature analysis, statistical analysis, and software visualization tools\nReverse-engineering tools\nOperating-system-level tracing via truss or strace\nSearch engines and tools to search for keywords in source files\nIDE file browsing\nUnit testing frameworks such as JUnit and CppUnit\nAPI documentation generation using tools such as Javadoc and doxygen\nDebuggers\n",
            "paragraph2": "More generally, Andy Hunt and Dave Thomas note the importance of version control, dependency management, text indexing tools such as GLIMPSE and SWISH-E, and \" a map as you begin exploring.\"\n",
            "paragraph3": "Like true archaeology, software archaeology involves investigative work to understand the thought processes of one's predecessors. At the OOPSLA workshop, Ward Cunningham suggested a synoptic signature analysis technique which gave an overall \"feel\" for a program by showing only punctuation, such as semicolons and curly braces. In the same vein, Cunningham has suggested viewing programs in 2 point font in order to understand the overall structure. Another technique identified at the workshop was the use of aspect-oriented programming tools such as AspectJ to systematically introduce tracing code without directly editing the legacy program.\n",
            "paragraph4": "Network and temporal analysis techniques can reveal the patterns of collaborative activity by the developers of legacy software, which in turn may shed light on the strengths and weaknesses of the software artifacts produced.\n",
            "paragraph5": "Michael Rozlog of Embarcadero Technologies has described software archaeology as a six-step process which enables programmers to answer questions such as \"What have I just inherited?\" and \"Where are the scary sections of the code?\" These steps, similar to those identified by the OOPSLA workshop, include using visualization to obtain a visual representation of the program's design, using software metrics to look for design and style violations, using unit testing and profiling to look for bugs and performance bottlenecks, and assembling design information recovered by the process. Software archaeology can also be a service provided to programmers by external consultants.\n",
            "paragraph6": "\nMitch Rosenberg of InfoVentions.net, Inc. claims[citation needed] that the first law of software archaeology (he calls it code or data archaeology) is:\n",
            "paragraph7": "Everything that is there is there for a reason, and there are 3 possible reasons:\n",
            "ol1": "1 - It used to need to be there but no longer does\n2 - It never needed to be there and the person that wrote the code had no clue\n3 - It STILL needs to be there and YOU have no clue\n",
            "paragraph8": "The corollary to this \"law\" is that, until you know which was the reason, you should NOT modify the code (or data).\n",
            "paragraph9": "Software archaeology has continued to be a topic of discussion at more recent software engineering conferences.\n",
            "paragraph10": "The profession of programmerâ€“archaeologist features prominently in Vernor Vinge's A Deepness in the Sky. \n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Legacy_system",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Archaeology",
        "https://en.wikipedia.org/wiki/Reverse_engineering",
        "https://en.wikipedia.org/wiki/Legacy_code",
        "https://en.wikipedia.org/wiki/OOPSLA",
        "https://en.wikipedia.org/wiki/Scripting_language",
        "https://en.wikipedia.org/wiki/Software_visualization",
        "https://en.wikipedia.org/wiki/Strace",
        "https://en.wikipedia.org/wiki/Integrated_development_environment",
        "https://en.wikipedia.org/wiki/Unit_testing",
        "https://en.wikipedia.org/wiki/JUnit",
        "https://en.wikipedia.org/wiki/CppUnit",
        "https://en.wikipedia.org/wiki/Javadoc",
        "https://en.wikipedia.org/wiki/Doxygen",
        "https://en.wikipedia.org/wiki/Debugger",
        "https://en.wikipedia.org/wiki/Revision_control",
        "https://en.wikipedia.org/wiki/Dependency_management",
        "https://en.wikipedia.org/wiki/Ward_Cunningham",
        "https://en.wikipedia.org/wiki/AspectJ",
        "https://en.wikipedia.org/wiki/Embarcadero_Technologies",
        "https://en.wikipedia.org/wiki/Software_metric",
        "https://en.wikipedia.org/wiki/Unit_testing",
        "https://en.wikipedia.org/wiki/Vernor_Vinge",
        "https://en.wikipedia.org/wiki/A_Deepness_in_the_Sky",
        "https://en.wikipedia.org/wiki/Software_architecture_recovery",
        "https://en.wikipedia.org/wiki/Code_refactoring",
        "https://en.wikipedia.org/wiki/Retrocomputing",
        "https://en.wikipedia.org/wiki/Software_brittleness",
        "https://en.wikipedia.org/wiki/Software_rot",
        "https://en.wikipedia.org/wiki/Software_entropy",
        "https://en.wikipedia.org/wiki/Abandonware",
        "https://en.wikipedia.org/wiki/Scott_Ambler",
        "https://en.wikipedia.org/wiki/Diomidis_Spinellis",
        "https://en.wikipedia.org/wiki/Ward_Cunningham",
        "https://en.wikipedia.org/wiki/ZDNet",
        "https://en.wikipedia.org/wiki/Computerworld",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Computer_programming",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Requirements_engineering",
        "https://en.wikipedia.org/wiki/Site_reliability_engineering",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Systems_analysis",
        "https://en.wikipedia.org/wiki/Formal_methods",
        "https://en.wikipedia.org/wiki/Data_modeling",
        "https://en.wikipedia.org/wiki/Enterprise_architecture",
        "https://en.wikipedia.org/wiki/Functional_specification",
        "https://en.wikipedia.org/wiki/Modeling_language",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Software_quality",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_verification_and_validation",
        "https://en.wikipedia.org/wiki/Structured_analysis",
        "https://en.wikipedia.org/wiki/Essential_Systems_Analysis",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Systems_development_life_cycle",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Enterprise_Unified_Process",
        "https://en.wikipedia.org/wiki/Executable_UML",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/Data_model",
        "https://en.wikipedia.org/wiki/Function_model",
        "https://en.wikipedia.org/wiki/Information_model",
        "https://en.wikipedia.org/wiki/Metamodeling",
        "https://en.wikipedia.org/wiki/Object_model",
        "https://en.wikipedia.org/wiki/Systems_modeling",
        "https://en.wikipedia.org/wiki/View_model",
        "https://en.wikipedia.org/wiki/IDEF",
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Universal_Systems_Language",
        "https://en.wikipedia.org/wiki/Systems_Modeling_Language",
        "https://en.wikipedia.org/wiki/Computer_science",
        "https://en.wikipedia.org/wiki/Computer_engineering",
        "https://en.wikipedia.org/wiki/Information_science",
        "https://en.wikipedia.org/wiki/Project_management",
        "https://en.wikipedia.org/wiki/Risk_management",
        "https://en.wikipedia.org/wiki/Systems_engineering",
        "https://en.wikipedia.org/wiki/Software_archaeology",
        "https://en.wikipedia.org/wiki/Software_archaeology",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}