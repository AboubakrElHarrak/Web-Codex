{
    "url": "https://en.wikipedia.org/wiki/Code_reuse",
    "title": "Code reuse",
    "table_of_contents": [
        "1 Overview",
        "2 Types of reuse",
        "3 Systematic",
        "4 Examples",
        "4.1 Software libraries",
        "4.2 Design patterns",
        "4.3 Frameworks",
        "4.4 Higher-order function",
        "4.5 Retrocomputing",
        "4.6 Computer security",
        "4.7 Components",
        "4.8 Outside computers",
        "5 Criticism",
        "6 See also",
        "7 References",
        "8 External links"
    ],
    "content": [
        {
            "paragraph1": "Code reuse, also called software reuse, is the use of existing software, or software knowledge, to build new software,  following the reusability principles.\n"
        },
        {
            "title": "Overview",
            "paragraph1": "Ad hoc code reuse has been practiced from the earliest days of programming. Programmers have always reused sections of code, templates, functions, and procedures. Software reuse as a recognized area of study in software engineering, however, dates only from 1968 when Douglas McIlroy of Bell Laboratories proposed basing the software industry on reusable components.\n",
            "paragraph2": "Code reuse aims to save time and resources and reduce redundancy by taking advantage of assets that have already been created in some form within the software product development process. The key idea in reuse is that parts of a computer program written at one time can be or should be used in the construction of other programs written at a later time.\n",
            "paragraph3": "Code reuse may imply the creation of a separately maintained version of the reusable assets.  While code is the most common resource selected for reuse, other assets generated during the development cycle may offer opportunities for reuse: software components, test suites, designs, documentation, and so on.\n",
            "paragraph4": "The software library is a good example of code reuse. Programmers may decide to create internal abstractions so that certain parts of their program can be reused, or may create custom libraries for their own use. Some characteristics that make software more easily reusable are modularity, loose coupling, high cohesion, information hiding and separation of concerns.\n",
            "paragraph5": "For newly written code to use a piece of existing code, some kind of interface, or means of communication, must be defined. These commonly include a \"call\" or use of a subroutine, object, class, or prototype. In organizations, such practices are formalized and standardized by domain engineering, also known as software product line engineering.\n",
            "paragraph6": "The general practice of using a prior version of an extant program as a starting point for the next version, is also a form of code reuse.\n",
            "paragraph7": "Some so-called code \"reuse\" involves simply copying some or all of the code from an existing program into a new one. While organizations can realize time to market benefits for a new product with this approach, they can subsequently be saddled with many of the same code duplication problems caused by cut and paste programming.\n",
            "paragraph8": "Many researchers have worked to make reuse faster, easier, more systematic, and an integral part of the normal process of programming. These are some of the main goals behind the invention of object-oriented programming, which became one of the most common forms of formalized reuse. A somewhat later invention is generic programming.\n",
            "paragraph9": "Another, newer means is to use software \"generators\", programs which can create new programs of a certain type, based on a set of parameters that users choose. Fields of study about such systems are generative programming and metaprogramming.\n"
        },
        {
            "title": "Types of reuse",
            "paragraph1": "Concerning motivation and driving factors, reuse can be:\n",
            "ul1": "Opportunistic – While getting ready to begin a project, the team realizes that there are existing components that they can reuse.\nPlanned – A team strategically designs components so that they'll be reusable in future projects.\n",
            "paragraph2": "Reuse can be categorized further:\n",
            "ul2": "Internal reuse – A team reuses its own components. This may be a business decision, since the team may want to control a component critical to the project.\nExternal reuse – A team may choose to license a third-party component. Licensing a third-party component typically costs the team 1 to 20 percent of what it would cost to develop internally.[4] The team must also consider the time it takes to find, learn and integrate the component.\n",
            "paragraph3": "Concerning form or structure of reuse, code can be:\n",
            "ul3": "Referenced – The client code contains a reference to reused code, and thus they have distinct life cycles and can have distinct versions.\nForked – The client code contains a local or private copy of the reused code, and thus they share a single life cycle and a single version.\n",
            "paragraph4": "Fork-reuse is often discouraged because it's a form of code duplication, which requires that every bug is corrected in each copy, and enhancements made to reused code need to be manually merged in every copy or they become out-of-date. However, fork-reuse can have benefits such as isolation, flexibility to change the reused code, easier packaging, deployment and version management.\n"
        },
        {
            "title": "Systematic",
            "paragraph1": "Systematic software reuse is a strategy for increasing productivity and improving the quality of the software industry. Although it is simple in concept, successful software reuse implementation is difficult in practice. A reason put forward for this is the dependence of software reuse on the context in which it is implemented. Some problematic issues that need to be addressed related to systematic software reuse are:\n",
            "ul1": "a clear and well-defined product vision is an essential foundation to an software product line (SPL).\nan evolutionary implementation strategy would be a more pragmatic strategy for the company.\nthere exist a need for continuous management support and leadership to ensure success.\nan appropriate organisational structure is needed to support SPL engineering.\nthe change of mindset from a project-centric company to a product-oriented company is essential.\n"
        },
        {
            "title": "Examples",
            "subtitle1": "Software libraries",
            "paragraph1": "A very common example of code reuse is the technique of using a software library. Many common operations, such as converting information among different well-known formats, accessing external storage, interfacing with external programs, or manipulating information (numbers, words, names, locations, dates, etc.) in common ways, are needed by many different programs. Authors of new programs can use the code in a software library to perform these tasks, instead of \"re-inventing the wheel\", by writing fully new code directly in a program to perform an operation. Library implementations often have the benefit of being well-tested and covering unusual or arcane cases. Disadvantages include the inability to tweak details which may affect performance or the desired output, and the time and cost of acquiring, learning, and configuring the library.\n",
            "subtitle2": "Design patterns",
            "paragraph2": "A design pattern is a general solution to a recurring problem. Design patterns are more conceptual than tangible and can be modified to fit the exact need. However, abstract classes and interfaces can be reused to implement certain patterns.\n",
            "subtitle3": "Frameworks",
            "paragraph3": "Developers generally reuse large pieces of software via third-party applications and frameworks. Though frameworks are usually domain-specific and applicable only to families of applications[citation needed].\n",
            "subtitle4": "Higher-order function",
            "paragraph4": "In functional programming higher-order functions can be used in many cases where design patterns or frameworks were formerly used.\n",
            "subtitle5": "Retrocomputing",
            "paragraph5": "Retrocomputing encompasses reuse of code, simply because retro programs are being run on older computers, or emulators for them.\n",
            "subtitle6": "Computer security",
            "paragraph6": "In computer security code-reuse is employed as a software exploit method.\nWhen an attacker is not able to directly input code to modify the control flow of a program, for example in presence of code injection defenses such as W^X, he or she can redirect the control flow to code sequences existing in memory.\n",
            "paragraph7": "Examples of code-reuse attacks are return-to-libc attack, return-oriented programming, and jump-oriented programming.\n",
            "subtitle7": "Components",
            "paragraph8": "A component, in an object-oriented extent, represents a set of collaborative classes (or only one class) and its interfaces. The interfaces are responsible for enabling the replacement of components. Reusable components can also be isolated and synchronized between SCM repositories using component source code management technologies (CSCM).[citation needed]\n",
            "subtitle8": "Outside computers",
            "paragraph9": "The whole concept of \"code reuse\" can also encompass engineering applications outside software. For instance, parametric modeling in computer-aided design allows for creating reusable designs. Standardization results in creation of interoperable parts that can be then reused in many contexts.[citation needed]\n"
        },
        {
            "title": "Criticism",
            "paragraph1": "Code reuse results in dependency on the component being reused. Rob Pike opined that \"A little copying is better than a little dependency\". When he joined Google, the company was putting heavy emphasis on code reuse. He believes that Google's codebase still suffers from results of that former policy in terms of compilation speed and maintainability.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Reusability",
        "https://en.wikipedia.org/wiki/Ad_hoc",
        "https://en.wikipedia.org/wiki/Computer_programming",
        "https://en.wikipedia.org/wiki/Douglas_McIlroy",
        "https://en.wikipedia.org/wiki/Bell_Labs",
        "https://en.wikipedia.org/wiki/Computer_program",
        "https://en.wikipedia.org/wiki/Loose_coupling",
        "https://en.wikipedia.org/wiki/Information_hiding",
        "https://en.wikipedia.org/wiki/Separation_of_concerns",
        "https://en.wikipedia.org/wiki/Subroutine",
        "https://en.wikipedia.org/wiki/Domain_engineering",
        "https://en.wikipedia.org/wiki/Product_Family_Engineering",
        "https://en.wikipedia.org/wiki/Time_to_market",
        "https://en.wikipedia.org/wiki/Code_duplication",
        "https://en.wikipedia.org/wiki/Cut_and_paste_programming",
        "https://en.wikipedia.org/wiki/Generic_programming",
        "https://en.wikipedia.org/wiki/Source_code_generation",
        "https://en.wikipedia.org/wiki/Generative_programming",
        "https://en.wikipedia.org/wiki/Metaprogramming",
        "https://en.wikipedia.org/wiki/Software_product_line",
        "https://en.wikipedia.org/wiki/Software_framework",
        "https://en.wikipedia.org/wiki/Functional_programming",
        "https://en.wikipedia.org/wiki/Retrocomputing",
        "https://en.wikipedia.org/wiki/Emulator",
        "https://en.wikipedia.org/wiki/Computer_security",
        "https://en.wikipedia.org/wiki/Software_component",
        "https://en.wikipedia.org/wiki/Solid_modeling",
        "https://en.wikipedia.org/wiki/Standardization",
        "https://en.wikipedia.org/wiki/Rob_Pike",
        "https://en.wikipedia.org/wiki/Google",
        "https://en.wikipedia.org/wiki/Codebase",
        "https://en.wikipedia.org/wiki/International_Conference_on_Software_Reuse",
        "https://en.wikipedia.org/wiki/Language_binding",
        "https://en.wikipedia.org/wiki/Not_invented_here",
        "https://en.wikipedia.org/wiki/Antonym",
        "https://en.wikipedia.org/wiki/Type_polymorphism",
        "https://en.wikipedia.org/wiki/Procedural_programming",
        "https://en.wikipedia.org/wiki/Reinventing_the_wheel",
        "https://en.wikipedia.org/wiki/Antonym",
        "https://en.wikipedia.org/wiki/Reusability",
        "https://en.wikipedia.org/wiki/Reuse_metrics",
        "https://en.wikipedia.org/wiki/Single_source_of_truth",
        "https://en.wikipedia.org/wiki/Software_framework",
        "https://en.wikipedia.org/wiki/Virtual_inheritance",
        "https://en.wikipedia.org/wiki/Code_reuse",
        "https://en.wikipedia.org/wiki/Code_reuse",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}