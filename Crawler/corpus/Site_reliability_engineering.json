{
    "url": "https://en.wikipedia.org/wiki/Site_reliability_engineering",
    "title": "Site reliability engineering",
    "table_of_contents": [
        "1 History",
        "2 Definition",
        "3 Principles and practices",
        "4 Implementations",
        "4.1 Kitchen Sink, a.k.a. “Everything SRE”",
        "4.2 Infrastructure",
        "4.3 Tools",
        "4.4 Product or application",
        "4.5 Embedded",
        "4.6 Consulting",
        "5 Industry",
        "6 See also",
        "7 References",
        "8 Further reading",
        "9 External links"
    ],
    "content": [
        {
            "paragraph1": "Site reliability engineering (SRE) is a set of principles and practices that incorporates aspects of software engineering and applies them to infrastructure and operations problems. The main goals are to create scalable and highly reliable software systems. Site reliability engineering is closely related to DevOps, a set of practices that combine software development and IT operations, and SRE has also been described as a specific implementation of DevOps.\n"
        },
        {
            "title": "History",
            "paragraph1": "The field of site reliability engineering originated at Google with Ben Treynor Sloss, who founded a site reliability team after joining the company in 2003. In 2016, Google employed more than 1,000 site reliability engineers. After originating at Google in 2003, the concept spread into the broader software development industry, and other companies subsequently began to employ site reliability engineers. The position is more common at larger web companies, as small companies often don't operate at a scale that would require dedicated SREs. Organizations who have adopted the concept include Airbnb, Dropbox, IBM, LinkedIn, Netflix and Wikimedia. According to a 2021 report by the DevOps Institute, 22% of organizations in a survey of 2,000 respondents had adopted the SRE model.\n"
        },
        {
            "title": "Definition",
            "paragraph1": "Site reliability engineering, as a job role, may be performed by solo practitioners or organized in teams usually being responsible for a combination of the following within a broader engineering organization: System availability, latency, performance, efficiency, change management, monitoring, emergency response, and capacity planning. Site reliability engineers often have a backgrounds in software engineering, system engineering, or system administration. Focuses of site reliability engineering include automation, system design, and improvements to system resilience.\n",
            "paragraph2": "Site reliability engineering, as a set of principles and practices, can be performed by anyone. SRE is similar to Security engineering in the way that anyone is expected to contribute to good security practices, but a company may decide to eventually staff specialists for the job. Conversely, for securing internet systems, companies may hire Security Engineers and to define and ensure their reliability goals, companies may hire SREs instead. \n",
            "paragraph3": "Site reliability engineering has also been described as a specific implementation of DevOps but it focuses specifically on building reliable systems, whereas DevOps is more broadly focused on infrastructure.\n",
            "paragraph4": "Stephen Gossett wrote in Built In that some companies have rebranded their operations teams to SRE teams with little meaningful change. This is also perceived to be true for operations teams rebranded to be called DevOps teams.\n"
        },
        {
            "title": "Principles and practices",
            "paragraph1": "There have been multiple attempts of defining a canonical list of site reliability engineering principles, but while consensus is lacking, the following characteristics are usually included in most of such definitions:\n",
            "ul1": "Automation or elimination of anything repetitive that's also cost-effective to automate or eliminate.\nAvoidance to pursue much more reliability than what's strictly necessary. Defining what's necessary is a practice by itself (see list of practices below).\nSystems design with a bias toward reduction of risks to availability, latency, and efficiency.\nObservability, as in, the ability to be able to ask arbitrary questions about your system without having to know ahead of time what you wanted to ask.[17]\n",
            "paragraph2": "The site reliability engineering practices also vary widely, but the list below is relatively commonly seen being at least partially implemented: \n",
            "ul2": "Toil management as the implementation of the first principle outlined above.\nDefining and measuring reliability goals—SLIs, SLOs, and error budgets.\nNon-Abstract Large Scale Systems Design (NALSD) with a focus on reliability.\nDesigning for and implementing observability.\nDefining, testing, and running an incident management process.\nCapacity planning.\nChange and release management, including CI/CD.\nChaos engineering.\n"
        },
        {
            "title": "Implementations",
            "paragraph1": "Site reliability engineering teams engage with the other teams within their companies and the SRE principles and practices in various forms. Here is a high level overview of common SRE team implementations:\n",
            "subtitle1": "Kitchen Sink, a.k.a. “Everything SRE”",
            "paragraph2": "Scope of services or workflows covered is usually unbounded.\n",
            "subtitle2": "Infrastructure",
            "paragraph3": "Focuses on the reliability of behind-the-scenes systems that help make other teams' jobs more efficient. These are often confused with \"Platform\" teams or \"Platform Operations\" teams. Infrastructure SRE teams may pair up with one or more platform engineering team(s), but they differ in that Infrastructure SRE teams focuses on performing most, if not all, of the work described in the principles and practices list above. Platform teams tend to focus on building the platform and while reliability is desirable that's not their sole priority.\n",
            "subtitle3": "Tools",
            "paragraph4": "Focuses on tools to measure, maintain, and improve system reliability.\n",
            "subtitle4": "Product or application",
            "paragraph5": "SRE team for product and/or application. Some large companies tend to staff several of these.\n",
            "subtitle5": "Embedded",
            "paragraph6": "Usually SRE solo practitioners or pairs staffed within a software engineering team to apply most of the principles and practices described above.\n",
            "subtitle6": "Consulting",
            "paragraph7": "Consult on how to implement SRE principles and practices. These are usually experienced SREs who've worked on teams in one or several of the implementations above. SREs on external facing consulting SRE teams are often called \"Customer Reliability Engineers\". They rarely, if ever, change customer's configuration or code.\n",
            "paragraph8": "Large companies who have adopted SRE tend to have a combination of the implementations described above, including multiple teams of the same implementation, e.g. multiple Product/application SRE teams to meet specific demands of several products and an Infrastructure SRE team to pair up with a Platform engineering group to meet reliability goals of a common platform for both products/applications.\n"
        },
        {
            "title": "Industry",
            "paragraph1": "The USENIX organization has held an annual SREcon conference since 2014 for site reliability engineers in the industry, and also holds regional conferences with similar themes.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/IT_infrastructure",
        "https://en.wikipedia.org/wiki/IT_operations",
        "https://en.wikipedia.org/wiki/Scalable",
        "https://en.wikipedia.org/wiki/High_availability",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Google",
        "https://en.wikipedia.org/wiki/Organization",
        "https://en.wikipedia.org/wiki/Airbnb",
        "https://en.wikipedia.org/wiki/IBM",
        "https://en.wikipedia.org/wiki/LinkedIn",
        "https://en.wikipedia.org/wiki/Netflix",
        "https://en.wikipedia.org/wiki/Wikimedia_Foundation",
        "https://en.wikipedia.org/wiki/Availability",
        "https://en.wikipedia.org/wiki/Computer_performance",
        "https://en.wikipedia.org/wiki/Website_monitoring",
        "https://en.wikipedia.org/wiki/Incident_management",
        "https://en.wikipedia.org/wiki/Capacity_planning",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Systems_engineering",
        "https://en.wikipedia.org/wiki/System_administrator",
        "https://en.wikipedia.org/wiki/Systems_design",
        "https://en.wikipedia.org/wiki/Security_engineering",
        "https://en.wikipedia.org/wiki/Service_level_indicator",
        "https://en.wikipedia.org/wiki/Incident_management",
        "https://en.wikipedia.org/wiki/Capacity_planning",
        "https://en.wikipedia.org/wiki/Chaos_engineering",
        "https://en.wikipedia.org/wiki/USENIX",
        "https://en.wikipedia.org/wiki/Chaos_engineering",
        "https://en.wikipedia.org/wiki/Cloud_computing",
        "https://en.wikipedia.org/wiki/Data_center",
        "https://en.wikipedia.org/wiki/Disaster_recovery",
        "https://en.wikipedia.org/wiki/High_availability_software",
        "https://en.wikipedia.org/wiki/Infrastructure_as_code",
        "https://en.wikipedia.org/wiki/Operations_management",
        "https://en.wikipedia.org/wiki/Reliability_engineering",
        "https://en.wikipedia.org/wiki/System_administration",
        "https://en.wikipedia.org/wiki/Google",
        "https://en.wikipedia.org/wiki/Atlassian",
        "https://en.wikipedia.org/wiki/Red_Hat",
        "https://en.wikipedia.org/wiki/USENIX",
        "https://en.wikipedia.org/wiki/TechCrunch",
        "https://en.wikipedia.org/wiki/IBM",
        "https://en.wikipedia.org/wiki/Micro_Focus",
        "https://en.wikipedia.org/wiki/USENIX",
        "https://en.wikipedia.org/wiki/Packt",
        "https://en.wikipedia.org/wiki/Software_engineering",
        "https://en.wikipedia.org/wiki/Computer_programming",
        "https://en.wikipedia.org/wiki/DevOps",
        "https://en.wikipedia.org/wiki/Requirements_engineering",
        "https://en.wikipedia.org/wiki/Software_deployment",
        "https://en.wikipedia.org/wiki/Software_design",
        "https://en.wikipedia.org/wiki/Software_maintenance",
        "https://en.wikipedia.org/wiki/Software_testing",
        "https://en.wikipedia.org/wiki/Systems_analysis",
        "https://en.wikipedia.org/wiki/Formal_methods",
        "https://en.wikipedia.org/wiki/Data_modeling",
        "https://en.wikipedia.org/wiki/Enterprise_architecture",
        "https://en.wikipedia.org/wiki/Functional_specification",
        "https://en.wikipedia.org/wiki/Modeling_language",
        "https://en.wikipedia.org/wiki/Programming_paradigm",
        "https://en.wikipedia.org/wiki/Software",
        "https://en.wikipedia.org/wiki/Software_archaeology",
        "https://en.wikipedia.org/wiki/Software_architecture",
        "https://en.wikipedia.org/wiki/Software_configuration_management",
        "https://en.wikipedia.org/wiki/Software_development_process",
        "https://en.wikipedia.org/wiki/Software_quality",
        "https://en.wikipedia.org/wiki/Software_quality_assurance",
        "https://en.wikipedia.org/wiki/Software_verification_and_validation",
        "https://en.wikipedia.org/wiki/Structured_analysis",
        "https://en.wikipedia.org/wiki/Essential_Systems_Analysis",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Systems_development_life_cycle",
        "https://en.wikipedia.org/wiki/Agile_software_development",
        "https://en.wikipedia.org/wiki/Enterprise_Unified_Process",
        "https://en.wikipedia.org/wiki/Executable_UML",
        "https://en.wikipedia.org/wiki/Incremental_build_model",
        "https://en.wikipedia.org/wiki/Iterative_and_incremental_development",
        "https://en.wikipedia.org/wiki/Software_prototyping",
        "https://en.wikipedia.org/wiki/Rapid_application_development",
        "https://en.wikipedia.org/wiki/Unified_Process",
        "https://en.wikipedia.org/wiki/Spiral_model",
        "https://en.wikipedia.org/wiki/Waterfall_model",
        "https://en.wikipedia.org/wiki/Extreme_programming",
        "https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration",
        "https://en.wikipedia.org/wiki/Data_model",
        "https://en.wikipedia.org/wiki/Function_model",
        "https://en.wikipedia.org/wiki/Information_model",
        "https://en.wikipedia.org/wiki/Metamodeling",
        "https://en.wikipedia.org/wiki/Object_model",
        "https://en.wikipedia.org/wiki/Systems_modeling",
        "https://en.wikipedia.org/wiki/View_model",
        "https://en.wikipedia.org/wiki/IDEF",
        "https://en.wikipedia.org/wiki/Unified_Modeling_Language",
        "https://en.wikipedia.org/wiki/Universal_Systems_Language",
        "https://en.wikipedia.org/wiki/Systems_Modeling_Language",
        "https://en.wikipedia.org/wiki/Computer_science",
        "https://en.wikipedia.org/wiki/Computer_engineering",
        "https://en.wikipedia.org/wiki/Information_science",
        "https://en.wikipedia.org/wiki/Project_management",
        "https://en.wikipedia.org/wiki/Risk_management",
        "https://en.wikipedia.org/wiki/Systems_engineering",
        "https://en.wikipedia.org/wiki/Site_reliability_engineering",
        "https://en.wikipedia.org/wiki/Site_reliability_engineering",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}