{
    "url": "https://en.wikipedia.org/wiki/Search_tree",
    "title": "Search tree",
    "table_of_contents": [
        "1 Types of Trees",
        "1.1 Binary search tree",
        "1.2 B-tree",
        "1.3 (a,b)-tree",
        "1.4 Ternary search tree",
        "2 Searching algorithms",
        "2.1 Searching for a specific key",
        "2.1.1 Recursive",
        "2.1.2 Iterative",
        "2.2 Searching for min and max",
        "2.2.1 Minimum",
        "2.2.2 Maximum",
        "3 See also",
        "4 References"
    ],
    "content": [
        {
            "paragraph1": "In computer science, a search tree is a tree data structure used for locating specific keys from within a set. In order for a tree to function as a search tree, the key for each node must be greater than any keys in subtrees on the left, and less than any keys in subtrees on the right.\n",
            "paragraph2": "The advantage of search trees is their efficient search time given the tree is reasonably balanced, which is to say the leaves at either end are of comparable depths. Various search-tree data structures exist, several of which also allow efficient insertion and deletion of elements, which operations then have to maintain tree balance.\n",
            "paragraph3": "Search trees are often used to implement an associative array. The search tree algorithm uses the key from the key–value pair to find a location, and then the application stores the entire key–value pair at that particular location.\n"
        },
        {
            "title": "Types of Trees",
            "image1": {
                "url": "//upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/440px-Binary_search_tree.svg.png",
                "caption": "\n\t\tBinary search tree\n\t"
            },
            "subtitle1": "Binary search tree",
            "paragraph1": "A Binary Search Tree is a node-based data structure where each node contains a key and two subtrees, the left and right. For all nodes, the left subtree's key must be less than the node's key, and the right subtree's key must be greater than the node's key. These subtrees must all qualify as binary search trees.\n",
            "paragraph2": "The worst-case time complexity for searching a binary search tree is the height of the tree, which can be as small as O(log n) for a tree with n elements.\n",
            "subtitle2": "B-tree",
            "paragraph3": "B-trees are generalizations of binary search trees in that they can have a variable number of subtrees at each node. While child-nodes have a pre-defined range, they will not necessarily be filled with data, meaning B-trees can potentially waste some space. The advantage is that B-trees do not need to be re-balanced as frequently as other self-balancing trees.\n",
            "paragraph4": "Due to the variable range of their node length, B-trees are optimized for systems that read large blocks of data, they are also commonly used in databases.\n",
            "paragraph5": "The time complexity for searching a B-tree is O(log n).\n",
            "subtitle3": "(a,b)-tree",
            "paragraph6": "An (a,b)-tree is a search tree where all of its leaves are the same depth. Each node has at least a children and at most b children, while the root has at least 2 children and at most b children.\n",
            "paragraph7": "a and b can be decided with the following formula:\n",
            "paragraph8": "\n\n\n\n2\n≤\na\n≤\n\n\n\n(\nb\n+\n1\n)\n\n2\n\n\n\n\n{\\displaystyle 2\\leq a\\leq {\\frac {(b+1)}{2))}\n\n\n",
            "paragraph9": "The time complexity for searching an (a,b)-tree is O(log n).\n",
            "subtitle4": "Ternary search tree",
            "paragraph10": "A ternary search tree is a type of tree that can have 3 nodes: a low child, an equal child, and a high child. Each node stores a single character and the tree itself is ordered the same way a binary search tree is, with the exception of a possible third node.\n",
            "paragraph11": "Searching a ternary search tree involves passing in a string to test whether any path contains it.\n",
            "paragraph12": "The time complexity for searching a balanced ternary search tree is O(log n).\n"
        },
        {
            "title": "Searching algorithms",
            "subtitle1": "Searching for a specific key",
            "paragraph1": "Assuming the tree is ordered, we can take a key and attempt to locate it within the tree. The following algorithms are generalized for binary search trees, but the same idea can be applied to trees of other formats.\n",
            "subtitle2": "Searching for min and max",
            "paragraph2": "In a sorted tree, the minimum is located at the node farthest left, while the maximum is located at the node farthest right.\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Tree_search",
        "https://en.wikipedia.org/wiki/Computer_science",
        "https://en.wikipedia.org/wiki/Tree_data_structure",
        "https://en.wikipedia.org/wiki/Associative_array",
        "https://en.wikipedia.org/wiki/Binary_search_tree",
        "https://en.wikipedia.org/wiki/Time_complexity",
        "https://en.wikipedia.org/wiki/Ternary_search_tree",
        "https://en.wikipedia.org/wiki/Trie",
        "https://en.wikipedia.org/wiki/Binary_tree",
        "https://en.wikipedia.org/wiki/Associative_array",
        "https://en.wikipedia.org/wiki/AA_tree",
        "https://en.wikipedia.org/wiki/AVL_tree",
        "https://en.wikipedia.org/wiki/Optimal_binary_search_tree",
        "https://en.wikipedia.org/wiki/Binary_search_tree",
        "https://en.wikipedia.org/wiki/Dancing_tree",
        "https://en.wikipedia.org/wiki/HTree",
        "https://en.wikipedia.org/wiki/Interval_tree",
        "https://en.wikipedia.org/wiki/Order_statistic_tree",
        "https://en.wikipedia.org/wiki/Scapegoat_tree",
        "https://en.wikipedia.org/wiki/Splay_tree",
        "https://en.wikipedia.org/wiki/Treap",
        "https://en.wikipedia.org/wiki/Binary_heap",
        "https://en.wikipedia.org/wiki/Binomial_heap",
        "https://en.wikipedia.org/wiki/Brodal_queue",
        "https://en.wikipedia.org/wiki/Fibonacci_heap",
        "https://en.wikipedia.org/wiki/Leftist_tree",
        "https://en.wikipedia.org/wiki/Pairing_heap",
        "https://en.wikipedia.org/wiki/Skew_heap",
        "https://en.wikipedia.org/wiki/Van_Emde_Boas_tree",
        "https://en.wikipedia.org/wiki/Weak_heap",
        "https://en.wikipedia.org/wiki/Trie",
        "https://en.wikipedia.org/wiki/Ctrie",
        "https://en.wikipedia.org/wiki/Radix_tree",
        "https://en.wikipedia.org/wiki/Suffix_tree",
        "https://en.wikipedia.org/wiki/Ternary_search_tree",
        "https://en.wikipedia.org/wiki/Spatial_index",
        "https://en.wikipedia.org/wiki/Ball_tree",
        "https://en.wikipedia.org/wiki/BSP_tree",
        "https://en.wikipedia.org/wiki/Cartesian_tree",
        "https://en.wikipedia.org/wiki/Metric_tree",
        "https://en.wikipedia.org/wiki/MVP_tree",
        "https://en.wikipedia.org/wiki/Octree",
        "https://en.wikipedia.org/wiki/Quadtree",
        "https://en.wikipedia.org/wiki/Segment_tree",
        "https://en.wikipedia.org/wiki/Cover_tree",
        "https://en.wikipedia.org/wiki/Exponential_tree",
        "https://en.wikipedia.org/wiki/Fenwick_tree",
        "https://en.wikipedia.org/wiki/Finger_tree",
        "https://en.wikipedia.org/wiki/Fractal_tree_index",
        "https://en.wikipedia.org/wiki/Fusion_tree",
        "https://en.wikipedia.org/wiki/Hash_calendar",
        "https://en.wikipedia.org/wiki/IDistance",
        "https://en.wikipedia.org/wiki/Merkle_tree",
        "https://en.wikipedia.org/wiki/PQ_tree",
        "https://en.wikipedia.org/wiki/Range_tree",
        "https://en.wikipedia.org/wiki/SPQR_tree",
        "https://en.wikipedia.org/wiki/Top_tree",
        "https://en.wikipedia.org/wiki/Search_tree",
        "https://en.wikipedia.org/wiki/Search_tree",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}