{
    "url": "https://en.wikipedia.org/wiki/Evolutionary_algorithm",
    "title": "Evolutionary algorithm",
    "table_of_contents": [
        "1 Implementation",
        "2 Types",
        "3 Comparison to biological processes",
        "4 Related techniques",
        "5 Other population-based metaheuristic methods",
        "6 Examples",
        "7 Gallery",
        "8 References",
        "9 External links",
        "10 Bibliography"
    ],
    "content": [
        {
            "paragraph1": "In computational intelligence (CI), an evolutionary algorithm (EA) is a subset of evolutionary computation, a generic population-based metaheuristic optimization algorithm. An EA uses mechanisms inspired by biological evolution, such as reproduction, mutation, recombination, and selection. Candidate solutions to the optimization problem play the role of individuals in a population, and the fitness function determines the quality of the solutions (see also loss function). Evolution of the population then takes place after the repeated application of the above operators.\n",
            "paragraph2": "Evolutionary algorithms often perform well approximating solutions to all types of problems because they ideally do not make any assumption about the underlying fitness landscape. Techniques from evolutionary algorithms applied to the modeling of biological evolution are generally limited to explorations of microevolutionary processes and planning models based upon cellular processes. In most real applications of EAs, computational complexity is a prohibiting factor. In fact, this computational complexity is due to fitness function evaluation. Fitness approximation is one of the solutions to overcome this difficulty. However, seemingly simple EA can solve often complex problems;[citation needed] therefore, there may be no direct link between algorithm complexity and problem complexity.\n"
        },
        {
            "title": "Implementation",
            "paragraph1": "The following is an example of a generic single-objective genetic algorithm.\n",
            "paragraph2": "Step One: Generate the initial population of individuals randomly. (First generation)\n",
            "paragraph3": "Step Two: Repeat the following regenerational steps until termination:\n",
            "ol1": "1 - Evaluate the fitness of each individual in the population (time limit, sufficient fitness achieved, etc.)\n2 - Select the fittest individuals for reproduction. (Parents)\n3 - Breed new individuals through crossover and mutation operations to give birth to offspring.\n4 - Replace the least-fit individuals of the population with new individuals.\n"
        },
        {
            "title": "Types",
            "paragraph1": "Similar techniques differ in genetic representation and other implementation details, and the nature of the particular applied problem.\n",
            "ul1": "Genetic algorithm – This is the most popular type of EA. One seeks the solution of a problem in the form of strings of numbers (traditionally binary, although the best representations are usually those that reflect something about the problem being solved),[2] by applying operators such as recombination and mutation (sometimes one, sometimes both).  This type of EA is often used in optimization problems.\nGenetic programming – Here the solutions are in the form of computer programs, and their fitness is determined by their ability to solve a computational problem. There are many variants of Genetic Programming, including Cartesian genetic programming, Gene expression programming, Grammatical Evolution, Linear genetic programming, Multi expression programming etc.\nEvolutionary programming – Similar to genetic programming, but the structure of the program is fixed and its numerical parameters are allowed to evolve.\nEvolution strategy – Works with vectors of real numbers as representations of solutions, and typically uses self-adaptive mutation rates.\nDifferential evolution – Based on vector differences and is therefore primarily suited for numerical optimization problems.\nNeuroevolution – Similar to genetic programming but the genomes represent artificial neural networks by describing structure and connection weights. The genome encoding can be direct or indirect.\nLearning classifier system – Here the solution is a set of classifiers (rules or conditions). A Michigan-LCS evolves at the level of individual classifiers whereas a Pittsburgh-LCS uses populations of classifier-sets. Initially, classifiers were only binary, but now include real, neural net, or S-expression types. Fitness is typically determined with either a strength or accuracy based reinforcement learning or supervised learning approach.\n"
        },
        {
            "title": "Comparison to biological processes",
            "paragraph1": "A possible limitation[according to whom?] of many evolutionary algorithms is their lack of a clear genotype–phenotype distinction. In nature, the fertilized egg cell undergoes a complex process known as embryogenesis to become a mature phenotype. This indirect encoding is believed to make the genetic search more robust (i.e. reduce the probability of fatal mutations), and also may improve the evolvability of the organism. Such indirect (also known as generative or developmental) encodings also enable evolution to exploit the regularity in the environment. Recent work in the field of artificial embryogeny, or artificial developmental systems, seeks to address these concerns. And gene expression programming successfully explores a genotype–phenotype system, where the genotype consists of linear multigenic chromosomes of fixed length and the phenotype consists of multiple expression trees or computer programs of different sizes and shapes.[improper synthesis?]\n"
        },
        {
            "title": "Related techniques",
            "paragraph1": "Swarm algorithms[clarification needed] include:\n",
            "ul1": "Ant colony optimization is based on the ideas of ant foraging by pheromone communication to form paths.[7] Primarily suited for combinatorial optimization and graph problems.\nThe runner-root algorithm (RRA) is inspired by the function of runners and roots of plants in nature.[8]\nArtificial bee colony algorithm is based on the honey bee foraging behaviour. Primarily proposed for numerical optimization and extended to solve combinatorial, constrained and multi-objective optimization problems.\nBees algorithm is based on the foraging behaviour of honey bees. It has been applied in many applications such as routing and scheduling.\nCuckoo search is inspired by the brooding parasitism of the cuckoo species. It also uses Lévy flights, and thus it suits for global optimization problems.\nParticle swarm optimization is based on the ideas of animal flocking behaviour.[7] Also primarily suited for numerical optimization problems.\n"
        },
        {
            "title": "Other population-based metaheuristic methods",
            "ul1": "Hunting Search – A method inspired by the group hunting of some animals such as wolves that organize their position to surround the prey, each of them relative to the position of the others and especially that of their leader. It is a continuous optimization method[9] adapted as a combinatorial optimization method.[10]\nAdaptive dimensional search – Unlike nature-inspired metaheuristic techniques, an adaptive dimensional search algorithm does not implement any metaphor as an underlying principle. Rather it uses a simple performance-oriented method, based on the update of the search dimensionality ratio (SDR) parameter at each iteration.[11]\nFirefly algorithm is inspired by the behavior of fireflies, attracting each other by flashing light. This is especially useful for multimodal optimization.\nHarmony search – Based on the ideas of musicians' behavior in searching for better harmonies. This algorithm is suitable for combinatorial optimization as well as parameter optimization.\nGaussian adaptation – Based on information theory. Used for maximization of manufacturing yield, mean fitness or average information. See for instance Entropy in thermodynamics and information theory.\nMemetic algorithm – A hybrid method, inspired by Richard Dawkins's notion of a meme, it commonly takes the form of a population-based algorithm coupled with individual learning procedures capable of performing local refinements. Emphasizes the exploitation of problem-specific knowledge, and tries to orchestrate local and global search in a synergistic way.\n"
        },
        {
            "title": "Examples",
            "paragraph1": "In 2020, Google stated that their AutoML-Zero can successfully rediscover classic algorithms such as the concept of neural networks.\n",
            "paragraph2": "The computer simulations Tierra and Avida attempt to model macroevolutionary dynamics.\n"
        },
        {
            "title": "Gallery",
            "paragraph1": "\n\n\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Artificial_development",
        "https://en.wikipedia.org/wiki/Artificial_life",
        "https://en.wikipedia.org/wiki/Cellular_evolutionary_algorithm",
        "https://en.wikipedia.org/wiki/Cultural_algorithm",
        "https://en.wikipedia.org/wiki/Differential_evolution",
        "https://en.wikipedia.org/wiki/Effective_fitness",
        "https://en.wikipedia.org/wiki/Evolutionary_computation",
        "https://en.wikipedia.org/wiki/Evolution_strategy",
        "https://en.wikipedia.org/wiki/Gaussian_adaptation",
        "https://en.wikipedia.org/wiki/Evolutionary_multimodal_optimization",
        "https://en.wikipedia.org/wiki/Particle_swarm_optimization",
        "https://en.wikipedia.org/wiki/Memetic_algorithm",
        "https://en.wikipedia.org/wiki/Natural_evolution_strategy",
        "https://en.wikipedia.org/wiki/Neuroevolution",
        "https://en.wikipedia.org/wiki/Promoter_based_genetic_algorithm",
        "https://en.wikipedia.org/wiki/Spiral_optimization_algorithm",
        "https://en.wikipedia.org/wiki/Polymorphic_code",
        "https://en.wikipedia.org/wiki/Genetic_algorithm",
        "https://en.wikipedia.org/wiki/Clonal_selection_algorithm",
        "https://en.wikipedia.org/wiki/Genetic_fuzzy_systems",
        "https://en.wikipedia.org/wiki/Fly_algorithm",
        "https://en.wikipedia.org/wiki/Genetic_programming",
        "https://en.wikipedia.org/wiki/Cartesian_genetic_programming",
        "https://en.wikipedia.org/wiki/Linear_genetic_programming",
        "https://en.wikipedia.org/wiki/Grammatical_evolution",
        "https://en.wikipedia.org/wiki/Multi_expression_programming",
        "https://en.wikipedia.org/wiki/Eurisko",
        "https://en.wikipedia.org/wiki/Parity_benchmark",
        "https://en.wikipedia.org/wiki/Outline_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Artificial_general_intelligence",
        "https://en.wikipedia.org/wiki/Automated_planning_and_scheduling",
        "https://en.wikipedia.org/wiki/Computer_vision",
        "https://en.wikipedia.org/wiki/General_game_playing",
        "https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning",
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Natural_language_processing",
        "https://en.wikipedia.org/wiki/Robotics",
        "https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Deep_learning",
        "https://en.wikipedia.org/wiki/Bayesian_network",
        "https://en.wikipedia.org/wiki/Philosophy_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Chinese_room",
        "https://en.wikipedia.org/wiki/Friendly_artificial_intelligence",
        "https://en.wikipedia.org/wiki/AI_control_problem",
        "https://en.wikipedia.org/wiki/AI_takeover",
        "https://en.wikipedia.org/wiki/Ethics_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Existential_risk_from_artificial_general_intelligence",
        "https://en.wikipedia.org/wiki/Turing_test",
        "https://en.wikipedia.org/wiki/History_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Timeline_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Progress_in_artificial_intelligence",
        "https://en.wikipedia.org/wiki/AI_winter",
        "https://en.wikipedia.org/wiki/Applications_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/List_of_artificial_intelligence_projects",
        "https://en.wikipedia.org/wiki/List_of_programming_languages_for_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Computational_intelligence",
        "https://en.wikipedia.org/wiki/Subset",
        "https://en.wikipedia.org/wiki/Evolutionary_computation",
        "https://en.wikipedia.org/wiki/Metaheuristic",
        "https://en.wikipedia.org/wiki/Algorithm",
        "https://en.wikipedia.org/wiki/Biological_evolution",
        "https://en.wikipedia.org/wiki/Reproduction",
        "https://en.wikipedia.org/wiki/Mutation",
        "https://en.wikipedia.org/wiki/Genetic_recombination",
        "https://en.wikipedia.org/wiki/Natural_selection",
        "https://en.wikipedia.org/wiki/Candidate_solution",
        "https://en.wikipedia.org/wiki/Optimization_problem",
        "https://en.wikipedia.org/wiki/Fitness_function",
        "https://en.wikipedia.org/wiki/Loss_function",
        "https://en.wikipedia.org/wiki/Evolution",
        "https://en.wikipedia.org/wiki/Fitness_landscape",
        "https://en.wikipedia.org/wiki/Microevolution",
        "https://en.wikipedia.org/wiki/Fitness_approximation",
        "https://en.wikipedia.org/wiki/Genetic_algorithm",
        "https://en.wikipedia.org/wiki/Population",
        "https://en.wikipedia.org/wiki/Individual",
        "https://en.wikipedia.org/wiki/Fitness_function",
        "https://en.wikipedia.org/wiki/Reproduce",
        "https://en.wikipedia.org/wiki/Breed",
        "https://en.wikipedia.org/wiki/Offspring",
        "https://en.wikipedia.org/wiki/Genetic_representation",
        "https://en.wikipedia.org/wiki/Genetic_algorithm",
        "https://en.wikipedia.org/wiki/Genetic_programming",
        "https://en.wikipedia.org/wiki/Cartesian_genetic_programming",
        "https://en.wikipedia.org/wiki/Gene_expression_programming",
        "https://en.wikipedia.org/wiki/Grammatical_Evolution",
        "https://en.wikipedia.org/wiki/Linear_genetic_programming",
        "https://en.wikipedia.org/wiki/Multi_expression_programming",
        "https://en.wikipedia.org/wiki/Evolutionary_programming",
        "https://en.wikipedia.org/wiki/Evolution_strategy",
        "https://en.wikipedia.org/wiki/Differential_evolution",
        "https://en.wikipedia.org/wiki/Numerical_optimization",
        "https://en.wikipedia.org/wiki/Neuroevolution",
        "https://en.wikipedia.org/wiki/Learning_classifier_system",
        "https://en.wikipedia.org/wiki/Reinforcement_learning",
        "https://en.wikipedia.org/wiki/Supervised_learning",
        "https://en.wikipedia.org/wiki/Embryogenesis",
        "https://en.wikipedia.org/wiki/Phenotype",
        "https://en.wikipedia.org/wiki/Encoding",
        "https://en.wikipedia.org/wiki/Evolvability",
        "https://en.wikipedia.org/wiki/Artificial_development",
        "https://en.wikipedia.org/wiki/Gene_expression_programming",
        "https://en.wikipedia.org/wiki/Swarm_intelligence",
        "https://en.wikipedia.org/wiki/Ant_colony_optimization",
        "https://en.wikipedia.org/wiki/Combinatorial_optimization",
        "https://en.wikipedia.org/wiki/Graph_theory",
        "https://en.wikipedia.org/wiki/Artificial_bee_colony_algorithm",
        "https://en.wikipedia.org/wiki/Bees_algorithm",
        "https://en.wikipedia.org/wiki/Cuckoo_search",
        "https://en.wikipedia.org/wiki/Cuckoo",
        "https://en.wikipedia.org/wiki/Optimization",
        "https://en.wikipedia.org/wiki/Particle_swarm_optimization",
        "https://en.wikipedia.org/wiki/Numerical_optimization",
        "https://en.wikipedia.org/wiki/Hunting_Search",
        "https://en.wikipedia.org/wiki/Adaptive_dimensional_search",
        "https://en.wikipedia.org/wiki/Firefly_algorithm",
        "https://en.wikipedia.org/wiki/Harmony_search",
        "https://en.wikipedia.org/wiki/Gaussian_adaptation",
        "https://en.wikipedia.org/wiki/Mean_fitness",
        "https://en.wikipedia.org/wiki/Average_information",
        "https://en.wikipedia.org/wiki/Entropy_in_thermodynamics_and_information_theory",
        "https://en.wikipedia.org/wiki/Memetic_algorithm",
        "https://en.wikipedia.org/wiki/Richard_Dawkins",
        "https://en.wikipedia.org/wiki/Google",
        "https://en.wikipedia.org/wiki/Avida",
        "https://en.wikipedia.org/wiki/Macroevolution",
        "https://en.wikipedia.org/wiki/Rosenbrock_function",
        "https://en.wikipedia.org/wiki/Rosenbrock_function",
        "https://en.wikipedia.org/wiki/Estimation_of_distribution_algorithm",
        "https://en.wikipedia.org/wiki/Wayback_Machine",
        "https://en.wikipedia.org/wiki/CRC_Press",
        "https://en.wikipedia.org/wiki/Ingo_Rechenberg",
        "https://en.wikipedia.org/wiki/Evolutionary_algorithm",
        "https://en.wikipedia.org/wiki/Evolutionary_algorithm",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}